/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 24 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtCore/sipQtCoreQVariantMap.cpp"



extern "C" {static void assign_QVariantMap(void *, SIP_SSIZE_T, void *);}
static void assign_QVariantMap(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVariantMap *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVariantMap *>(sipSrc);
}


extern "C" {static void *array_QVariantMap(SIP_SSIZE_T);}
static void *array_QVariantMap(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVariantMap[sipNrElem];
}


extern "C" {static void *copy_QVariantMap(const void *, SIP_SSIZE_T);}
static void *copy_QVariantMap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVariantMap(reinterpret_cast<const  ::QVariantMap *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVariantMap(void *, int);}
static void release_QVariantMap(void *ptr, int)
{
    delete reinterpret_cast< ::QVariantMap *>(ptr);
}



extern "C" {static int convertTo_QVariantMap(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariantMap(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVariantMap **sipCppPtr = reinterpret_cast< ::QVariantMap **>(sipCppPtrV);

#line 32 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtCore/qpycore_qvariantmap.sip"
    if (!sipIsErr)
        return PyDict_Check(sipPy);

    QVariantMap *qvm = new QVariantMap;

    if (!qpycore_toQVariantMap(sipPy, *qvm))
    {
        delete qvm;
        return 0;
    }

    *sipCppPtr = qvm;
 
    return sipGetState(sipTransferObj);
#line 83 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtCore/sipQtCoreQVariantMap.cpp"
}


extern "C" {static PyObject *convertFrom_QVariantMap(void *, PyObject *);}
static PyObject *convertFrom_QVariantMap(void *sipCppV, PyObject *)
{
    ::QVariantMap *sipCpp = reinterpret_cast< ::QVariantMap *>(sipCppV);

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtCore/qpycore_qvariantmap.sip"
    return qpycore_fromQVariantMap(*sipCpp);
#line 94 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtCore/sipQtCoreQVariantMap.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVariantMap = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QVariantMap,     /* QVariantMap */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVariantMap,
    array_QVariantMap,
    copy_QVariantMap,
    release_QVariantMap,
    convertTo_QVariantMap,
    convertFrom_QVariantMap
};
