/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qquickrendercontrol.sip"
#include <qquickrendercontrol.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQQuickRenderControl.cpp"


class sipQQuickRenderControl : public  ::QQuickRenderControl
{
public:
    sipQQuickRenderControl( ::QObject*);
    virtual ~sipQQuickRenderControl();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QWindow* renderWindow( ::QPoint*);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickRenderControl(const sipQQuickRenderControl &);
    sipQQuickRenderControl &operator = (const sipQQuickRenderControl &);

    char sipPyMethods[8];
};

sipQQuickRenderControl::sipQQuickRenderControl( ::QObject*a0):  ::QQuickRenderControl(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickRenderControl::~sipQQuickRenderControl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickRenderControl::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickRenderControl);

    return  ::QQuickRenderControl::metaObject();
}

int sipQQuickRenderControl::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickRenderControl::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickRenderControl,_c,_id,_a);

    return _id;
}

void *sipQQuickRenderControl::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickRenderControl, _clname, &sipCpp) ? sipCpp :  ::QQuickRenderControl::qt_metacast(_clname));
}

 ::QWindow* sipQQuickRenderControl::renderWindow( ::QPoint*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_renderWindow);

    if (!sipMeth)
        return  ::QQuickRenderControl::renderWindow(a0);

    extern  ::QWindow* sipVH_QtQuick_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPoint*);

    return sipVH_QtQuick_42(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickRenderControl::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QQuickRenderControl::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickRenderControl::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickRenderControl::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickRenderControl::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickRenderControl::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickRenderControl::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickRenderControl::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickRenderControl::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickRenderControl::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickRenderControl_initialize, "initialize(self, QOpenGLContext)");

extern "C" {static PyObject *meth_QQuickRenderControl_initialize(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOpenGLContext* a0;
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickRenderControl, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->initialize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_initialize, doc_QQuickRenderControl_initialize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QQuickRenderControl_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_invalidate, doc_QQuickRenderControl_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_polishItems, "polishItems(self)");

extern "C" {static PyObject *meth_QQuickRenderControl_polishItems(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_polishItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            sipCpp->polishItems();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_polishItems, doc_QQuickRenderControl_polishItems);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_render, "render(self)");

extern "C" {static PyObject *meth_QQuickRenderControl_render(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_render(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            sipCpp->render();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_render, doc_QQuickRenderControl_render);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_sync, "sync(self) -> bool");

extern "C" {static PyObject *meth_QQuickRenderControl_sync(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sync();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_sync, doc_QQuickRenderControl_sync);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_grab, "grab(self) -> QImage");

extern "C" {static PyObject *meth_QQuickRenderControl_grab(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_grab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->grab());

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_grab, doc_QQuickRenderControl_grab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_renderWindowFor, "renderWindowFor(QQuickWindow, offset: QPoint = None) -> QWindow");

extern "C" {static PyObject *meth_QQuickRenderControl_renderWindowFor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_renderWindowFor(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWindow* a0;
         ::QPoint* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|J8", sipType_QQuickWindow, &a0, sipType_QPoint, &a1))
        {
             ::QWindow*sipRes;

            sipRes =  ::QQuickRenderControl::renderWindowFor(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_renderWindowFor, doc_QQuickRenderControl_renderWindowFor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_renderWindow, "renderWindow(self, QPoint) -> QWindow");

extern "C" {static PyObject *meth_QQuickRenderControl_renderWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_renderWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPoint* a0;
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickRenderControl, &sipCpp, sipType_QPoint, &a0))
        {
             ::QWindow*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickRenderControl::renderWindow(a0) : sipCpp->renderWindow(a0));

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_renderWindow, doc_QQuickRenderControl_renderWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickRenderControl_prepareThread, "prepareThread(self, QThread)");

extern "C" {static PyObject *meth_QQuickRenderControl_prepareThread(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_prepareThread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread* a0;
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickRenderControl, &sipCpp, sipType_QThread, &a0))
        {
            sipCpp->prepareThread(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_prepareThread, doc_QQuickRenderControl_prepareThread);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickRenderControl(void *, const sipTypeDef *);}
static void *cast_QQuickRenderControl(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickRenderControl *sipCpp = reinterpret_cast< ::QQuickRenderControl *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickRenderControl(void *, int);}
static void release_QQuickRenderControl(void *sipCppV, int)
{
     ::QQuickRenderControl *sipCpp = reinterpret_cast< ::QQuickRenderControl *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickRenderControl(sipSimpleWrapper *);}
static void dealloc_QQuickRenderControl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickRenderControl *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickRenderControl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickRenderControl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickRenderControl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickRenderControl *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQuickRenderControl(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickRenderControl[] = {{3, 0, 1}};


static PyMethodDef methods_QQuickRenderControl[] = {
    {SIP_MLNAME_CAST(sipName_grab), meth_QQuickRenderControl_grab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_grab)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QQuickRenderControl_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_initialize)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QQuickRenderControl_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_invalidate)},
    {SIP_MLNAME_CAST(sipName_polishItems), meth_QQuickRenderControl_polishItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_polishItems)},
    {SIP_MLNAME_CAST(sipName_prepareThread), meth_QQuickRenderControl_prepareThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_prepareThread)},
    {SIP_MLNAME_CAST(sipName_render), meth_QQuickRenderControl_render, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_render)},
    {SIP_MLNAME_CAST(sipName_renderWindow), meth_QQuickRenderControl_renderWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_renderWindow)},
    {SIP_MLNAME_CAST(sipName_renderWindowFor), (PyCFunction)meth_QQuickRenderControl_renderWindowFor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickRenderControl_renderWindowFor)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QQuickRenderControl_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_sync)}
};

PyDoc_STRVAR(doc_QQuickRenderControl, "\1QQuickRenderControl(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickRenderControl[] = {
    {"sceneChanged()", "\1sceneChanged(self)", 0, 0},
    {"renderRequested()", "\1renderRequested(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QQuickRenderControl = {
    & ::QQuickRenderControl::staticMetaObject,
    0,
    signals_QQuickRenderControl,
    0
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickRenderControl = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickRenderControl,
        {0},
        &plugin_QQuickRenderControl
    },
    {
        sipNameNr_QQuickRenderControl,
        {0, 0, 1},
        9, methods_QQuickRenderControl,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickRenderControl,
    -1,
    -1,
    supers_QQuickRenderControl,
    0,
    init_type_QQuickRenderControl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickRenderControl,
    0,
    0,
    0,
    release_QQuickRenderControl,
    cast_QQuickRenderControl,
    0,
    0,
    0,
    0,
    0,
    0
};
