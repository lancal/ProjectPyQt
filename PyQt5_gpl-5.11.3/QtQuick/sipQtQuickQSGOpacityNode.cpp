/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 324 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGOpacityNode.cpp"

#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGOpacityNode.cpp"
#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGOpacityNode.cpp"
#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGOpacityNode.cpp"


class sipQSGOpacityNode : public  ::QSGOpacityNode
{
public:
    sipQSGOpacityNode();
    virtual ~sipQSGOpacityNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isSubtreeBlocked() const;
    void preprocess();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGOpacityNode(const sipQSGOpacityNode &);
    sipQSGOpacityNode &operator = (const sipQSGOpacityNode &);

    char sipPyMethods[2];
};

sipQSGOpacityNode::sipQSGOpacityNode():  ::QSGOpacityNode(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGOpacityNode::~sipQSGOpacityNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQSGOpacityNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGOpacityNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGOpacityNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGOpacityNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGOpacityNode_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QSGOpacityNode_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QSGOpacityNode_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QSGOpacityNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QSGOpacityNode, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpacityNode, sipName_setOpacity, doc_QSGOpacityNode_setOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpacityNode_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QSGOpacityNode_opacity(PyObject *, PyObject *);}
static PyObject *meth_QSGOpacityNode_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSGOpacityNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpacityNode, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpacityNode, sipName_opacity, doc_QSGOpacityNode_opacity);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGOpacityNode(void *, const sipTypeDef *);}
static void *cast_QSGOpacityNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGOpacityNode *sipCpp = reinterpret_cast< ::QSGOpacityNode *>(sipCppV);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGOpacityNode(void *, int);}
static void release_QSGOpacityNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGOpacityNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGOpacityNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGOpacityNode(sipSimpleWrapper *);}
static void dealloc_QSGOpacityNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGOpacityNode *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGOpacityNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGOpacityNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGOpacityNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGOpacityNode *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQSGOpacityNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGOpacityNode[] = {{63, 255, 1}};


static PyMethodDef methods_QSGOpacityNode[] = {
    {SIP_MLNAME_CAST(sipName_opacity), meth_QSGOpacityNode_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpacityNode_opacity)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QSGOpacityNode_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpacityNode_setOpacity)}
};

PyDoc_STRVAR(doc_QSGOpacityNode, "\1QSGOpacityNode()");


static pyqt5ClassPluginDef plugin_QSGOpacityNode = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtQuick_QSGOpacityNode = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGOpacityNode,
        {0},
        &plugin_QSGOpacityNode
    },
    {
        sipNameNr_QSGOpacityNode,
        {0, 0, 1},
        2, methods_QSGOpacityNode,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGOpacityNode,
    -1,
    -1,
    supers_QSGOpacityNode,
    0,
    init_type_QSGOpacityNode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGOpacityNode,
    0,
    0,
    0,
    release_QSGOpacityNode,
    cast_QSGOpacityNode,
    0,
    0,
    0,
    0,
    0,
    0
};
