/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"

#line 296 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 58 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 47 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 50 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 53 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 56 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"
#line 26 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 59 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtQuick/sipQtQuickQSGRenderNode.cpp"


PyDoc_STRVAR(doc_QSGRenderNode_changedStates, "changedStates(self) -> QSGRenderNode.StateFlags");

extern "C" {static PyObject *meth_QSGRenderNode_changedStates(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_changedStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags((sipSelfWasArg ? sipCpp-> ::QSGRenderNode::changedStates() : sipCpp->changedStates()));

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_changedStates, doc_QSGRenderNode_changedStates);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_render, "render(self, QSGRenderNode.RenderState)");

extern "C" {static PyObject *meth_QSGRenderNode_render(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_render(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState* a0;
         ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGRenderNode, &sipCpp, sipType_QSGRenderNode_RenderState, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRenderNode, sipName_render);
                return NULL;
            }

            sipCpp->render(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_render, doc_QSGRenderNode_render);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QSGRenderNode_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGRenderNode::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_releaseResources, doc_QSGRenderNode_releaseResources);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_flags, "flags(self) -> QSGRenderNode.RenderingFlags");

extern "C" {static PyObject *meth_QSGRenderNode_flags(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags((sipSelfWasArg ? sipCpp-> ::QSGRenderNode::flags() : sipCpp->flags()));

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_flags, doc_QSGRenderNode_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGRenderNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QSGRenderNode::rect() : sipCpp->rect()));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_rect, doc_QSGRenderNode_rect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_matrix, "matrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGRenderNode_matrix(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_matrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
            const  ::QMatrix4x4*sipRes;

            sipRes = sipCpp->matrix();

            return sipConvertFromType(const_cast< ::QMatrix4x4 *>(sipRes),sipType_QMatrix4x4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_matrix, doc_QSGRenderNode_matrix);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_clipList, "clipList(self) -> QSGClipNode");

extern "C" {static PyObject *meth_QSGRenderNode_clipList(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_clipList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
            const  ::QSGClipNode*sipRes;

            sipRes = sipCpp->clipList();

            return sipConvertFromType(const_cast< ::QSGClipNode *>(sipRes),sipType_QSGClipNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_clipList, doc_QSGRenderNode_clipList);

    return NULL;
}


PyDoc_STRVAR(doc_QSGRenderNode_inheritedOpacity, "inheritedOpacity(self) -> float");

extern "C" {static PyObject *meth_QSGRenderNode_inheritedOpacity(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_inheritedOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->inheritedOpacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_inheritedOpacity, doc_QSGRenderNode_inheritedOpacity);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGRenderNode(void *, const sipTypeDef *);}
static void *cast_QSGRenderNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGRenderNode *sipCpp = reinterpret_cast< ::QSGRenderNode *>(sipCppV);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRenderNode(void *, int);}
static void release_QSGRenderNode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRenderNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGRenderNode(sipSimpleWrapper *);}
static void dealloc_QSGRenderNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRenderNode(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGRenderNode[] = {{63, 255, 1}};


static PyMethodDef methods_QSGRenderNode[] = {
    {SIP_MLNAME_CAST(sipName_changedStates), meth_QSGRenderNode_changedStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_changedStates)},
    {SIP_MLNAME_CAST(sipName_clipList), meth_QSGRenderNode_clipList, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_clipList)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSGRenderNode_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_flags)},
    {SIP_MLNAME_CAST(sipName_inheritedOpacity), meth_QSGRenderNode_inheritedOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_inheritedOpacity)},
    {SIP_MLNAME_CAST(sipName_matrix), meth_QSGRenderNode_matrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_matrix)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGRenderNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_rect)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QSGRenderNode_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_releaseResources)},
    {SIP_MLNAME_CAST(sipName_render), meth_QSGRenderNode_render, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_render)}
};

static sipEnumMemberDef enummembers_QSGRenderNode[] = {
    {sipName_BlendState, static_cast<int>( ::QSGRenderNode::BlendState), 76},
    {sipName_BoundedRectRendering, static_cast<int>( ::QSGRenderNode::BoundedRectRendering), 74},
    {sipName_ColorState, static_cast<int>( ::QSGRenderNode::ColorState), 76},
    {sipName_CullState, static_cast<int>( ::QSGRenderNode::CullState), 76},
    {sipName_DepthAwareRendering, static_cast<int>( ::QSGRenderNode::DepthAwareRendering), 74},
    {sipName_DepthState, static_cast<int>( ::QSGRenderNode::DepthState), 76},
    {sipName_OpaqueRendering, static_cast<int>( ::QSGRenderNode::OpaqueRendering), 74},
    {sipName_RenderTargetState, static_cast<int>( ::QSGRenderNode::RenderTargetState), 76},
    {sipName_ScissorState, static_cast<int>( ::QSGRenderNode::ScissorState), 76},
    {sipName_StencilState, static_cast<int>( ::QSGRenderNode::StencilState), 76},
    {sipName_ViewportState, static_cast<int>( ::QSGRenderNode::ViewportState), 76},
};


static pyqt5ClassPluginDef plugin_QSGRenderNode = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRenderNode = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRenderNode,
        {0},
        &plugin_QSGRenderNode
    },
    {
        sipNameNr_QSGRenderNode,
        {0, 0, 1},
        8, methods_QSGRenderNode,
        11, enummembers_QSGRenderNode,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QSGRenderNode,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGRenderNode,
    0,
    0,
    0,
    release_QSGRenderNode,
    cast_QSGRenderNode,
    0,
    0,
    0,
    0,
    0,
    0
};
