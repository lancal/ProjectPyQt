/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 71 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 38 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNfc/qndefmessage.sip"
#include <qndefmessage.h>
#line 41 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 44 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 50 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 53 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 56 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 59 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 62 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 74 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 92 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNfc/sipQtNfcQNearFieldTarget.cpp"


class sipQNearFieldTarget : public  ::QNearFieldTarget
{
public:
    sipQNearFieldTarget( ::QObject*);
    virtual ~sipQNearFieldTarget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool handleResponse(const  ::QNearFieldTarget::RequestId&,const  ::QByteArray&);
    bool waitForRequestCompleted(const  ::QNearFieldTarget::RequestId&,int);
     ::QNearFieldTarget::RequestId sendCommands(const QList< ::QByteArray>&);
     ::QNearFieldTarget::RequestId sendCommand(const  ::QByteArray&);
     ::QNearFieldTarget::RequestId writeNdefMessages(const QList< ::QNdefMessage>&);
     ::QNearFieldTarget::RequestId readNdefMessages();
    bool hasNdefMessage();
     ::QNearFieldTarget::AccessMethods accessMethods() const;
     ::QNearFieldTarget::Type type() const;
     ::QUrl url() const;
     ::QByteArray uid() const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNearFieldTarget(const sipQNearFieldTarget &);
    sipQNearFieldTarget &operator = (const sipQNearFieldTarget &);

    char sipPyMethods[18];
};

sipQNearFieldTarget::sipQNearFieldTarget( ::QObject*a0):  ::QNearFieldTarget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNearFieldTarget::~sipQNearFieldTarget()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNearFieldTarget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNfc_qt_metaobject(sipPySelf,sipType_QNearFieldTarget);

    return  ::QNearFieldTarget::metaObject();
}

int sipQNearFieldTarget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNearFieldTarget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNfc_qt_metacall(sipPySelf,sipType_QNearFieldTarget,_c,_id,_a);

    return _id;
}

void *sipQNearFieldTarget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNfc_qt_metacast(sipPySelf, sipType_QNearFieldTarget, _clname, &sipCpp) ? sipCpp :  ::QNearFieldTarget::qt_metacast(_clname));
}

bool sipQNearFieldTarget::handleResponse(const  ::QNearFieldTarget::RequestId& a0,const  ::QByteArray& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_handleResponse);

    if (!sipMeth)
        return  ::QNearFieldTarget::handleResponse(a0,a1);

    extern bool sipVH_QtNfc_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNearFieldTarget::RequestId&,const  ::QByteArray&);

    return sipVH_QtNfc_16(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQNearFieldTarget::waitForRequestCompleted(const  ::QNearFieldTarget::RequestId& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_waitForRequestCompleted);

    if (!sipMeth)
        return  ::QNearFieldTarget::waitForRequestCompleted(a0,a1);

    extern bool sipVH_QtNfc_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNearFieldTarget::RequestId&,int);

    return sipVH_QtNfc_15(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNearFieldTarget::RequestId sipQNearFieldTarget::sendCommands(const QList< ::QByteArray>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_sendCommands);

    if (!sipMeth)
        return  ::QNearFieldTarget::sendCommands(a0);

    extern  ::QNearFieldTarget::RequestId sipVH_QtNfc_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList< ::QByteArray>&);

    return sipVH_QtNfc_14(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNearFieldTarget::RequestId sipQNearFieldTarget::sendCommand(const  ::QByteArray& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_sendCommand);

    if (!sipMeth)
        return  ::QNearFieldTarget::sendCommand(a0);

    extern  ::QNearFieldTarget::RequestId sipVH_QtNfc_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&);

    return sipVH_QtNfc_13(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNearFieldTarget::RequestId sipQNearFieldTarget::writeNdefMessages(const QList< ::QNdefMessage>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_writeNdefMessages);

    if (!sipMeth)
        return  ::QNearFieldTarget::writeNdefMessages(a0);

    extern  ::QNearFieldTarget::RequestId sipVH_QtNfc_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList< ::QNdefMessage>&);

    return sipVH_QtNfc_12(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNearFieldTarget::RequestId sipQNearFieldTarget::readNdefMessages()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_readNdefMessages);

    if (!sipMeth)
        return  ::QNearFieldTarget::readNdefMessages();

    extern  ::QNearFieldTarget::RequestId sipVH_QtNfc_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNfc_11(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNearFieldTarget::hasNdefMessage()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_hasNdefMessage);

    if (!sipMeth)
        return  ::QNearFieldTarget::hasNdefMessage();

    extern bool sipVH_QtNfc_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNfc_10(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QNearFieldTarget::AccessMethods sipQNearFieldTarget::accessMethods() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QNearFieldTarget,sipName_accessMethods);

    if (!sipMeth)
        return  ::QNearFieldTarget::AccessMethods();

    extern  ::QNearFieldTarget::AccessMethods sipVH_QtNfc_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNfc_9(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QNearFieldTarget::Type sipQNearFieldTarget::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_QNearFieldTarget,sipName_type);

    if (!sipMeth)
        return  ::QNearFieldTarget::ProprietaryTag;

    extern  ::QNearFieldTarget::Type sipVH_QtNfc_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNfc_8(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QUrl sipQNearFieldTarget::url() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_url);

    if (!sipMeth)
        return  ::QNearFieldTarget::url();

    extern  ::QUrl sipVH_QtNfc_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNfc_7(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QByteArray sipQNearFieldTarget::uid() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QNearFieldTarget,sipName_uid);

    if (!sipMeth)
        return  ::QByteArray();

    extern  ::QByteArray sipVH_QtNfc_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNfc_6(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNearFieldTarget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QNearFieldTarget::event(a0);

    extern bool sipVH_QtNfc_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNfc_5(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNearFieldTarget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QNearFieldTarget::eventFilter(a0,a1);

    extern bool sipVH_QtNfc_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNfc_4(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNearFieldTarget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QNearFieldTarget::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNfc_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNfc_3(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNearFieldTarget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QNearFieldTarget::childEvent(a0);
        return;
    }

    extern void sipVH_QtNfc_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNfc_2(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNearFieldTarget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QNearFieldTarget::customEvent(a0);
        return;
    }

    extern void sipVH_QtNfc_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNfc_1(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNearFieldTarget::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QNearFieldTarget::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNfc_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNfc_0(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNearFieldTarget::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QNearFieldTarget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNfc_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNfc_0(sipGILState, sipImportedVirtErrorHandlers_QtNfc_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNearFieldTarget_uid, "uid(self) -> QByteArray");

extern "C" {static PyObject *meth_QNearFieldTarget_uid(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_uid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
             ::QByteArray*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNearFieldTarget, sipName_uid);
                return NULL;
            }

            sipRes = new  ::QByteArray(sipCpp->uid());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_uid, doc_QNearFieldTarget_uid);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNearFieldTarget_url(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl((sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::url() : sipCpp->url()));

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_url, doc_QNearFieldTarget_url);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_type, "type(self) -> QNearFieldTarget.Type");

extern "C" {static PyObject *meth_QNearFieldTarget_type(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
             ::QNearFieldTarget::Type sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNearFieldTarget, sipName_type);
                return NULL;
            }

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNearFieldTarget_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_type, doc_QNearFieldTarget_type);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_accessMethods, "accessMethods(self) -> QNearFieldTarget.AccessMethods");

extern "C" {static PyObject *meth_QNearFieldTarget_accessMethods(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_accessMethods(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
             ::QNearFieldTarget::AccessMethods*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNearFieldTarget, sipName_accessMethods);
                return NULL;
            }

            sipRes = new  ::QNearFieldTarget::AccessMethods(sipCpp->accessMethods());

            return sipConvertFromNewType(sipRes,sipType_QNearFieldTarget_AccessMethods,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_accessMethods, doc_QNearFieldTarget_accessMethods);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_isProcessingCommand, "isProcessingCommand(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_isProcessingCommand(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_isProcessingCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isProcessingCommand();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_isProcessingCommand, doc_QNearFieldTarget_isProcessingCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_hasNdefMessage, "hasNdefMessage(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_hasNdefMessage(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_hasNdefMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::hasNdefMessage() : sipCpp->hasNdefMessage());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_hasNdefMessage, doc_QNearFieldTarget_hasNdefMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_readNdefMessages, "readNdefMessages(self) -> QNearFieldTarget.RequestId");

extern "C" {static PyObject *meth_QNearFieldTarget_readNdefMessages(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_readNdefMessages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
             ::QNearFieldTarget::RequestId*sipRes;

            sipRes = new  ::QNearFieldTarget::RequestId((sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::readNdefMessages() : sipCpp->readNdefMessages()));

            return sipConvertFromNewType(sipRes,sipType_QNearFieldTarget_RequestId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_readNdefMessages, doc_QNearFieldTarget_readNdefMessages);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_writeNdefMessages, "writeNdefMessages(self, Iterable[QNdefMessage]) -> QNearFieldTarget.RequestId");

extern "C" {static PyObject *meth_QNearFieldTarget_writeNdefMessages(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_writeNdefMessages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const QList< ::QNdefMessage>* a0;
        int a0State = 0;
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QList_0100QNdefMessage,&a0, &a0State))
        {
             ::QNearFieldTarget::RequestId*sipRes;

            sipRes = new  ::QNearFieldTarget::RequestId((sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::writeNdefMessages(*a0) : sipCpp->writeNdefMessages(*a0)));
            sipReleaseType(const_cast<QList< ::QNdefMessage> *>(a0),sipType_QList_0100QNdefMessage,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNearFieldTarget_RequestId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_writeNdefMessages, doc_QNearFieldTarget_writeNdefMessages);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_sendCommand, "sendCommand(self, Union[QByteArray, bytes, bytearray]) -> QNearFieldTarget.RequestId");

extern "C" {static PyObject *meth_QNearFieldTarget_sendCommand(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_sendCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QNearFieldTarget::RequestId*sipRes;

            sipRes = new  ::QNearFieldTarget::RequestId((sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::sendCommand(*a0) : sipCpp->sendCommand(*a0)));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNearFieldTarget_RequestId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_sendCommand, doc_QNearFieldTarget_sendCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_sendCommands, "sendCommands(self, Iterable[Union[QByteArray, bytes, bytearray]]) -> QNearFieldTarget.RequestId");

extern "C" {static PyObject *meth_QNearFieldTarget_sendCommands(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_sendCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const QList< ::QByteArray>* a0;
        int a0State = 0;
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QList_0100QByteArray,&a0, &a0State))
        {
             ::QNearFieldTarget::RequestId*sipRes;

            sipRes = new  ::QNearFieldTarget::RequestId((sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::sendCommands(*a0) : sipCpp->sendCommands(*a0)));
            sipReleaseType(const_cast<QList< ::QByteArray> *>(a0),sipType_QList_0100QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNearFieldTarget_RequestId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_sendCommands, doc_QNearFieldTarget_sendCommands);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_waitForRequestCompleted, "waitForRequestCompleted(self, QNearFieldTarget.RequestId, msecs: int = 5000) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_waitForRequestCompleted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_waitForRequestCompleted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNearFieldTarget::RequestId* a0;
        int a1 = 5000;
         ::QNearFieldTarget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QNearFieldTarget_RequestId, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::waitForRequestCompleted(*a0,a1) : sipCpp->waitForRequestCompleted(*a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_waitForRequestCompleted, doc_QNearFieldTarget_waitForRequestCompleted);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_requestResponse, "requestResponse(self, QNearFieldTarget.RequestId) -> Any");

extern "C" {static PyObject *meth_QNearFieldTarget_requestResponse(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_requestResponse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QNearFieldTarget::RequestId* a0;
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QNearFieldTarget_RequestId, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->requestResponse(*a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_requestResponse, doc_QNearFieldTarget_requestResponse);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_setResponseForRequest, "setResponseForRequest(self, QNearFieldTarget.RequestId, Any, emitRequestCompleted: bool = True)");

extern "C" {static PyObject *meth_QNearFieldTarget_setResponseForRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_setResponseForRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QNearFieldTarget::RequestId* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        bool a2 = 1;
         ::QNearFieldTarget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_emitRequestCompleted,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|b", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QNearFieldTarget_RequestId, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            sipCpp->setResponseForRequest(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_setResponseForRequest, doc_QNearFieldTarget_setResponseForRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_handleResponse, "handleResponse(self, QNearFieldTarget.RequestId, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_handleResponse(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_handleResponse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNearFieldTarget::RequestId* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QNearFieldTarget, &sipCpp, sipType_QNearFieldTarget_RequestId, &a0, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNearFieldTarget::handleResponse(*a0,*a1) : sipCpp->handleResponse(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_handleResponse, doc_QNearFieldTarget_handleResponse);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_keepConnection, "keepConnection(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_keepConnection(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_keepConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepConnection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_keepConnection, doc_QNearFieldTarget_keepConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_setKeepConnection, "setKeepConnection(self, bool) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_setKeepConnection(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_setKeepConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNearFieldTarget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setKeepConnection(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_setKeepConnection, doc_QNearFieldTarget_setKeepConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_disconnect, "disconnect(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldTarget_disconnect(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_disconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->disconnect();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_disconnect, doc_QNearFieldTarget_disconnect);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldTarget_maxCommandLength, "maxCommandLength(self) -> int");

extern "C" {static PyObject *meth_QNearFieldTarget_maxCommandLength(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldTarget_maxCommandLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QNearFieldTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldTarget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxCommandLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldTarget, sipName_maxCommandLength, doc_QNearFieldTarget_maxCommandLength);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNearFieldTarget(void *, const sipTypeDef *);}
static void *cast_QNearFieldTarget(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNearFieldTarget *sipCpp = reinterpret_cast< ::QNearFieldTarget *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNearFieldTarget(void *, int);}
static void release_QNearFieldTarget(void *sipCppV, int)
{
     ::QNearFieldTarget *sipCpp = reinterpret_cast< ::QNearFieldTarget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNearFieldTarget(sipSimpleWrapper *);}
static void dealloc_QNearFieldTarget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNearFieldTarget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNearFieldTarget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNearFieldTarget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNearFieldTarget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNearFieldTarget *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNearFieldTarget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNearFieldTarget[] = {{6, 0, 1}};


static PyMethodDef methods_QNearFieldTarget[] = {
    {SIP_MLNAME_CAST(sipName_accessMethods), meth_QNearFieldTarget_accessMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_accessMethods)},
    {SIP_MLNAME_CAST(sipName_disconnect), meth_QNearFieldTarget_disconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_disconnect)},
    {SIP_MLNAME_CAST(sipName_handleResponse), meth_QNearFieldTarget_handleResponse, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_handleResponse)},
    {SIP_MLNAME_CAST(sipName_hasNdefMessage), meth_QNearFieldTarget_hasNdefMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_hasNdefMessage)},
    {SIP_MLNAME_CAST(sipName_isProcessingCommand), meth_QNearFieldTarget_isProcessingCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_isProcessingCommand)},
    {SIP_MLNAME_CAST(sipName_keepConnection), meth_QNearFieldTarget_keepConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_keepConnection)},
    {SIP_MLNAME_CAST(sipName_maxCommandLength), meth_QNearFieldTarget_maxCommandLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_maxCommandLength)},
    {SIP_MLNAME_CAST(sipName_readNdefMessages), meth_QNearFieldTarget_readNdefMessages, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_readNdefMessages)},
    {SIP_MLNAME_CAST(sipName_requestResponse), meth_QNearFieldTarget_requestResponse, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_requestResponse)},
    {SIP_MLNAME_CAST(sipName_sendCommand), meth_QNearFieldTarget_sendCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_sendCommand)},
    {SIP_MLNAME_CAST(sipName_sendCommands), meth_QNearFieldTarget_sendCommands, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_sendCommands)},
    {SIP_MLNAME_CAST(sipName_setKeepConnection), meth_QNearFieldTarget_setKeepConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_setKeepConnection)},
    {SIP_MLNAME_CAST(sipName_setResponseForRequest), (PyCFunction)meth_QNearFieldTarget_setResponseForRequest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNearFieldTarget_setResponseForRequest)},
    {SIP_MLNAME_CAST(sipName_type), meth_QNearFieldTarget_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_type)},
    {SIP_MLNAME_CAST(sipName_uid), meth_QNearFieldTarget_uid, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_uid)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNearFieldTarget_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_url)},
    {SIP_MLNAME_CAST(sipName_waitForRequestCompleted), (PyCFunction)meth_QNearFieldTarget_waitForRequestCompleted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNearFieldTarget_waitForRequestCompleted)},
    {SIP_MLNAME_CAST(sipName_writeNdefMessages), meth_QNearFieldTarget_writeNdefMessages, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldTarget_writeNdefMessages)}
};

static sipEnumMemberDef enummembers_QNearFieldTarget[] = {
    {sipName_ChecksumMismatchError, static_cast<int>( ::QNearFieldTarget::ChecksumMismatchError), 26},
    {sipName_CommandError, static_cast<int>( ::QNearFieldTarget::CommandError), 26},
    {sipName_InvalidParametersError, static_cast<int>( ::QNearFieldTarget::InvalidParametersError), 26},
    {sipName_LlcpAccess, static_cast<int>( ::QNearFieldTarget::LlcpAccess), 24},
    {sipName_MifareTag, static_cast<int>( ::QNearFieldTarget::MifareTag), 28},
    {sipName_NdefAccess, static_cast<int>( ::QNearFieldTarget::NdefAccess), 24},
    {sipName_NdefReadError, static_cast<int>( ::QNearFieldTarget::NdefReadError), 26},
    {sipName_NdefWriteError, static_cast<int>( ::QNearFieldTarget::NdefWriteError), 26},
    {sipName_NfcTagType1, static_cast<int>( ::QNearFieldTarget::NfcTagType1), 28},
    {sipName_NfcTagType2, static_cast<int>( ::QNearFieldTarget::NfcTagType2), 28},
    {sipName_NfcTagType3, static_cast<int>( ::QNearFieldTarget::NfcTagType3), 28},
    {sipName_NfcTagType4, static_cast<int>( ::QNearFieldTarget::NfcTagType4), 28},
    {sipName_NoError, static_cast<int>( ::QNearFieldTarget::NoError), 26},
    {sipName_NoResponseError, static_cast<int>( ::QNearFieldTarget::NoResponseError), 26},
    {sipName_ProprietaryTag, static_cast<int>( ::QNearFieldTarget::ProprietaryTag), 28},
    {sipName_TagTypeSpecificAccess, static_cast<int>( ::QNearFieldTarget::TagTypeSpecificAccess), 24},
    {sipName_TargetOutOfRangeError, static_cast<int>( ::QNearFieldTarget::TargetOutOfRangeError), 26},
    {sipName_UnknownAccess, static_cast<int>( ::QNearFieldTarget::UnknownAccess), 24},
    {sipName_UnknownError, static_cast<int>( ::QNearFieldTarget::UnknownError), 26},
    {sipName_UnsupportedError, static_cast<int>( ::QNearFieldTarget::UnsupportedError), 26},
};

PyDoc_STRVAR(doc_QNearFieldTarget, "\1QNearFieldTarget(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNearFieldTarget[] = {
    {"error(QNearFieldTarget::Error,QNearFieldTarget::RequestId)", "\1error(self, QNearFieldTarget.Error, QNearFieldTarget.RequestId)", 0, 0},
    {"requestCompleted(QNearFieldTarget::RequestId)", "\1requestCompleted(self, QNearFieldTarget.RequestId)", 0, 0},
    {"ndefMessagesWritten()", "\1ndefMessagesWritten(self)", 0, 0},
    {"ndefMessageRead(QNdefMessage)", "\1ndefMessageRead(self, QNdefMessage)", 0, 0},
    {"disconnected()", "\1disconnected(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QNearFieldTarget = {
    & ::QNearFieldTarget::staticMetaObject,
    0,
    signals_QNearFieldTarget,
    0
};


sipClassTypeDef sipTypeDef_QtNfc_QNearFieldTarget = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNearFieldTarget,
        {0},
        &plugin_QNearFieldTarget
    },
    {
        sipNameNr_QNearFieldTarget,
        {0, 0, 1},
        18, methods_QNearFieldTarget,
        20, enummembers_QNearFieldTarget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNearFieldTarget,
    -1,
    -1,
    supers_QNearFieldTarget,
    0,
    init_type_QNearFieldTarget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNearFieldTarget,
    0,
    0,
    0,
    release_QNearFieldTarget,
    cast_QNearFieldTarget,
    0,
    0,
    0,
    0,
    0,
    0
};
