/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSensors.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtSensors/qlidsensor.sip"
#include <qlidsensor.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidReading.cpp"


PyDoc_STRVAR(doc_QLidReading_backLidClosed, "backLidClosed(self) -> bool");

extern "C" {static PyObject *meth_QLidReading_backLidClosed(PyObject *, PyObject *);}
static PyObject *meth_QLidReading_backLidClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLidReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLidReading, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->backLidClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLidReading, sipName_backLidClosed, doc_QLidReading_backLidClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QLidReading_setBackLidClosed, "setBackLidClosed(self, bool)");

extern "C" {static PyObject *meth_QLidReading_setBackLidClosed(PyObject *, PyObject *);}
static PyObject *meth_QLidReading_setBackLidClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLidReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLidReading, &sipCpp, &a0))
        {
            sipCpp->setBackLidClosed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLidReading, sipName_setBackLidClosed, doc_QLidReading_setBackLidClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QLidReading_frontLidClosed, "frontLidClosed(self) -> bool");

extern "C" {static PyObject *meth_QLidReading_frontLidClosed(PyObject *, PyObject *);}
static PyObject *meth_QLidReading_frontLidClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLidReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLidReading, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->frontLidClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLidReading, sipName_frontLidClosed, doc_QLidReading_frontLidClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QLidReading_setFrontLidClosed, "setFrontLidClosed(self, bool)");

extern "C" {static PyObject *meth_QLidReading_setFrontLidClosed(PyObject *, PyObject *);}
static PyObject *meth_QLidReading_setFrontLidClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLidReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLidReading, &sipCpp, &a0))
        {
            sipCpp->setFrontLidClosed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLidReading, sipName_setFrontLidClosed, doc_QLidReading_setFrontLidClosed);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLidReading(void *, const sipTypeDef *);}
static void *cast_QLidReading(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLidReading *sipCpp = reinterpret_cast< ::QLidReading *>(sipCppV);

    if (targetType == sipType_QSensorReading)
        return static_cast< ::QSensorReading *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLidReading(void *, int);}
static void release_QLidReading(void *sipCppV, int)
{
     ::QLidReading *sipCpp = reinterpret_cast< ::QLidReading *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLidReading(sipSimpleWrapper *);}
static void dealloc_QLidReading(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLidReading(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLidReading[] = {{60, 255, 1}};


static PyMethodDef methods_QLidReading[] = {
    {SIP_MLNAME_CAST(sipName_backLidClosed), meth_QLidReading_backLidClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QLidReading_backLidClosed)},
    {SIP_MLNAME_CAST(sipName_frontLidClosed), meth_QLidReading_frontLidClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QLidReading_frontLidClosed)},
    {SIP_MLNAME_CAST(sipName_setBackLidClosed), meth_QLidReading_setBackLidClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QLidReading_setBackLidClosed)},
    {SIP_MLNAME_CAST(sipName_setFrontLidClosed), meth_QLidReading_setFrontLidClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QLidReading_setFrontLidClosed)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLidReading[] = {
    {"frontLidChanged(bool)", "\1frontLidChanged(self, bool)", 0, 0},
    {"backLidChanged(bool)", "\1backLidChanged(self, bool)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QLidReading = {
    & ::QLidReading::staticMetaObject,
    0,
    signals_QLidReading,
    0
};


sipClassTypeDef sipTypeDef_QtSensors_QLidReading = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLidReading,
        {0},
        &plugin_QLidReading
    },
    {
        sipNameNr_QLidReading,
        {0, 0, 1},
        4, methods_QLidReading,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QLidReading,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLidReading,
    0,
    0,
    0,
    release_QLidReading,
    cast_QLidReading,
    0,
    0,
    0,
    0,
    0,
    0
};
