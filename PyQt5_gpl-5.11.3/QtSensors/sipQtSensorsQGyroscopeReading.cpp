/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSensors.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtSensors/qgyroscope.sip"
#include <qgyroscope.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQGyroscopeReading.cpp"


PyDoc_STRVAR(doc_QGyroscopeReading_x, "x(self) -> float");

extern "C" {static PyObject *meth_QGyroscopeReading_x(PyObject *, PyObject *);}
static PyObject *meth_QGyroscopeReading_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGyroscopeReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGyroscopeReading, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGyroscopeReading, sipName_x, doc_QGyroscopeReading_x);

    return NULL;
}


PyDoc_STRVAR(doc_QGyroscopeReading_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QGyroscopeReading_setX(PyObject *, PyObject *);}
static PyObject *meth_QGyroscopeReading_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QGyroscopeReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGyroscopeReading, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGyroscopeReading, sipName_setX, doc_QGyroscopeReading_setX);

    return NULL;
}


PyDoc_STRVAR(doc_QGyroscopeReading_y, "y(self) -> float");

extern "C" {static PyObject *meth_QGyroscopeReading_y(PyObject *, PyObject *);}
static PyObject *meth_QGyroscopeReading_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGyroscopeReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGyroscopeReading, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGyroscopeReading, sipName_y, doc_QGyroscopeReading_y);

    return NULL;
}


PyDoc_STRVAR(doc_QGyroscopeReading_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QGyroscopeReading_setY(PyObject *, PyObject *);}
static PyObject *meth_QGyroscopeReading_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QGyroscopeReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGyroscopeReading, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGyroscopeReading, sipName_setY, doc_QGyroscopeReading_setY);

    return NULL;
}


PyDoc_STRVAR(doc_QGyroscopeReading_z, "z(self) -> float");

extern "C" {static PyObject *meth_QGyroscopeReading_z(PyObject *, PyObject *);}
static PyObject *meth_QGyroscopeReading_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGyroscopeReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGyroscopeReading, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGyroscopeReading, sipName_z, doc_QGyroscopeReading_z);

    return NULL;
}


PyDoc_STRVAR(doc_QGyroscopeReading_setZ, "setZ(self, float)");

extern "C" {static PyObject *meth_QGyroscopeReading_setZ(PyObject *, PyObject *);}
static PyObject *meth_QGyroscopeReading_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QGyroscopeReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGyroscopeReading, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGyroscopeReading, sipName_setZ, doc_QGyroscopeReading_setZ);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGyroscopeReading(void *, const sipTypeDef *);}
static void *cast_QGyroscopeReading(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGyroscopeReading *sipCpp = reinterpret_cast< ::QGyroscopeReading *>(sipCppV);

    if (targetType == sipType_QSensorReading)
        return static_cast< ::QSensorReading *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGyroscopeReading(void *, int);}
static void release_QGyroscopeReading(void *sipCppV, int)
{
     ::QGyroscopeReading *sipCpp = reinterpret_cast< ::QGyroscopeReading *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGyroscopeReading(sipSimpleWrapper *);}
static void dealloc_QGyroscopeReading(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGyroscopeReading(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGyroscopeReading[] = {{60, 255, 1}};


static PyMethodDef methods_QGyroscopeReading[] = {
    {SIP_MLNAME_CAST(sipName_setX), meth_QGyroscopeReading_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QGyroscopeReading_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QGyroscopeReading_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QGyroscopeReading_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QGyroscopeReading_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QGyroscopeReading_setZ)},
    {SIP_MLNAME_CAST(sipName_x), meth_QGyroscopeReading_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QGyroscopeReading_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QGyroscopeReading_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QGyroscopeReading_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QGyroscopeReading_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QGyroscopeReading_z)}
};


static pyqt5ClassPluginDef plugin_QGyroscopeReading = {
    & ::QGyroscopeReading::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtSensors_QGyroscopeReading = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGyroscopeReading,
        {0},
        &plugin_QGyroscopeReading
    },
    {
        sipNameNr_QGyroscopeReading,
        {0, 0, 1},
        6, methods_QGyroscopeReading,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGyroscopeReading,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGyroscopeReading,
    0,
    0,
    0,
    release_QGyroscopeReading,
    cast_QGyroscopeReading,
    0,
    0,
    0,
    0,
    0,
    0
};
