/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSensors.h"

#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtSensors/qlidsensor.sip"
#include <qlidsensor.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidFilter.cpp"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtSensors/qlidsensor.sip"
#include <qlidsensor.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtSensors/sipQtSensorsQLidFilter.cpp"


class sipQLidFilter : public  ::QLidFilter
{
public:
    sipQLidFilter();
    sipQLidFilter(const  ::QLidFilter&);
    virtual ~sipQLidFilter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool filter( ::QLidReading*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLidFilter(const sipQLidFilter &);
    sipQLidFilter &operator = (const sipQLidFilter &);

    char sipPyMethods[1];
};

sipQLidFilter::sipQLidFilter():  ::QLidFilter(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLidFilter::sipQLidFilter(const  ::QLidFilter& a0):  ::QLidFilter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLidFilter::~sipQLidFilter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQLidFilter::filter( ::QLidReading*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QLidFilter,sipName_filter);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSensors_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QLidReading*);

    return sipVH_QtSensors_17(sipGILState, sipImportedVirtErrorHandlers_QtSensors_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLidFilter_filter, "filter(self, QLidReading) -> bool");

extern "C" {static PyObject *meth_QLidFilter_filter(PyObject *, PyObject *);}
static PyObject *meth_QLidFilter_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QLidReading* a0;
         ::QLidFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLidFilter, &sipCpp, sipType_QLidReading, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLidFilter, sipName_filter);
                return NULL;
            }

            sipRes = sipCpp->filter(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLidFilter, sipName_filter, doc_QLidFilter_filter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLidFilter(void *, const sipTypeDef *);}
static void *cast_QLidFilter(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLidFilter *sipCpp = reinterpret_cast< ::QLidFilter *>(sipCppV);

    if (targetType == sipType_QSensorFilter)
        return static_cast< ::QSensorFilter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLidFilter(void *, int);}
static void release_QLidFilter(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQLidFilter *>(sipCppV);
    else
        delete reinterpret_cast< ::QLidFilter *>(sipCppV);
}


extern "C" {static void dealloc_QLidFilter(sipSimpleWrapper *);}
static void dealloc_QLidFilter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLidFilter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLidFilter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLidFilter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLidFilter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQLidFilter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQLidFilter();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QLidFilter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLidFilter, &a0))
        {
            sipCpp = new sipQLidFilter(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLidFilter[] = {{59, 255, 1}};


static PyMethodDef methods_QLidFilter[] = {
    {SIP_MLNAME_CAST(sipName_filter), meth_QLidFilter_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QLidFilter_filter)}
};

PyDoc_STRVAR(doc_QLidFilter, "\1QLidFilter()\n"
"QLidFilter(QLidFilter)");


static pyqt5ClassPluginDef plugin_QLidFilter = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtSensors_QLidFilter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLidFilter,
        {0},
        &plugin_QLidFilter
    },
    {
        sipNameNr_QLidFilter,
        {0, 0, 1},
        1, methods_QLidFilter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLidFilter,
    -1,
    -1,
    supers_QLidFilter,
    0,
    init_type_QLidFilter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLidFilter,
    0,
    0,
    0,
    release_QLidFilter,
    cast_QLidFilter,
    0,
    0,
    0,
    0,
    0,
    0
};
