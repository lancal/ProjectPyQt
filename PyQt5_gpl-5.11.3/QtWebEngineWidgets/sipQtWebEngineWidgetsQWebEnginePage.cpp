/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
#include <qwebenginepage.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebengineprofile.sip"
#include <qwebengineprofile.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 38 "sip/QtWebEngineCore/qwebengineregisterprotocolhandlerrequest.sip"
#include <qwebengineregisterprotocolhandlerrequest.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 38 "sip/QtWebEngineCore/qwebenginequotarequest.sip"
#include <qwebenginequotarequest.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "sip/QtPrintSupport/qprinter.sip"
#include <qprinter.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginedownloaditem.sip"
#include <qwebenginedownloaditem.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginecontextmenudata.sip"
#include <qwebenginecontextmenudata.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginefullscreenrequest.sip"
#include <qwebenginefullscreenrequest.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "sip/QtWebChannel/qwebchannel.sip"
#include <qwebchannel.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginescriptcollection.sip"
#include <qwebenginescriptcollection.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginecertificateerror.sip"
#include <qwebenginecertificateerror.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginesettings.sip"
#include <qwebenginesettings.h>
#line 96 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 99 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "sip/QtWebEngineCore/qwebenginehttprequest.sip"
#include <qwebenginehttprequest.h>
#line 102 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 105 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
#include <qwebenginepage.h>
#line 108 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 111 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 114 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 117 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginehistory.sip"
#include <qwebenginehistory.h>
#line 120 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 123 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 126 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 129 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 132 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 135 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 138 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 141 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 144 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 147 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 150 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 153 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 156 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"


class sipQWebEnginePage : public  ::QWebEnginePage
{
public:
    sipQWebEnginePage( ::QObject*);
    sipQWebEnginePage( ::QWebEngineProfile*, ::QObject*);
    virtual ~sipQWebEnginePage();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool acceptNavigationRequest(const  ::QUrl&, ::QWebEnginePage::NavigationType,bool);
    bool certificateError(const  ::QWebEngineCertificateError&);
    void javaScriptConsoleMessage( ::QWebEnginePage::JavaScriptConsoleMessageLevel,const  ::QString&,int,const  ::QString&);
    bool javaScriptPrompt(const  ::QUrl&,const  ::QString&,const  ::QString&, ::QString*);
    bool javaScriptConfirm(const  ::QUrl&,const  ::QString&);
    void javaScriptAlert(const  ::QUrl&,const  ::QString&);
     ::QStringList chooseFiles( ::QWebEnginePage::FileSelectionMode,const  ::QStringList&,const  ::QStringList&);
     ::QWebEnginePage* createWindow( ::QWebEnginePage::WebWindowType);
    void triggerAction( ::QWebEnginePage::WebAction,bool);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebEnginePage(const sipQWebEnginePage &);
    sipQWebEnginePage &operator = (const sipQWebEnginePage &);

    char sipPyMethods[16];
};

sipQWebEnginePage::sipQWebEnginePage( ::QObject*a0):  ::QWebEnginePage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEnginePage::sipQWebEnginePage( ::QWebEngineProfile*a0, ::QObject*a1):  ::QWebEnginePage(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEnginePage::~sipQWebEnginePage()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQWebEnginePage::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngineWidgets_qt_metaobject(sipPySelf,sipType_QWebEnginePage);

    return  ::QWebEnginePage::metaObject();
}

int sipQWebEnginePage::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWebEnginePage::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngineWidgets_qt_metacall(sipPySelf,sipType_QWebEnginePage,_c,_id,_a);

    return _id;
}

void *sipQWebEnginePage::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngineWidgets_qt_metacast(sipPySelf, sipType_QWebEnginePage, _clname, &sipCpp) ? sipCpp :  ::QWebEnginePage::qt_metacast(_clname));
}

bool sipQWebEnginePage::acceptNavigationRequest(const  ::QUrl& a0, ::QWebEnginePage::NavigationType a1,bool a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_acceptNavigationRequest);

    if (!sipMeth)
        return  ::QWebEnginePage::acceptNavigationRequest(a0,a1,a2);

    extern bool sipVH_QtWebEngineWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&, ::QWebEnginePage::NavigationType,bool);

    return sipVH_QtWebEngineWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQWebEnginePage::certificateError(const  ::QWebEngineCertificateError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_certificateError);

    if (!sipMeth)
        return  ::QWebEnginePage::certificateError(a0);

    extern bool sipVH_QtWebEngineWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QWebEngineCertificateError&);

    return sipVH_QtWebEngineWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::javaScriptConsoleMessage( ::QWebEnginePage::JavaScriptConsoleMessageLevel a0,const  ::QString& a1,int a2,const  ::QString& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_javaScriptConsoleMessage);

    if (!sipMeth)
    {
         ::QWebEnginePage::javaScriptConsoleMessage(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebEnginePage::JavaScriptConsoleMessageLevel,const  ::QString&,int,const  ::QString&);

    sipVH_QtWebEngineWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQWebEnginePage::javaScriptPrompt(const  ::QUrl& a0,const  ::QString& a1,const  ::QString& a2, ::QString*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_javaScriptPrompt);

    if (!sipMeth)
        return  ::QWebEnginePage::javaScriptPrompt(a0,a1,a2,a3);

    extern bool sipVH_QtWebEngineWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QString&,const  ::QString&, ::QString*);

    return sipVH_QtWebEngineWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQWebEnginePage::javaScriptConfirm(const  ::QUrl& a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_javaScriptConfirm);

    if (!sipMeth)
        return  ::QWebEnginePage::javaScriptConfirm(a0,a1);

    extern bool sipVH_QtWebEngineWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QString&);

    return sipVH_QtWebEngineWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQWebEnginePage::javaScriptAlert(const  ::QUrl& a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_javaScriptAlert);

    if (!sipMeth)
    {
         ::QWebEnginePage::javaScriptAlert(a0,a1);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QString&);

    sipVH_QtWebEngineWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQWebEnginePage::chooseFiles( ::QWebEnginePage::FileSelectionMode a0,const  ::QStringList& a1,const  ::QStringList& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_chooseFiles);

    if (!sipMeth)
        return  ::QWebEnginePage::chooseFiles(a0,a1,a2);

    extern  ::QStringList sipVH_QtWebEngineWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebEnginePage::FileSelectionMode,const  ::QStringList&,const  ::QStringList&);

    return sipVH_QtWebEngineWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QWebEnginePage* sipQWebEnginePage::createWindow( ::QWebEnginePage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return  ::QWebEnginePage::createWindow(a0);

    extern  ::QWebEnginePage* sipVH_QtWebEngineWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebEnginePage::WebWindowType);

    return sipVH_QtWebEngineWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::triggerAction( ::QWebEnginePage::WebAction a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_triggerAction);

    if (!sipMeth)
    {
         ::QWebEnginePage::triggerAction(a0,a1);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebEnginePage::WebAction,bool);

    sipVH_QtWebEngineWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQWebEnginePage::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QWebEnginePage::event(a0);

    extern bool sipVH_QtWebEngineWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebEngineWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQWebEnginePage::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QWebEnginePage::eventFilter(a0,a1);

    extern bool sipVH_QtWebEngineWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebEngineWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQWebEnginePage::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QWebEnginePage::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebEngineWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QWebEnginePage::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebEngineWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QWebEnginePage::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebEngineWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QWebEnginePage::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWebEngineWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QWebEnginePage::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWebEngineWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWebEngineWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebEnginePage_history, "history(self) -> QWebEngineHistory");

extern "C" {static PyObject *meth_QWebEnginePage_history(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEngineHistory*sipRes;

            sipRes = sipCpp->history();

            return sipConvertFromType(sipRes,sipType_QWebEngineHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_history, doc_QWebEnginePage_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setView, "setView(self, QWidget)");

extern "C" {static PyObject *meth_QWebEnginePage_setView(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setView(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setView, doc_QWebEnginePage_setView);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_view, "view(self) -> QWidget");

extern "C" {static PyObject *meth_QWebEnginePage_view(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_view(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->view();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_view, doc_QWebEnginePage_view);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_hasSelection, doc_QWebEnginePage_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QWebEnginePage_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_selectedText, doc_QWebEnginePage_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_action, "action(self, QWebEnginePage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebEnginePage_action(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEnginePage::WebAction a0;
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_WebAction, &a0))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->action(a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_action, doc_QWebEnginePage_action);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_triggerAction, "triggerAction(self, QWebEnginePage.WebAction, checked: bool = False)");

extern "C" {static PyObject *meth_QWebEnginePage_triggerAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_triggerAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebEnginePage::WebAction a0;
        bool a1 = 0;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_WebAction, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::triggerAction(a0,a1) : sipCpp->triggerAction(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_triggerAction, doc_QWebEnginePage_triggerAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_event(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_event, doc_QWebEnginePage_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_findText, "findText(self, str, options: Union[QWebEnginePage.FindFlags, QWebEnginePage.FindFlag] = QWebEnginePage.FindFlags(), resultCallback: Callable[[], None] = 0)");

extern "C" {static PyObject *meth_QWebEnginePage_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebEnginePage::FindFlags a1def = QWebEnginePage::FindFlags();
         ::QWebEnginePage::FindFlags* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
            sipName_resultCallback,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1H", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebEnginePage_FindFlags, &a1, &a1State, &a2))
        {
#line 218 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure any callable doesn't get garbage collected.
        Py_XINCREF(a2);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->findText(*a0, *a1, [a2](bool arg) {
            if (a2)
            {
                SIP_BLOCK_THREADS
                
                PyObject *res;
        
                res = PyObject_CallFunctionObjArgs(a2, (arg ? Py_True : Py_False), NULL);
        
                Py_DECREF(a2);
        
                if (!res)
                    pyqt5_qtwebenginewidgets_err_print();
                else
                    Py_DECREF(res);
        
                SIP_UNBLOCK_THREADS
            }
        });
        
        Py_END_ALLOW_THREADS
#line 793 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebEnginePage_FindFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_findText, doc_QWebEnginePage_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QWebEnginePage_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_createStandardContextMenu, doc_QWebEnginePage_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setFeaturePermission, "setFeaturePermission(self, QUrl, QWebEnginePage.Feature, QWebEnginePage.PermissionPolicy)");

extern "C" {static PyObject *meth_QWebEnginePage_setFeaturePermission(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setFeaturePermission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebEnginePage::Feature a1;
         ::QWebEnginePage::PermissionPolicy a2;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EE", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QWebEnginePage_Feature, &a1, sipType_QWebEnginePage_PermissionPolicy, &a2))
        {
            sipCpp->setFeaturePermission(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setFeaturePermission, doc_QWebEnginePage_setFeaturePermission);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_load, "load(self, QUrl)\n"
"load(self, QWebEngineHttpRequest)");

extern "C" {static PyObject *meth_QWebEnginePage_load(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->load(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QWebEngineHttpRequest* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEngineHttpRequest, &a0))
        {
            sipCpp->load(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_load, doc_QWebEnginePage_load);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setHtml, "setHtml(self, str, baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebEnginePage_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl& a1def = QUrl();
        const  ::QUrl* a1 = &a1def;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            sipCpp->setHtml(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setHtml, doc_QWebEnginePage_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setContent, "setContent(self, Union[QByteArray, bytes, bytearray], mimeType: str = '', baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebEnginePage_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            sipCpp->setContent(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setContent, doc_QWebEnginePage_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_toHtml, "toHtml(self, Callable[[], None])");

extern "C" {static PyObject *meth_QWebEnginePage_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BF", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
#line 256 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure the callable doesn't get garbage collected.
        Py_INCREF(a0);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->toHtml([a0](const QString &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a0, "N", new QString(arg), sipType_QString, NULL);
        
            Py_DECREF(a0);
            
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
            
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1027 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_toHtml, doc_QWebEnginePage_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_toPlainText, "toPlainText(self, Callable[[], None])");

extern "C" {static PyObject *meth_QWebEnginePage_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BF", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
#line 283 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure the callable doesn't get garbage collected.
        Py_INCREF(a0);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->toPlainText([a0](const QString &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a0, "N", new QString(arg), sipType_QString, NULL);
        
            Py_DECREF(a0);
            
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
            
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1079 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_toPlainText, doc_QWebEnginePage_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWebEnginePage_title(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_title, doc_QWebEnginePage_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QWebEnginePage_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setUrl, doc_QWebEnginePage_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEnginePage_url(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_url, doc_QWebEnginePage_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_requestedUrl, "requestedUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEnginePage_requestedUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_requestedUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->requestedUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_requestedUrl, doc_QWebEnginePage_requestedUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_iconUrl, "iconUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEnginePage_iconUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_iconUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->iconUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_iconUrl, doc_QWebEnginePage_iconUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_zoomFactor, "zoomFactor(self) -> float");

extern "C" {static PyObject *meth_QWebEnginePage_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->zoomFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_zoomFactor, doc_QWebEnginePage_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setZoomFactor, "setZoomFactor(self, float)");

extern "C" {static PyObject *meth_QWebEnginePage_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
            sipCpp->setZoomFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setZoomFactor, doc_QWebEnginePage_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_runJavaScript, "runJavaScript(self, str, int)\n"
"runJavaScript(self, str, int, Callable[..., None])\n"
"runJavaScript(self, str)\n"
"runJavaScript(self, str, Callable[[], None])");

extern "C" {static PyObject *meth_QWebEnginePage_runJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_runJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint32 a1;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1u", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->runJavaScript(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint32 a1;
        PyObject * a2;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1uF", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
#line 321 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure the callable doesn't get garbage collected.
        Py_INCREF(a2);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->runJavaScript(*a0, a1, [a2](const QVariant &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a2, "N", new QVariant(arg), sipType_QVariant, NULL);
        
            Py_DECREF(a2);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
        
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1352 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->runJavaScript(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        PyObject * a1;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1F", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
#line 350 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure the callable doesn't get garbage collected.
        Py_INCREF(a1);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->runJavaScript(*a0, [a1](const QVariant &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a1, "N", new QVariant(arg), sipType_QVariant, NULL);
        
            Py_DECREF(a1);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
        
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1407 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_runJavaScript, doc_QWebEnginePage_runJavaScript);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_settings, "settings(self) -> QWebEngineSettings");

extern "C" {static PyObject *meth_QWebEnginePage_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEngineSettings*sipRes;

            sipRes = sipCpp->settings();

            return sipConvertFromType(sipRes,sipType_QWebEngineSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_settings, doc_QWebEnginePage_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_createWindow, "createWindow(self, QWebEnginePage.WebWindowType) -> QWebEnginePage");

extern "C" {static PyObject *meth_QWebEnginePage_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebEnginePage::WebWindowType a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_WebWindowType, &a0))
        {
             ::QWebEnginePage*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::createWindow(a0) : sipCpp->createWindow(a0));

            return sipConvertFromType(sipRes,sipType_QWebEnginePage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_createWindow, doc_QWebEnginePage_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_chooseFiles, "chooseFiles(self, QWebEnginePage.FileSelectionMode, Iterable[str], Iterable[str]) -> List[str]");

extern "C" {static PyObject *meth_QWebEnginePage_chooseFiles(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_chooseFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebEnginePage::FileSelectionMode a0;
        const  ::QStringList* a1;
        int a1State = 0;
        const  ::QStringList* a2;
        int a2State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_FileSelectionMode, &a0, sipType_QStringList,&a1, &a1State, sipType_QStringList,&a2, &a2State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QWebEnginePage::chooseFiles(a0,*a1,*a2) : sipCpp->chooseFiles(a0,*a1,*a2)));
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast< ::QStringList *>(a2),sipType_QStringList,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_chooseFiles, doc_QWebEnginePage_chooseFiles);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptAlert, "javaScriptAlert(self, QUrl, str)");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptAlert(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptAlert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::javaScriptAlert(*a0,*a1) : sipCpp->javaScriptAlert(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptAlert, doc_QWebEnginePage_javaScriptAlert);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptConfirm, "javaScriptConfirm(self, QUrl, str) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptConfirm(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptConfirm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::javaScriptConfirm(*a0,*a1) : sipCpp->javaScriptConfirm(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptConfirm, doc_QWebEnginePage_javaScriptConfirm);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptPrompt, "javaScriptPrompt(self, QUrl, str, str) -> Tuple[bool, str]");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptPrompt(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptPrompt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QString* a3;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;
            a3 = new  ::QString();

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::javaScriptPrompt(*a0,*a1,*a2,a3) : sipCpp->javaScriptPrompt(*a0,*a1,*a2,a3));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bN)",sipRes,a3,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptPrompt, doc_QWebEnginePage_javaScriptPrompt);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptConsoleMessage, "javaScriptConsoleMessage(self, QWebEnginePage.JavaScriptConsoleMessageLevel, str, int, str)");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptConsoleMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptConsoleMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebEnginePage::JavaScriptConsoleMessageLevel a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2;
        const  ::QString* a3;
        int a3State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1iJ1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_JavaScriptConsoleMessageLevel, &a0, sipType_QString,&a1, &a1State, &a2, sipType_QString,&a3, &a3State))
        {
            (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::javaScriptConsoleMessage(a0,*a1,a2,*a3) : sipCpp->javaScriptConsoleMessage(a0,*a1,a2,*a3));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptConsoleMessage, doc_QWebEnginePage_javaScriptConsoleMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_certificateError, "certificateError(self, QWebEngineCertificateError) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_certificateError(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_certificateError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWebEngineCertificateError* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEngineCertificateError, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::certificateError(*a0) : sipCpp->certificateError(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_certificateError, doc_QWebEnginePage_certificateError);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_profile, "profile(self) -> QWebEngineProfile");

extern "C" {static PyObject *meth_QWebEnginePage_profile(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEngineProfile*sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromType(sipRes,sipType_QWebEngineProfile,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_profile, doc_QWebEnginePage_profile);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_scripts, "scripts(self) -> QWebEngineScriptCollection");

extern "C" {static PyObject *meth_QWebEnginePage_scripts(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_scripts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEngineScriptCollection*sipRes;

            sipRes = &sipCpp->scripts();

            return sipConvertFromType(sipRes,sipType_QWebEngineScriptCollection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_scripts, doc_QWebEnginePage_scripts);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_webChannel, "webChannel(self) -> QWebChannel");

extern "C" {static PyObject *meth_QWebEnginePage_webChannel(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_webChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebChannel*sipRes;

            sipRes = sipCpp->webChannel();

            return sipConvertFromType(sipRes,sipType_QWebChannel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_webChannel, doc_QWebEnginePage_webChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setWebChannel, "setWebChannel(self, QWebChannel)\n"
"setWebChannel(self, QWebChannel, int)");

extern "C" {static PyObject *meth_QWebEnginePage_setWebChannel(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setWebChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebChannel* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebChannel, &a0))
        {
            sipCpp->setWebChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QWebChannel* a0;
         ::uint a1;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8u", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebChannel, &a0, &a1))
        {
            sipCpp->setWebChannel(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setWebChannel, doc_QWebEnginePage_setWebChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_acceptNavigationRequest, "acceptNavigationRequest(self, QUrl, QWebEnginePage.NavigationType, bool) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_acceptNavigationRequest(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_acceptNavigationRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QWebEnginePage::NavigationType a1;
        bool a2;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9Eb", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QWebEnginePage_NavigationType, &a1, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebEnginePage::acceptNavigationRequest(*a0,a1,a2) : sipCpp->acceptNavigationRequest(*a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_acceptNavigationRequest, doc_QWebEnginePage_acceptNavigationRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_backgroundColor, "backgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QWebEnginePage_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->backgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_backgroundColor, doc_QWebEnginePage_backgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setBackgroundColor, "setBackgroundColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QWebEnginePage_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBackgroundColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setBackgroundColor, doc_QWebEnginePage_setBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QWebEnginePage_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_icon, doc_QWebEnginePage_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_scrollPosition, "scrollPosition(self) -> QPointF");

extern "C" {static PyObject *meth_QWebEnginePage_scrollPosition(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_scrollPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->scrollPosition());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_scrollPosition, doc_QWebEnginePage_scrollPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_contentsSize, "contentsSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QWebEnginePage_contentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_contentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->contentsSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_contentsSize, doc_QWebEnginePage_contentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_isAudioMuted, "isAudioMuted(self) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_isAudioMuted(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_isAudioMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAudioMuted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_isAudioMuted, doc_QWebEnginePage_isAudioMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setAudioMuted, "setAudioMuted(self, bool)");

extern "C" {static PyObject *meth_QWebEnginePage_setAudioMuted(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setAudioMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
            sipCpp->setAudioMuted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setAudioMuted, doc_QWebEnginePage_setAudioMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_recentlyAudible, "recentlyAudible(self) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_recentlyAudible(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_recentlyAudible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->recentlyAudible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_recentlyAudible, doc_QWebEnginePage_recentlyAudible);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_printToPdf, "printToPdf(self, str, pageLayout: QPageLayout = QPageLayout(QPageSize(QPageSize.PageSizeId.A4),QPageLayout.Orientation.Portrait,QMarginsF()))\n"
"printToPdf(self, Callable[[], None], pageLayout: QPageLayout = QPageLayout(QPageSize(QPageSize.PageSizeId.A4),QPageLayout.Orientation.Portrait,QMarginsF()))");

extern "C" {static PyObject *meth_QWebEnginePage_printToPdf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_printToPdf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QPageLayout& a1def = QPageLayout(QPageSize(QPageSize::PageSizeId::A4),QPageLayout::Orientation::Portrait,QMarginsF());
        const  ::QPageLayout* a1 = &a1def;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pageLayout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QPageLayout, &a1))
        {
            sipCpp->printToPdf(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
        const  ::QPageLayout& a1def = QPageLayout(QPageSize(QPageSize::PageSizeId::A4),QPageLayout::Orientation::Portrait,QMarginsF());
        const  ::QPageLayout* a1 = &a1def;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pageLayout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BF|J9", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0, sipType_QPageLayout, &a1))
        {
#line 489 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure the callable doesn't get garbage collected.
        Py_INCREF(a0);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->printToPdf([a0](const QByteArray &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a0, "N", new QByteArray(arg), sipType_QByteArray, NULL);
        
            Py_DECREF(a0);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
        
            SIP_UNBLOCK_THREADS
        }, *a1);
        
        Py_END_ALLOW_THREADS
#line 2140 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_printToPdf, doc_QWebEnginePage_printToPdf);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_contextMenuData, "contextMenuData(self) -> QWebEngineContextMenuData");

extern "C" {static PyObject *meth_QWebEnginePage_contextMenuData(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_contextMenuData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEngineContextMenuData*sipRes;

            sipRes = new  ::QWebEngineContextMenuData(sipCpp->contextMenuData());

            return sipConvertFromNewType(sipRes,sipType_QWebEngineContextMenuData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_contextMenuData, doc_QWebEnginePage_contextMenuData);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_replaceMisspelledWord, "replaceMisspelledWord(self, str)");

extern "C" {static PyObject *meth_QWebEnginePage_replaceMisspelledWord(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_replaceMisspelledWord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->replaceMisspelledWord(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_replaceMisspelledWord, doc_QWebEnginePage_replaceMisspelledWord);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_save, "save(self, str, format: QWebEngineDownloadItem.SavePageFormat = QWebEngineDownloadItem.MimeHtmlSaveFormat)");

extern "C" {static PyObject *meth_QWebEnginePage_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebEngineDownloadItem::SavePageFormat a1 = QWebEngineDownloadItem::MimeHtmlSaveFormat;
        const  ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebEngineDownloadItem_SavePageFormat, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_save, doc_QWebEnginePage_save);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_print, "print(self, QPrinter, Callable[[], None])");

extern "C" {static PyObject *meth_QWebEnginePage_print(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_print(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPrinter* a0;
        PyObject * a1;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8F", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QPrinter, &a0, &a1))
        {
#line 551 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineWidgets/qwebenginepage.sip"
        // Make sure the callable doesn't get garbage collected.
        Py_INCREF(a1);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->print(a0, [a1](bool arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a1, "b", arg);
        
            Py_DECREF(a1);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
        
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 2289 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_print, doc_QWebEnginePage_print);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_download, "download(self, QUrl, filename: str = '')");

extern "C" {static PyObject *meth_QWebEnginePage_download(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_download(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_filename,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->download(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_download, doc_QWebEnginePage_download);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setInspectedPage, "setInspectedPage(self, QWebEnginePage)");

extern "C" {static PyObject *meth_QWebEnginePage_setInspectedPage(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setInspectedPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEnginePage* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage, &a0))
        {
            sipCpp->setInspectedPage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setInspectedPage, doc_QWebEnginePage_setInspectedPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_inspectedPage, "inspectedPage(self) -> QWebEnginePage");

extern "C" {static PyObject *meth_QWebEnginePage_inspectedPage(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_inspectedPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEnginePage*sipRes;

            sipRes = sipCpp->inspectedPage();

            return sipConvertFromType(sipRes,sipType_QWebEnginePage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_inspectedPage, doc_QWebEnginePage_inspectedPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setDevToolsPage, "setDevToolsPage(self, QWebEnginePage)");

extern "C" {static PyObject *meth_QWebEnginePage_setDevToolsPage(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setDevToolsPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEnginePage* a0;
         ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage, &a0))
        {
            sipCpp->setDevToolsPage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setDevToolsPage, doc_QWebEnginePage_setDevToolsPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_devToolsPage, "devToolsPage(self) -> QWebEnginePage");

extern "C" {static PyObject *meth_QWebEnginePage_devToolsPage(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_devToolsPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
             ::QWebEnginePage*sipRes;

            sipRes = sipCpp->devToolsPage();

            return sipConvertFromType(sipRes,sipType_QWebEnginePage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_devToolsPage, doc_QWebEnginePage_devToolsPage);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWebEnginePage(void *, const sipTypeDef *);}
static void *cast_QWebEnginePage(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWebEnginePage *sipCpp = reinterpret_cast< ::QWebEnginePage *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEnginePage(void *, int);}
static void release_QWebEnginePage(void *sipCppV, int)
{
     ::QWebEnginePage *sipCpp = reinterpret_cast< ::QWebEnginePage *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEnginePage(sipSimpleWrapper *);}
static void dealloc_QWebEnginePage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWebEnginePage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebEnginePage(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWebEnginePage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEnginePage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebEnginePage *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWebEnginePage(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWebEngineProfile* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QWebEngineProfile, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQWebEnginePage(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEnginePage[] = {{7, 0, 1}};


static PyMethodDef methods_QWebEnginePage[] = {
    {SIP_MLNAME_CAST(sipName_acceptNavigationRequest), meth_QWebEnginePage_acceptNavigationRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_acceptNavigationRequest)},
    {SIP_MLNAME_CAST(sipName_action), meth_QWebEnginePage_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_action)},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QWebEnginePage_backgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_backgroundColor)},
    {SIP_MLNAME_CAST(sipName_certificateError), meth_QWebEnginePage_certificateError, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_certificateError)},
    {SIP_MLNAME_CAST(sipName_chooseFiles), meth_QWebEnginePage_chooseFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_chooseFiles)},
    {SIP_MLNAME_CAST(sipName_contentsSize), meth_QWebEnginePage_contentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_contentsSize)},
    {SIP_MLNAME_CAST(sipName_contextMenuData), meth_QWebEnginePage_contextMenuData, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_contextMenuData)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QWebEnginePage_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebEnginePage_createWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_createWindow)},
    {SIP_MLNAME_CAST(sipName_devToolsPage), meth_QWebEnginePage_devToolsPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_devToolsPage)},
    {SIP_MLNAME_CAST(sipName_download), (PyCFunction)meth_QWebEnginePage_download, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_download)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebEnginePage_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebEnginePage_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_findText)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebEnginePage_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_hasSelection)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebEnginePage_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_history)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebEnginePage_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_icon)},
    {SIP_MLNAME_CAST(sipName_iconUrl), meth_QWebEnginePage_iconUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_iconUrl)},
    {SIP_MLNAME_CAST(sipName_inspectedPage), meth_QWebEnginePage_inspectedPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_inspectedPage)},
    {SIP_MLNAME_CAST(sipName_isAudioMuted), meth_QWebEnginePage_isAudioMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_isAudioMuted)},
    {SIP_MLNAME_CAST(sipName_javaScriptAlert), meth_QWebEnginePage_javaScriptAlert, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptAlert)},
    {SIP_MLNAME_CAST(sipName_javaScriptConfirm), meth_QWebEnginePage_javaScriptConfirm, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptConfirm)},
    {SIP_MLNAME_CAST(sipName_javaScriptConsoleMessage), meth_QWebEnginePage_javaScriptConsoleMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptConsoleMessage)},
    {SIP_MLNAME_CAST(sipName_javaScriptPrompt), meth_QWebEnginePage_javaScriptPrompt, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptPrompt)},
    {SIP_MLNAME_CAST(sipName_load), meth_QWebEnginePage_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_load)},
    {SIP_MLNAME_CAST(sipName_print), meth_QWebEnginePage_print, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_print)},
    {SIP_MLNAME_CAST(sipName_printToPdf), (PyCFunction)meth_QWebEnginePage_printToPdf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_printToPdf)},
    {SIP_MLNAME_CAST(sipName_profile), meth_QWebEnginePage_profile, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_profile)},
    {SIP_MLNAME_CAST(sipName_recentlyAudible), meth_QWebEnginePage_recentlyAudible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_recentlyAudible)},
    {SIP_MLNAME_CAST(sipName_replaceMisspelledWord), meth_QWebEnginePage_replaceMisspelledWord, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_replaceMisspelledWord)},
    {SIP_MLNAME_CAST(sipName_requestedUrl), meth_QWebEnginePage_requestedUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_requestedUrl)},
    {SIP_MLNAME_CAST(sipName_runJavaScript), meth_QWebEnginePage_runJavaScript, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_runJavaScript)},
    {SIP_MLNAME_CAST(sipName_save), (PyCFunction)meth_QWebEnginePage_save, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_save)},
    {SIP_MLNAME_CAST(sipName_scripts), meth_QWebEnginePage_scripts, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_scripts)},
    {SIP_MLNAME_CAST(sipName_scrollPosition), meth_QWebEnginePage_scrollPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_scrollPosition)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebEnginePage_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_selectedText)},
    {SIP_MLNAME_CAST(sipName_setAudioMuted), meth_QWebEnginePage_setAudioMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setAudioMuted)},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QWebEnginePage_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebEnginePage_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_setContent)},
    {SIP_MLNAME_CAST(sipName_setDevToolsPage), meth_QWebEnginePage_setDevToolsPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setDevToolsPage)},
    {SIP_MLNAME_CAST(sipName_setFeaturePermission), meth_QWebEnginePage_setFeaturePermission, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setFeaturePermission)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebEnginePage_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_setHtml)},
    {SIP_MLNAME_CAST(sipName_setInspectedPage), meth_QWebEnginePage_setInspectedPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setInspectedPage)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebEnginePage_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setUrl)},
    {SIP_MLNAME_CAST(sipName_setView), meth_QWebEnginePage_setView, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setView)},
    {SIP_MLNAME_CAST(sipName_setWebChannel), meth_QWebEnginePage_setWebChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setWebChannel)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebEnginePage_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebEnginePage_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_settings)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebEnginePage_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_title)},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QWebEnginePage_toHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QWebEnginePage_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_toPlainText)},
    {SIP_MLNAME_CAST(sipName_triggerAction), (PyCFunction)meth_QWebEnginePage_triggerAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_triggerAction)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebEnginePage_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_url)},
    {SIP_MLNAME_CAST(sipName_view), meth_QWebEnginePage_view, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_view)},
    {SIP_MLNAME_CAST(sipName_webChannel), meth_QWebEnginePage_webChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_webChannel)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebEnginePage_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_zoomFactor)}
};

static sipEnumMemberDef enummembers_QWebEnginePage[] = {
    {sipName_AbnormalTerminationStatus, static_cast<int>( ::QWebEnginePage::AbnormalTerminationStatus), 26},
    {sipName_AlignCenter, static_cast<int>( ::QWebEnginePage::AlignCenter), 27},
    {sipName_AlignJustified, static_cast<int>( ::QWebEnginePage::AlignJustified), 27},
    {sipName_AlignLeft, static_cast<int>( ::QWebEnginePage::AlignLeft), 27},
    {sipName_AlignRight, static_cast<int>( ::QWebEnginePage::AlignRight), 27},
    {sipName_Back, static_cast<int>( ::QWebEnginePage::Back), 27},
    {sipName_Copy, static_cast<int>( ::QWebEnginePage::Copy), 27},
    {sipName_CopyImageToClipboard, static_cast<int>( ::QWebEnginePage::CopyImageToClipboard), 27},
    {sipName_CopyImageUrlToClipboard, static_cast<int>( ::QWebEnginePage::CopyImageUrlToClipboard), 27},
    {sipName_CopyLinkToClipboard, static_cast<int>( ::QWebEnginePage::CopyLinkToClipboard), 27},
    {sipName_CopyMediaUrlToClipboard, static_cast<int>( ::QWebEnginePage::CopyMediaUrlToClipboard), 27},
    {sipName_CrashedTerminationStatus, static_cast<int>( ::QWebEnginePage::CrashedTerminationStatus), 26},
    {sipName_Cut, static_cast<int>( ::QWebEnginePage::Cut), 27},
    {sipName_DesktopAudioVideoCapture, static_cast<int>( ::QWebEnginePage::DesktopAudioVideoCapture), 19},
    {sipName_DesktopVideoCapture, static_cast<int>( ::QWebEnginePage::DesktopVideoCapture), 19},
    {sipName_DownloadImageToDisk, static_cast<int>( ::QWebEnginePage::DownloadImageToDisk), 27},
    {sipName_DownloadLinkToDisk, static_cast<int>( ::QWebEnginePage::DownloadLinkToDisk), 27},
    {sipName_DownloadMediaToDisk, static_cast<int>( ::QWebEnginePage::DownloadMediaToDisk), 27},
    {sipName_ErrorMessageLevel, static_cast<int>( ::QWebEnginePage::ErrorMessageLevel), 23},
    {sipName_ExitFullScreen, static_cast<int>( ::QWebEnginePage::ExitFullScreen), 27},
    {sipName_FileSelectOpen, static_cast<int>( ::QWebEnginePage::FileSelectOpen), 20},
    {sipName_FileSelectOpenMultiple, static_cast<int>( ::QWebEnginePage::FileSelectOpenMultiple), 20},
    {sipName_FindBackward, static_cast<int>( ::QWebEnginePage::FindBackward), 21},
    {sipName_FindCaseSensitively, static_cast<int>( ::QWebEnginePage::FindCaseSensitively), 21},
    {sipName_Forward, static_cast<int>( ::QWebEnginePage::Forward), 27},
    {sipName_Geolocation, static_cast<int>( ::QWebEnginePage::Geolocation), 19},
    {sipName_Indent, static_cast<int>( ::QWebEnginePage::Indent), 27},
    {sipName_InfoMessageLevel, static_cast<int>( ::QWebEnginePage::InfoMessageLevel), 23},
    {sipName_InsertOrderedList, static_cast<int>( ::QWebEnginePage::InsertOrderedList), 27},
    {sipName_InsertUnorderedList, static_cast<int>( ::QWebEnginePage::InsertUnorderedList), 27},
    {sipName_InspectElement, static_cast<int>( ::QWebEnginePage::InspectElement), 27},
    {sipName_KilledTerminationStatus, static_cast<int>( ::QWebEnginePage::KilledTerminationStatus), 26},
    {sipName_MediaAudioCapture, static_cast<int>( ::QWebEnginePage::MediaAudioCapture), 19},
    {sipName_MediaAudioVideoCapture, static_cast<int>( ::QWebEnginePage::MediaAudioVideoCapture), 19},
    {sipName_MediaVideoCapture, static_cast<int>( ::QWebEnginePage::MediaVideoCapture), 19},
    {sipName_MouseLock, static_cast<int>( ::QWebEnginePage::MouseLock), 19},
    {sipName_NavigationTypeBackForward, static_cast<int>( ::QWebEnginePage::NavigationTypeBackForward), 24},
    {sipName_NavigationTypeFormSubmitted, static_cast<int>( ::QWebEnginePage::NavigationTypeFormSubmitted), 24},
    {sipName_NavigationTypeLinkClicked, static_cast<int>( ::QWebEnginePage::NavigationTypeLinkClicked), 24},
    {sipName_NavigationTypeOther, static_cast<int>( ::QWebEnginePage::NavigationTypeOther), 24},
    {sipName_NavigationTypeReload, static_cast<int>( ::QWebEnginePage::NavigationTypeReload), 24},
    {sipName_NavigationTypeTyped, static_cast<int>( ::QWebEnginePage::NavigationTypeTyped), 24},
    {sipName_NoWebAction, static_cast<int>( ::QWebEnginePage::NoWebAction), 27},
    {sipName_NormalTerminationStatus, static_cast<int>( ::QWebEnginePage::NormalTerminationStatus), 26},
    {sipName_OpenLinkInNewBackgroundTab, static_cast<int>( ::QWebEnginePage::OpenLinkInNewBackgroundTab), 27},
    {sipName_OpenLinkInNewTab, static_cast<int>( ::QWebEnginePage::OpenLinkInNewTab), 27},
    {sipName_OpenLinkInNewWindow, static_cast<int>( ::QWebEnginePage::OpenLinkInNewWindow), 27},
    {sipName_OpenLinkInThisWindow, static_cast<int>( ::QWebEnginePage::OpenLinkInThisWindow), 27},
    {sipName_Outdent, static_cast<int>( ::QWebEnginePage::Outdent), 27},
    {sipName_Paste, static_cast<int>( ::QWebEnginePage::Paste), 27},
    {sipName_PasteAndMatchStyle, static_cast<int>( ::QWebEnginePage::PasteAndMatchStyle), 27},
    {sipName_PermissionDeniedByUser, static_cast<int>( ::QWebEnginePage::PermissionDeniedByUser), 25},
    {sipName_PermissionGrantedByUser, static_cast<int>( ::QWebEnginePage::PermissionGrantedByUser), 25},
    {sipName_PermissionUnknown, static_cast<int>( ::QWebEnginePage::PermissionUnknown), 25},
    {sipName_Redo, static_cast<int>( ::QWebEnginePage::Redo), 27},
    {sipName_Reload, static_cast<int>( ::QWebEnginePage::Reload), 27},
    {sipName_ReloadAndBypassCache, static_cast<int>( ::QWebEnginePage::ReloadAndBypassCache), 27},
    {sipName_RequestClose, static_cast<int>( ::QWebEnginePage::RequestClose), 27},
    {sipName_SavePage, static_cast<int>( ::QWebEnginePage::SavePage), 27},
    {sipName_SelectAll, static_cast<int>( ::QWebEnginePage::SelectAll), 27},
    {sipName_Stop, static_cast<int>( ::QWebEnginePage::Stop), 27},
    {sipName_ToggleBold, static_cast<int>( ::QWebEnginePage::ToggleBold), 27},
    {sipName_ToggleItalic, static_cast<int>( ::QWebEnginePage::ToggleItalic), 27},
    {sipName_ToggleMediaControls, static_cast<int>( ::QWebEnginePage::ToggleMediaControls), 27},
    {sipName_ToggleMediaLoop, static_cast<int>( ::QWebEnginePage::ToggleMediaLoop), 27},
    {sipName_ToggleMediaMute, static_cast<int>( ::QWebEnginePage::ToggleMediaMute), 27},
    {sipName_ToggleMediaPlayPause, static_cast<int>( ::QWebEnginePage::ToggleMediaPlayPause), 27},
    {sipName_ToggleStrikethrough, static_cast<int>( ::QWebEnginePage::ToggleStrikethrough), 27},
    {sipName_ToggleUnderline, static_cast<int>( ::QWebEnginePage::ToggleUnderline), 27},
    {sipName_Undo, static_cast<int>( ::QWebEnginePage::Undo), 27},
    {sipName_Unselect, static_cast<int>( ::QWebEnginePage::Unselect), 27},
    {sipName_ViewSource, static_cast<int>( ::QWebEnginePage::ViewSource), 27},
    {sipName_WarningMessageLevel, static_cast<int>( ::QWebEnginePage::WarningMessageLevel), 23},
    {sipName_WebBrowserBackgroundTab, static_cast<int>( ::QWebEnginePage::WebBrowserBackgroundTab), 28},
    {sipName_WebBrowserTab, static_cast<int>( ::QWebEnginePage::WebBrowserTab), 28},
    {sipName_WebBrowserWindow, static_cast<int>( ::QWebEnginePage::WebBrowserWindow), 28},
    {sipName_WebDialog, static_cast<int>( ::QWebEnginePage::WebDialog), 28},
};

PyDoc_STRVAR(doc_QWebEnginePage, "\1QWebEnginePage(parent: QObject = None)\n"
"QWebEnginePage(QWebEngineProfile, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebEnginePage[] = {
    {"registerProtocolHandlerRequested(QWebEngineRegisterProtocolHandlerRequest)", "\1registerProtocolHandlerRequested(self, QWebEngineRegisterProtocolHandlerRequest)", 0, 0},
    {"quotaRequested(QWebEngineQuotaRequest)", "\1quotaRequested(self, QWebEngineQuotaRequest)", 0, 0},
    {"pdfPrintingFinished(QString,bool)", "\1pdfPrintingFinished(self, str, bool)", 0, 0},
    {"recentlyAudibleChanged(bool)", "\1recentlyAudibleChanged(self, bool)", 0, 0},
    {"audioMutedChanged(bool)", "\1audioMutedChanged(self, bool)", 0, 0},
    {"contentsSizeChanged(QSizeF)", "\1contentsSizeChanged(self, QSizeF)", 0, 0},
    {"scrollPositionChanged(QPointF)", "\1scrollPositionChanged(self, Union[QPointF, QPoint])", 0, 0},
    {"iconChanged(QIcon)", "\1iconChanged(self, QIcon)", 0, 0},
    {"renderProcessTerminated(RenderProcessTerminationStatus,int)|(QWebEnginePage::RenderProcessTerminationStatus,int)", "\1renderProcessTerminated(self, QWebEnginePage.RenderProcessTerminationStatus, int)", 0, 0},
    {"fullScreenRequested(QWebEngineFullScreenRequest)", "\1fullScreenRequested(self, QWebEngineFullScreenRequest)", 0, 0},
    {"iconUrlChanged(QUrl)", "\1iconUrlChanged(self, QUrl)", 0, 0},
    {"urlChanged(QUrl)", "\1urlChanged(self, QUrl)", 0, 0},
    {"titleChanged(QString)", "\1titleChanged(self, str)", 0, 0},
    {"proxyAuthenticationRequired(QUrl,QAuthenticator*,QString)", "\1proxyAuthenticationRequired(self, QUrl, QAuthenticator, str)", 0, 0},
    {"authenticationRequired(QUrl,QAuthenticator*)", "\1authenticationRequired(self, QUrl, QAuthenticator)", 0, 0},
    {"featurePermissionRequestCanceled(QUrl,QWebEnginePage::Feature)", "\1featurePermissionRequestCanceled(self, QUrl, QWebEnginePage.Feature)", 0, 0},
    {"featurePermissionRequested(QUrl,QWebEnginePage::Feature)", "\1featurePermissionRequested(self, QUrl, QWebEnginePage.Feature)", 0, 0},
    {"windowCloseRequested()", "\1windowCloseRequested(self)", 0, 0},
    {"geometryChangeRequested(QRect)", "\1geometryChangeRequested(self, QRect)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"linkHovered(QString)", "\1linkHovered(self, str)", 0, 0},
    {"loadFinished(bool)", "\1loadFinished(self, bool)", 0, 0},
    {"loadProgress(int)", "\1loadProgress(self, int)", 0, 0},
    {"loadStarted()", "\1loadStarted(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QWebEnginePage = {
    & ::QWebEnginePage::staticMetaObject,
    0,
    signals_QWebEnginePage,
    0
};


sipClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEnginePage = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWebEnginePage,
        {0},
        &plugin_QWebEnginePage
    },
    {
        sipNameNr_QWebEnginePage,
        {0, 0, 1},
        55, methods_QWebEnginePage,
        77, enummembers_QWebEnginePage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEnginePage,
    -1,
    -1,
    supers_QWebEnginePage,
    0,
    init_type_QWebEnginePage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEnginePage,
    0,
    0,
    0,
    release_QWebEnginePage,
    cast_QWebEnginePage,
    0,
    0,
    0,
    0,
    0,
    0
};
