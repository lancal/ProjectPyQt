/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeopolygon.sip"
#include <qgeopolygon.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoPolygon.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoPolygon.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoPolygon.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoPolygon.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoPolygon.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeorectangle.sip"
#include <qgeorectangle.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoPolygon.cpp"


PyDoc_STRVAR(doc_QGeoPolygon_setPath, "setPath(self, Iterable[QGeoCoordinate])");

extern "C" {static PyObject *meth_QGeoPolygon_setPath(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QGeoCoordinate>* a0;
        int a0State = 0;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGeoPolygon, &sipCpp, sipType_QList_0100QGeoCoordinate,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast<QList< ::QGeoCoordinate> *>(a0),sipType_QList_0100QGeoCoordinate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_setPath, doc_QGeoPolygon_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_path, "path(self) -> List[QGeoCoordinate]");

extern "C" {static PyObject *meth_QGeoPolygon_path(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPolygon, &sipCpp))
        {
            QList< ::QGeoCoordinate>*sipRes;

            sipRes = new QList< ::QGeoCoordinate>(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGeoCoordinate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_path, doc_QGeoPolygon_path);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_translate, "translate(self, float, float)");

extern "C" {static PyObject *meth_QGeoPolygon_translate(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_translate, doc_QGeoPolygon_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_translated, "translated(self, float, float) -> QGeoPolygon");

extern "C" {static PyObject *meth_QGeoPolygon_translated(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        const  ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0, &a1))
        {
             ::QGeoPolygon*sipRes;

            sipRes = new  ::QGeoPolygon(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QGeoPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_translated, doc_QGeoPolygon_translated);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_length, "length(self, indexFrom: int = 0, indexTo: int = -1) -> float");

extern "C" {static PyObject *meth_QGeoPolygon_length(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_length(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        int a1 = -1;
        const  ::QGeoPolygon *sipCpp;

        static const char *sipKwdList[] = {
            sipName_indexFrom,
            sipName_indexTo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|ii", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0, &a1))
        {
            double sipRes;

            sipRes = sipCpp->length(a0,a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_length, doc_QGeoPolygon_length);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_size, "size(self) -> int");

extern "C" {static PyObject *meth_QGeoPolygon_size(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPolygon, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_size, doc_QGeoPolygon_size);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_addCoordinate, "addCoordinate(self, QGeoCoordinate)");

extern "C" {static PyObject *meth_QGeoPolygon_addCoordinate(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_addCoordinate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoCoordinate* a0;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoPolygon, &sipCpp, sipType_QGeoCoordinate, &a0))
        {
            sipCpp->addCoordinate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_addCoordinate, doc_QGeoPolygon_addCoordinate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_insertCoordinate, "insertCoordinate(self, int, QGeoCoordinate)");

extern "C" {static PyObject *meth_QGeoPolygon_insertCoordinate(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_insertCoordinate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QGeoCoordinate* a1;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0, sipType_QGeoCoordinate, &a1))
        {
            sipCpp->insertCoordinate(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_insertCoordinate, doc_QGeoPolygon_insertCoordinate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_replaceCoordinate, "replaceCoordinate(self, int, QGeoCoordinate)");

extern "C" {static PyObject *meth_QGeoPolygon_replaceCoordinate(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_replaceCoordinate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QGeoCoordinate* a1;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0, sipType_QGeoCoordinate, &a1))
        {
            sipCpp->replaceCoordinate(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_replaceCoordinate, doc_QGeoPolygon_replaceCoordinate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_coordinateAt, "coordinateAt(self, int) -> QGeoCoordinate");

extern "C" {static PyObject *meth_QGeoPolygon_coordinateAt(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_coordinateAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0))
        {
             ::QGeoCoordinate*sipRes;

            sipRes = new  ::QGeoCoordinate(sipCpp->coordinateAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QGeoCoordinate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_coordinateAt, doc_QGeoPolygon_coordinateAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_containsCoordinate, "containsCoordinate(self, QGeoCoordinate) -> bool");

extern "C" {static PyObject *meth_QGeoPolygon_containsCoordinate(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_containsCoordinate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoCoordinate* a0;
        const  ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoPolygon, &sipCpp, sipType_QGeoCoordinate, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->containsCoordinate(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_containsCoordinate, doc_QGeoPolygon_containsCoordinate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_removeCoordinate, "removeCoordinate(self, QGeoCoordinate)\n"
"removeCoordinate(self, int)");

extern "C" {static PyObject *meth_QGeoPolygon_removeCoordinate(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_removeCoordinate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoCoordinate* a0;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoPolygon, &sipCpp, sipType_QGeoCoordinate, &a0))
        {
            sipCpp->removeCoordinate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGeoPolygon, &sipCpp, &a0))
        {
            sipCpp->removeCoordinate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_removeCoordinate, doc_QGeoPolygon_removeCoordinate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPolygon_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QGeoPolygon_toString(PyObject *, PyObject *);}
static PyObject *meth_QGeoPolygon_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPolygon, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPolygon, sipName_toString, doc_QGeoPolygon_toString);

    return NULL;
}


extern "C" {static PyObject *slot_QGeoPolygon___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGeoPolygon___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGeoPolygon *sipCpp = reinterpret_cast< ::QGeoPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoPolygon, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGeoPolygon::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtPositioning, ne_slot, sipType_QGeoPolygon, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGeoPolygon___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGeoPolygon___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGeoPolygon *sipCpp = reinterpret_cast< ::QGeoPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoPolygon, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGeoPolygon::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtPositioning, eq_slot, sipType_QGeoPolygon, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGeoPolygon(void *, const sipTypeDef *);}
static void *cast_QGeoPolygon(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGeoPolygon *sipCpp = reinterpret_cast< ::QGeoPolygon *>(sipCppV);

    if (targetType == sipType_QGeoShape)
        return static_cast< ::QGeoShape *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoPolygon(void *, int);}
static void release_QGeoPolygon(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGeoPolygon *>(sipCppV);
}


extern "C" {static void assign_QGeoPolygon(void *, SIP_SSIZE_T, void *);}
static void assign_QGeoPolygon(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QGeoPolygon *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QGeoPolygon *>(sipSrc);
}


extern "C" {static void *array_QGeoPolygon(SIP_SSIZE_T);}
static void *array_QGeoPolygon(SIP_SSIZE_T sipNrElem)
{
    return new  ::QGeoPolygon[sipNrElem];
}


extern "C" {static void *copy_QGeoPolygon(const void *, SIP_SSIZE_T);}
static void *copy_QGeoPolygon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QGeoPolygon(reinterpret_cast<const  ::QGeoPolygon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGeoPolygon(sipSimpleWrapper *);}
static void dealloc_QGeoPolygon(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGeoPolygon(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGeoPolygon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoPolygon(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGeoPolygon *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QGeoPolygon();

            return sipCpp;
        }
    }

    {
        const QList< ::QGeoCoordinate>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QList_0100QGeoCoordinate,&a0, &a0State))
        {
            sipCpp = new  ::QGeoPolygon(*a0);
            sipReleaseType(const_cast<QList< ::QGeoCoordinate> *>(a0),sipType_QList_0100QGeoCoordinate,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QGeoPolygon* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGeoPolygon, &a0))
        {
            sipCpp = new  ::QGeoPolygon(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QGeoShape* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGeoShape, &a0))
        {
            sipCpp = new  ::QGeoPolygon(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoPolygon[] = {{25, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QGeoPolygon[] = {
    {(void *)slot_QGeoPolygon___ne__, ne_slot},
    {(void *)slot_QGeoPolygon___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGeoPolygon[] = {
    {SIP_MLNAME_CAST(sipName_addCoordinate), meth_QGeoPolygon_addCoordinate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_addCoordinate)},
    {SIP_MLNAME_CAST(sipName_containsCoordinate), meth_QGeoPolygon_containsCoordinate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_containsCoordinate)},
    {SIP_MLNAME_CAST(sipName_coordinateAt), meth_QGeoPolygon_coordinateAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_coordinateAt)},
    {SIP_MLNAME_CAST(sipName_insertCoordinate), meth_QGeoPolygon_insertCoordinate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_insertCoordinate)},
    {SIP_MLNAME_CAST(sipName_length), (PyCFunction)meth_QGeoPolygon_length, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoPolygon_length)},
    {SIP_MLNAME_CAST(sipName_path), meth_QGeoPolygon_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_path)},
    {SIP_MLNAME_CAST(sipName_removeCoordinate), meth_QGeoPolygon_removeCoordinate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_removeCoordinate)},
    {SIP_MLNAME_CAST(sipName_replaceCoordinate), meth_QGeoPolygon_replaceCoordinate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_replaceCoordinate)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QGeoPolygon_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_setPath)},
    {SIP_MLNAME_CAST(sipName_size), meth_QGeoPolygon_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_size)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QGeoPolygon_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_toString)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QGeoPolygon_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QGeoPolygon_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPolygon_translated)}
};

PyDoc_STRVAR(doc_QGeoPolygon, "\1QGeoPolygon()\n"
"QGeoPolygon(Iterable[QGeoCoordinate])\n"
"QGeoPolygon(QGeoPolygon)\n"
"QGeoPolygon(QGeoShape)");


static pyqt5ClassPluginDef plugin_QGeoPolygon = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtPositioning_QGeoPolygon = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGeoPolygon,
        {0},
        &plugin_QGeoPolygon
    },
    {
        sipNameNr_QGeoPolygon,
        {0, 0, 1},
        13, methods_QGeoPolygon,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoPolygon,
    -1,
    -1,
    supers_QGeoPolygon,
    slots_QGeoPolygon,
    init_type_QGeoPolygon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoPolygon,
    assign_QGeoPolygon,
    array_QGeoPolygon,
    copy_QGeoPolygon,
    release_QGeoPolygon,
    cast_QGeoPolygon,
    0,
    0,
    0,
    0,
    0,
    0
};
