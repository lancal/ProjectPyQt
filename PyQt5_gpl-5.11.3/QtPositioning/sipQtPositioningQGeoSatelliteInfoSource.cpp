/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeosatelliteinfosource.sip"
#include <qgeosatelliteinfosource.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeosatelliteinfo.sip"
#include <qgeosatelliteinfo.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"


class sipQGeoSatelliteInfoSource : public  ::QGeoSatelliteInfoSource
{
public:
    sipQGeoSatelliteInfoSource( ::QObject*);
    virtual ~sipQGeoSatelliteInfoSource();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void requestUpdate(int);
    void stopUpdates();
    void startUpdates();
     ::QGeoSatelliteInfoSource::Error error() const;
    int minimumUpdateInterval() const;
    void setUpdateInterval(int);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoSatelliteInfoSource(const sipQGeoSatelliteInfoSource &);
    sipQGeoSatelliteInfoSource &operator = (const sipQGeoSatelliteInfoSource &);

    char sipPyMethods[13];
};

sipQGeoSatelliteInfoSource::sipQGeoSatelliteInfoSource( ::QObject*a0):  ::QGeoSatelliteInfoSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoSatelliteInfoSource::~sipQGeoSatelliteInfoSource()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGeoSatelliteInfoSource::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtPositioning_qt_metaobject(sipPySelf,sipType_QGeoSatelliteInfoSource);

    return  ::QGeoSatelliteInfoSource::metaObject();
}

int sipQGeoSatelliteInfoSource::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGeoSatelliteInfoSource::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtPositioning_qt_metacall(sipPySelf,sipType_QGeoSatelliteInfoSource,_c,_id,_a);

    return _id;
}

void *sipQGeoSatelliteInfoSource::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtPositioning_qt_metacast(sipPySelf, sipType_QGeoSatelliteInfoSource, _clname, &sipCpp) ? sipCpp :  ::QGeoSatelliteInfoSource::qt_metacast(_clname));
}

void sipQGeoSatelliteInfoSource::requestUpdate(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_requestUpdate);

    if (!sipMeth)
        return;

    extern void sipVH_QtPositioning_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtPositioning_14(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::stopUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_stopUpdates);

    if (!sipMeth)
        return;

    extern void sipVH_QtPositioning_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtPositioning_20(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGeoSatelliteInfoSource::startUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_startUpdates);

    if (!sipMeth)
        return;

    extern void sipVH_QtPositioning_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtPositioning_20(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QGeoSatelliteInfoSource::Error sipQGeoSatelliteInfoSource::error() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_error);

    if (!sipMeth)
        return  ::QGeoSatelliteInfoSource::AccessError;

    extern  ::QGeoSatelliteInfoSource::Error sipVH_QtPositioning_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_21(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQGeoSatelliteInfoSource::minimumUpdateInterval() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_minimumUpdateInterval);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtPositioning_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_18(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGeoSatelliteInfoSource::setUpdateInterval(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setUpdateInterval);

    if (!sipMeth)
    {
         ::QGeoSatelliteInfoSource::setUpdateInterval(a0);
        return;
    }

    extern void sipVH_QtPositioning_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtPositioning_14(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGeoSatelliteInfoSource::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QGeoSatelliteInfoSource::event(a0);

    extern bool sipVH_QtPositioning_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtPositioning_5(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGeoSatelliteInfoSource::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGeoSatelliteInfoSource::eventFilter(a0,a1);

    extern bool sipVH_QtPositioning_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtPositioning_4(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQGeoSatelliteInfoSource::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGeoSatelliteInfoSource::timerEvent(a0);
        return;
    }

    extern void sipVH_QtPositioning_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtPositioning_3(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGeoSatelliteInfoSource::childEvent(a0);
        return;
    }

    extern void sipVH_QtPositioning_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtPositioning_2(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGeoSatelliteInfoSource::customEvent(a0);
        return;
    }

    extern void sipVH_QtPositioning_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtPositioning_1(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGeoSatelliteInfoSource::connectNotify(a0);
        return;
    }

    extern void sipVH_QtPositioning_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtPositioning_0(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGeoSatelliteInfoSource::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtPositioning_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtPositioning_0(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_createDefaultSource, "createDefaultSource(QObject) -> QGeoSatelliteInfoSource");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_createDefaultSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_createDefaultSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "JH", sipType_QObject, &a0, &sipOwner))
        {
             ::QGeoSatelliteInfoSource*sipRes;

            sipRes =  ::QGeoSatelliteInfoSource::createDefaultSource(a0);

            return sipConvertFromNewType(sipRes,sipType_QGeoSatelliteInfoSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_createDefaultSource, doc_QGeoSatelliteInfoSource_createDefaultSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_createSource, "createSource(str, QObject) -> QGeoSatelliteInfoSource");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_createSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_createSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, &sipOwner))
        {
             ::QGeoSatelliteInfoSource*sipRes;

            sipRes =  ::QGeoSatelliteInfoSource::createSource(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGeoSatelliteInfoSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_createSource, doc_QGeoSatelliteInfoSource_createSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_availableSources, "availableSources() -> List[str]");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_availableSources(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_availableSources(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QGeoSatelliteInfoSource::availableSources());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_availableSources, doc_QGeoSatelliteInfoSource_availableSources);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_sourceName, "sourceName(self) -> str");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_sourceName(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_sourceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sourceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_sourceName, doc_QGeoSatelliteInfoSource_sourceName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_setUpdateInterval, "setUpdateInterval(self, int)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGeoSatelliteInfoSource::setUpdateInterval(a0) : sipCpp->setUpdateInterval(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_setUpdateInterval, doc_QGeoSatelliteInfoSource_setUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_updateInterval, "updateInterval(self) -> int");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_updateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_updateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->updateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_updateInterval, doc_QGeoSatelliteInfoSource_updateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_minimumUpdateInterval, "minimumUpdateInterval(self) -> int");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_minimumUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_minimumUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_minimumUpdateInterval);
                return NULL;
            }

            sipRes = sipCpp->minimumUpdateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_minimumUpdateInterval, doc_QGeoSatelliteInfoSource_minimumUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_error, "error(self) -> QGeoSatelliteInfoSource.Error");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_error(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
             ::QGeoSatelliteInfoSource::Error sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_error);
                return NULL;
            }

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QGeoSatelliteInfoSource_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_error, doc_QGeoSatelliteInfoSource_error);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_startUpdates, "startUpdates(self)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_startUpdates(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_startUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_startUpdates);
                return NULL;
            }

            sipCpp->startUpdates();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_startUpdates, doc_QGeoSatelliteInfoSource_startUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_stopUpdates, "stopUpdates(self)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_stopUpdates(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_stopUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_stopUpdates);
                return NULL;
            }

            sipCpp->stopUpdates();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_stopUpdates, doc_QGeoSatelliteInfoSource_stopUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_requestUpdate, "requestUpdate(self, timeout: int = 0)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_requestUpdate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_requestUpdate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0 = 0;
         ::QGeoSatelliteInfoSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_requestUpdate);
                return NULL;
            }

            sipCpp->requestUpdate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_requestUpdate, doc_QGeoSatelliteInfoSource_requestUpdate);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGeoSatelliteInfoSource(void *, const sipTypeDef *);}
static void *cast_QGeoSatelliteInfoSource(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGeoSatelliteInfoSource *sipCpp = reinterpret_cast< ::QGeoSatelliteInfoSource *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoSatelliteInfoSource(void *, int);}
static void release_QGeoSatelliteInfoSource(void *sipCppV, int)
{
     ::QGeoSatelliteInfoSource *sipCpp = reinterpret_cast< ::QGeoSatelliteInfoSource *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoSatelliteInfoSource(sipSimpleWrapper *);}
static void dealloc_QGeoSatelliteInfoSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGeoSatelliteInfoSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGeoSatelliteInfoSource(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGeoSatelliteInfoSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoSatelliteInfoSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoSatelliteInfoSource *sipCpp = 0;

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGeoSatelliteInfoSource(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoSatelliteInfoSource[] = {{6, 0, 1}};


static PyMethodDef methods_QGeoSatelliteInfoSource[] = {
    {SIP_MLNAME_CAST(sipName_availableSources), meth_QGeoSatelliteInfoSource_availableSources, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_availableSources)},
    {SIP_MLNAME_CAST(sipName_createDefaultSource), meth_QGeoSatelliteInfoSource_createDefaultSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_createDefaultSource)},
    {SIP_MLNAME_CAST(sipName_createSource), meth_QGeoSatelliteInfoSource_createSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_createSource)},
    {SIP_MLNAME_CAST(sipName_error), meth_QGeoSatelliteInfoSource_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_error)},
    {SIP_MLNAME_CAST(sipName_minimumUpdateInterval), meth_QGeoSatelliteInfoSource_minimumUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_minimumUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_requestUpdate), (PyCFunction)meth_QGeoSatelliteInfoSource_requestUpdate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QGeoSatelliteInfoSource_setUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_setUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_sourceName), meth_QGeoSatelliteInfoSource_sourceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_sourceName)},
    {SIP_MLNAME_CAST(sipName_startUpdates), meth_QGeoSatelliteInfoSource_startUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_startUpdates)},
    {SIP_MLNAME_CAST(sipName_stopUpdates), meth_QGeoSatelliteInfoSource_stopUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_stopUpdates)},
    {SIP_MLNAME_CAST(sipName_updateInterval), meth_QGeoSatelliteInfoSource_updateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_updateInterval)}
};

static sipEnumMemberDef enummembers_QGeoSatelliteInfoSource[] = {
    {sipName_AccessError, static_cast<int>( ::QGeoSatelliteInfoSource::AccessError), 24},
    {sipName_ClosedError, static_cast<int>( ::QGeoSatelliteInfoSource::ClosedError), 24},
    {sipName_NoError, static_cast<int>( ::QGeoSatelliteInfoSource::NoError), 24},
    {sipName_UnknownSourceError, static_cast<int>( ::QGeoSatelliteInfoSource::UnknownSourceError), 24},
};

PyDoc_STRVAR(doc_QGeoSatelliteInfoSource, "\1QGeoSatelliteInfoSource(QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoSatelliteInfoSource[] = {
    {"requestTimeout()", "\1requestTimeout(self)", 0, 0},
    {"satellitesInUseUpdated(QList<QGeoSatelliteInfo>)", "\1satellitesInUseUpdated(self, Iterable[QGeoSatelliteInfo])", 0, 0},
    {"satellitesInViewUpdated(QList<QGeoSatelliteInfo>)", "\1satellitesInViewUpdated(self, Iterable[QGeoSatelliteInfo])", 0, 0},
    {"error(QGeoSatelliteInfoSource::Error)", "\1error(self, QGeoSatelliteInfoSource.Error)", &methods_QGeoSatelliteInfoSource[3], 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QGeoSatelliteInfoSource = {
    & ::QGeoSatelliteInfoSource::staticMetaObject,
    0,
    signals_QGeoSatelliteInfoSource,
    0
};


sipClassTypeDef sipTypeDef_QtPositioning_QGeoSatelliteInfoSource = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGeoSatelliteInfoSource,
        {0},
        &plugin_QGeoSatelliteInfoSource
    },
    {
        sipNameNr_QGeoSatelliteInfoSource,
        {0, 0, 1},
        11, methods_QGeoSatelliteInfoSource,
        4, enummembers_QGeoSatelliteInfoSource,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoSatelliteInfoSource,
    -1,
    -1,
    supers_QGeoSatelliteInfoSource,
    0,
    init_type_QGeoSatelliteInfoSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoSatelliteInfoSource,
    0,
    0,
    0,
    release_QGeoSatelliteInfoSource,
    cast_QGeoSatelliteInfoSource,
    0,
    0,
    0,
    0,
    0,
    0
};
