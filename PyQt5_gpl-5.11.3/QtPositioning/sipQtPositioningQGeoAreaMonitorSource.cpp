/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeoareamonitorsource.sip"
#include <qgeoareamonitorsource.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeoareamonitorinfo.sip"
#include <qgeoareamonitorinfo.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeopositioninfo.sip"
#include <qgeopositioninfo.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeoareamonitorsource.sip"
#include <qgeoareamonitorsource.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 96 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 99 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtPositioning/sipQtPositioningQGeoAreaMonitorSource.cpp"


class sipQGeoAreaMonitorSource : public  ::QGeoAreaMonitorSource
{
public:
    sipQGeoAreaMonitorSource( ::QObject*);
    virtual ~sipQGeoAreaMonitorSource();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QList< ::QGeoAreaMonitorInfo> activeMonitors(const  ::QGeoShape&) const;
    QList< ::QGeoAreaMonitorInfo> activeMonitors() const;
    bool requestUpdate(const  ::QGeoAreaMonitorInfo&,const char*);
    bool stopMonitoring(const  ::QGeoAreaMonitorInfo&);
    bool startMonitoring(const  ::QGeoAreaMonitorInfo&);
     ::QGeoAreaMonitorSource::AreaMonitorFeatures supportedAreaMonitorFeatures() const;
     ::QGeoAreaMonitorSource::Error error() const;
     ::QGeoPositionInfoSource* positionInfoSource() const;
    void setPositionInfoSource( ::QGeoPositionInfoSource*);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoAreaMonitorSource(const sipQGeoAreaMonitorSource &);
    sipQGeoAreaMonitorSource &operator = (const sipQGeoAreaMonitorSource &);

    char sipPyMethods[16];
};

sipQGeoAreaMonitorSource::sipQGeoAreaMonitorSource( ::QObject*a0):  ::QGeoAreaMonitorSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoAreaMonitorSource::~sipQGeoAreaMonitorSource()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGeoAreaMonitorSource::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtPositioning_qt_metaobject(sipPySelf,sipType_QGeoAreaMonitorSource);

    return  ::QGeoAreaMonitorSource::metaObject();
}

int sipQGeoAreaMonitorSource::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGeoAreaMonitorSource::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtPositioning_qt_metacall(sipPySelf,sipType_QGeoAreaMonitorSource,_c,_id,_a);

    return _id;
}

void *sipQGeoAreaMonitorSource::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtPositioning_qt_metacast(sipPySelf, sipType_QGeoAreaMonitorSource, _clname, &sipCpp) ? sipCpp :  ::QGeoAreaMonitorSource::qt_metacast(_clname));
}

QList< ::QGeoAreaMonitorInfo> sipQGeoAreaMonitorSource::activeMonitors(const  ::QGeoShape& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QGeoAreaMonitorSource,sipName_activeMonitors);

    if (!sipMeth)
        return QList< ::QGeoAreaMonitorInfo>();

    extern QList< ::QGeoAreaMonitorInfo> sipVH_QtPositioning_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGeoShape&);

    return sipVH_QtPositioning_13(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

QList< ::QGeoAreaMonitorInfo> sipQGeoAreaMonitorSource::activeMonitors() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QGeoAreaMonitorSource,sipName_activeMonitors);

    if (!sipMeth)
        return QList< ::QGeoAreaMonitorInfo>();

    extern QList< ::QGeoAreaMonitorInfo> sipVH_QtPositioning_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_12(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQGeoAreaMonitorSource::requestUpdate(const  ::QGeoAreaMonitorInfo& a0,const char*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QGeoAreaMonitorSource,sipName_requestUpdate);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtPositioning_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGeoAreaMonitorInfo&,const char*);

    return sipVH_QtPositioning_11(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoAreaMonitorSource::stopMonitoring(const  ::QGeoAreaMonitorInfo& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QGeoAreaMonitorSource,sipName_stopMonitoring);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtPositioning_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGeoAreaMonitorInfo&);

    return sipVH_QtPositioning_10(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGeoAreaMonitorSource::startMonitoring(const  ::QGeoAreaMonitorInfo& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QGeoAreaMonitorSource,sipName_startMonitoring);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtPositioning_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGeoAreaMonitorInfo&);

    return sipVH_QtPositioning_10(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QGeoAreaMonitorSource::AreaMonitorFeatures sipQGeoAreaMonitorSource::supportedAreaMonitorFeatures() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QGeoAreaMonitorSource,sipName_supportedAreaMonitorFeatures);

    if (!sipMeth)
        return  ::QGeoAreaMonitorSource::AreaMonitorFeatures();

    extern  ::QGeoAreaMonitorSource::AreaMonitorFeatures sipVH_QtPositioning_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_9(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QGeoAreaMonitorSource::Error sipQGeoAreaMonitorSource::error() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QGeoAreaMonitorSource,sipName_error);

    if (!sipMeth)
        return  ::QGeoAreaMonitorSource::AccessError;

    extern  ::QGeoAreaMonitorSource::Error sipVH_QtPositioning_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_8(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QGeoPositionInfoSource* sipQGeoAreaMonitorSource::positionInfoSource() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_positionInfoSource);

    if (!sipMeth)
        return  ::QGeoAreaMonitorSource::positionInfoSource();

    extern  ::QGeoPositionInfoSource* sipVH_QtPositioning_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_7(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQGeoAreaMonitorSource::setPositionInfoSource( ::QGeoPositionInfoSource*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setPositionInfoSource);

    if (!sipMeth)
    {
         ::QGeoAreaMonitorSource::setPositionInfoSource(a0);
        return;
    }

    extern void sipVH_QtPositioning_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGeoPositionInfoSource*);

    sipVH_QtPositioning_6(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGeoAreaMonitorSource::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QGeoAreaMonitorSource::event(a0);

    extern bool sipVH_QtPositioning_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtPositioning_5(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGeoAreaMonitorSource::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGeoAreaMonitorSource::eventFilter(a0,a1);

    extern bool sipVH_QtPositioning_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtPositioning_4(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQGeoAreaMonitorSource::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGeoAreaMonitorSource::timerEvent(a0);
        return;
    }

    extern void sipVH_QtPositioning_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtPositioning_3(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoAreaMonitorSource::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGeoAreaMonitorSource::childEvent(a0);
        return;
    }

    extern void sipVH_QtPositioning_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtPositioning_2(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoAreaMonitorSource::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGeoAreaMonitorSource::customEvent(a0);
        return;
    }

    extern void sipVH_QtPositioning_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtPositioning_1(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoAreaMonitorSource::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGeoAreaMonitorSource::connectNotify(a0);
        return;
    }

    extern void sipVH_QtPositioning_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtPositioning_0(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoAreaMonitorSource::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGeoAreaMonitorSource::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtPositioning_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtPositioning_0(sipGILState, sipImportedVirtErrorHandlers_QtPositioning_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_createDefaultSource, "createDefaultSource(QObject) -> QGeoAreaMonitorSource");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_createDefaultSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_createDefaultSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "JH", sipType_QObject, &a0, &sipOwner))
        {
             ::QGeoAreaMonitorSource*sipRes;

            sipRes =  ::QGeoAreaMonitorSource::createDefaultSource(a0);

            return sipConvertFromNewType(sipRes,sipType_QGeoAreaMonitorSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_createDefaultSource, doc_QGeoAreaMonitorSource_createDefaultSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_createSource, "createSource(str, QObject) -> QGeoAreaMonitorSource");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_createSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_createSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, &sipOwner))
        {
             ::QGeoAreaMonitorSource*sipRes;

            sipRes =  ::QGeoAreaMonitorSource::createSource(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGeoAreaMonitorSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_createSource, doc_QGeoAreaMonitorSource_createSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_availableSources, "availableSources() -> List[str]");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_availableSources(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_availableSources(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QGeoAreaMonitorSource::availableSources());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_availableSources, doc_QGeoAreaMonitorSource_availableSources);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_setPositionInfoSource, "setPositionInfoSource(self, QGeoPositionInfoSource)");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_setPositionInfoSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_setPositionInfoSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGeoPositionInfoSource* a0;
         ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp, sipType_QGeoPositionInfoSource, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QGeoAreaMonitorSource::setPositionInfoSource(a0) : sipCpp->setPositionInfoSource(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_setPositionInfoSource, doc_QGeoAreaMonitorSource_setPositionInfoSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_positionInfoSource, "positionInfoSource(self) -> QGeoPositionInfoSource");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_positionInfoSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_positionInfoSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp))
        {
             ::QGeoPositionInfoSource*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGeoAreaMonitorSource::positionInfoSource() : sipCpp->positionInfoSource());

            return sipConvertFromType(sipRes,sipType_QGeoPositionInfoSource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_positionInfoSource, doc_QGeoAreaMonitorSource_positionInfoSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_sourceName, "sourceName(self) -> str");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_sourceName(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_sourceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sourceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_sourceName, doc_QGeoAreaMonitorSource_sourceName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_error, "error(self) -> QGeoAreaMonitorSource.Error");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_error(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp))
        {
             ::QGeoAreaMonitorSource::Error sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_error);
                return NULL;
            }

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QGeoAreaMonitorSource_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_error, doc_QGeoAreaMonitorSource_error);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_supportedAreaMonitorFeatures, "supportedAreaMonitorFeatures(self) -> QGeoAreaMonitorSource.AreaMonitorFeatures");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_supportedAreaMonitorFeatures(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_supportedAreaMonitorFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp))
        {
             ::QGeoAreaMonitorSource::AreaMonitorFeatures*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_supportedAreaMonitorFeatures);
                return NULL;
            }

            sipRes = new  ::QGeoAreaMonitorSource::AreaMonitorFeatures(sipCpp->supportedAreaMonitorFeatures());

            return sipConvertFromNewType(sipRes,sipType_QGeoAreaMonitorSource_AreaMonitorFeatures,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_supportedAreaMonitorFeatures, doc_QGeoAreaMonitorSource_supportedAreaMonitorFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_startMonitoring, "startMonitoring(self, QGeoAreaMonitorInfo) -> bool");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_startMonitoring(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_startMonitoring(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoAreaMonitorInfo* a0;
         ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp, sipType_QGeoAreaMonitorInfo, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_startMonitoring);
                return NULL;
            }

            sipRes = sipCpp->startMonitoring(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_startMonitoring, doc_QGeoAreaMonitorSource_startMonitoring);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_stopMonitoring, "stopMonitoring(self, QGeoAreaMonitorInfo) -> bool");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_stopMonitoring(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_stopMonitoring(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoAreaMonitorInfo* a0;
         ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp, sipType_QGeoAreaMonitorInfo, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_stopMonitoring);
                return NULL;
            }

            sipRes = sipCpp->stopMonitoring(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_stopMonitoring, doc_QGeoAreaMonitorSource_stopMonitoring);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_requestUpdate, "requestUpdate(self, QGeoAreaMonitorInfo, str) -> bool");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoAreaMonitorInfo* a0;
        const char* a1;
        PyObject *a1Keep;
         ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9AA", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp, sipType_QGeoAreaMonitorInfo, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_requestUpdate);
                return NULL;
            }

            sipRes = sipCpp->requestUpdate(*a0,a1);
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_requestUpdate, doc_QGeoAreaMonitorSource_requestUpdate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoAreaMonitorSource_activeMonitors, "activeMonitors(self) -> List[QGeoAreaMonitorInfo]\n"
"activeMonitors(self, QGeoShape) -> List[QGeoAreaMonitorInfo]");

extern "C" {static PyObject *meth_QGeoAreaMonitorSource_activeMonitors(PyObject *, PyObject *);}
static PyObject *meth_QGeoAreaMonitorSource_activeMonitors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp))
        {
            QList< ::QGeoAreaMonitorInfo>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_activeMonitors);
                return NULL;
            }

            sipRes = new QList< ::QGeoAreaMonitorInfo>(sipCpp->activeMonitors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGeoAreaMonitorInfo,NULL);
        }
    }

    {
        const  ::QGeoShape* a0;
        const  ::QGeoAreaMonitorSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoAreaMonitorSource, &sipCpp, sipType_QGeoShape, &a0))
        {
            QList< ::QGeoAreaMonitorInfo>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoAreaMonitorSource, sipName_activeMonitors);
                return NULL;
            }

            sipRes = new QList< ::QGeoAreaMonitorInfo>(sipCpp->activeMonitors(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGeoAreaMonitorInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoAreaMonitorSource, sipName_activeMonitors, doc_QGeoAreaMonitorSource_activeMonitors);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGeoAreaMonitorSource(void *, const sipTypeDef *);}
static void *cast_QGeoAreaMonitorSource(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGeoAreaMonitorSource *sipCpp = reinterpret_cast< ::QGeoAreaMonitorSource *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoAreaMonitorSource(void *, int);}
static void release_QGeoAreaMonitorSource(void *sipCppV, int)
{
     ::QGeoAreaMonitorSource *sipCpp = reinterpret_cast< ::QGeoAreaMonitorSource *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoAreaMonitorSource(sipSimpleWrapper *);}
static void dealloc_QGeoAreaMonitorSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGeoAreaMonitorSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGeoAreaMonitorSource(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGeoAreaMonitorSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoAreaMonitorSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoAreaMonitorSource *sipCpp = 0;

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGeoAreaMonitorSource(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoAreaMonitorSource[] = {{6, 0, 1}};


static PyMethodDef methods_QGeoAreaMonitorSource[] = {
    {SIP_MLNAME_CAST(sipName_activeMonitors), meth_QGeoAreaMonitorSource_activeMonitors, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_activeMonitors)},
    {SIP_MLNAME_CAST(sipName_availableSources), meth_QGeoAreaMonitorSource_availableSources, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_availableSources)},
    {SIP_MLNAME_CAST(sipName_createDefaultSource), meth_QGeoAreaMonitorSource_createDefaultSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_createDefaultSource)},
    {SIP_MLNAME_CAST(sipName_createSource), meth_QGeoAreaMonitorSource_createSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_createSource)},
    {SIP_MLNAME_CAST(sipName_error), meth_QGeoAreaMonitorSource_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_error)},
    {SIP_MLNAME_CAST(sipName_positionInfoSource), meth_QGeoAreaMonitorSource_positionInfoSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_positionInfoSource)},
    {SIP_MLNAME_CAST(sipName_requestUpdate), meth_QGeoAreaMonitorSource_requestUpdate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_setPositionInfoSource), meth_QGeoAreaMonitorSource_setPositionInfoSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_setPositionInfoSource)},
    {SIP_MLNAME_CAST(sipName_sourceName), meth_QGeoAreaMonitorSource_sourceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_sourceName)},
    {SIP_MLNAME_CAST(sipName_startMonitoring), meth_QGeoAreaMonitorSource_startMonitoring, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_startMonitoring)},
    {SIP_MLNAME_CAST(sipName_stopMonitoring), meth_QGeoAreaMonitorSource_stopMonitoring, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_stopMonitoring)},
    {SIP_MLNAME_CAST(sipName_supportedAreaMonitorFeatures), meth_QGeoAreaMonitorSource_supportedAreaMonitorFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoAreaMonitorSource_supportedAreaMonitorFeatures)}
};

static sipEnumMemberDef enummembers_QGeoAreaMonitorSource[] = {
    {sipName_AccessError, static_cast<int>( ::QGeoAreaMonitorSource::AccessError), 5},
    {sipName_AnyAreaMonitorFeature, static_cast<int>( ::QGeoAreaMonitorSource::AnyAreaMonitorFeature), 3},
    {sipName_InsufficientPositionInfo, static_cast<int>( ::QGeoAreaMonitorSource::InsufficientPositionInfo), 5},
    {sipName_NoError, static_cast<int>( ::QGeoAreaMonitorSource::NoError), 5},
    {sipName_PersistentAreaMonitorFeature, static_cast<int>( ::QGeoAreaMonitorSource::PersistentAreaMonitorFeature), 3},
    {sipName_UnknownSourceError, static_cast<int>( ::QGeoAreaMonitorSource::UnknownSourceError), 5},
};

PyDoc_STRVAR(doc_QGeoAreaMonitorSource, "\1QGeoAreaMonitorSource(QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoAreaMonitorSource[] = {
    {"monitorExpired(QGeoAreaMonitorInfo)", "\1monitorExpired(self, QGeoAreaMonitorInfo)", 0, 0},
    {"areaExited(QGeoAreaMonitorInfo,QGeoPositionInfo)", "\1areaExited(self, QGeoAreaMonitorInfo, QGeoPositionInfo)", 0, 0},
    {"areaEntered(QGeoAreaMonitorInfo,QGeoPositionInfo)", "\1areaEntered(self, QGeoAreaMonitorInfo, QGeoPositionInfo)", 0, 0},
    {"error(QGeoAreaMonitorSource::Error)", "\1error(self, QGeoAreaMonitorSource.Error)", &methods_QGeoAreaMonitorSource[4], 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QGeoAreaMonitorSource = {
    & ::QGeoAreaMonitorSource::staticMetaObject,
    0,
    signals_QGeoAreaMonitorSource,
    0
};


sipClassTypeDef sipTypeDef_QtPositioning_QGeoAreaMonitorSource = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGeoAreaMonitorSource,
        {0},
        &plugin_QGeoAreaMonitorSource
    },
    {
        sipNameNr_QGeoAreaMonitorSource,
        {0, 0, 1},
        12, methods_QGeoAreaMonitorSource,
        6, enummembers_QGeoAreaMonitorSource,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoAreaMonitorSource,
    -1,
    -1,
    supers_QGeoAreaMonitorSource,
    0,
    init_type_QGeoAreaMonitorSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoAreaMonitorSource,
    0,
    0,
    0,
    release_QGeoAreaMonitorSource,
    cast_QGeoAreaMonitorSource,
    0,
    0,
    0,
    0,
    0,
    0
};
