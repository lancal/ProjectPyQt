/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothDeviceDiscoveryAgent.cpp"


class sipQBluetoothDeviceDiscoveryAgent : public  ::QBluetoothDeviceDiscoveryAgent
{
public:
    sipQBluetoothDeviceDiscoveryAgent( ::QObject*);
    sipQBluetoothDeviceDiscoveryAgent(const  ::QBluetoothAddress&, ::QObject*);
    virtual ~sipQBluetoothDeviceDiscoveryAgent();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothDeviceDiscoveryAgent(const sipQBluetoothDeviceDiscoveryAgent &);
    sipQBluetoothDeviceDiscoveryAgent &operator = (const sipQBluetoothDeviceDiscoveryAgent &);

    char sipPyMethods[7];
};

sipQBluetoothDeviceDiscoveryAgent::sipQBluetoothDeviceDiscoveryAgent( ::QObject*a0):  ::QBluetoothDeviceDiscoveryAgent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothDeviceDiscoveryAgent::sipQBluetoothDeviceDiscoveryAgent(const  ::QBluetoothAddress& a0, ::QObject*a1):  ::QBluetoothDeviceDiscoveryAgent(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothDeviceDiscoveryAgent::~sipQBluetoothDeviceDiscoveryAgent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothDeviceDiscoveryAgent::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothDeviceDiscoveryAgent);

    return  ::QBluetoothDeviceDiscoveryAgent::metaObject();
}

int sipQBluetoothDeviceDiscoveryAgent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothDeviceDiscoveryAgent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothDeviceDiscoveryAgent,_c,_id,_a);

    return _id;
}

void *sipQBluetoothDeviceDiscoveryAgent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothDeviceDiscoveryAgent, _clname, &sipCpp) ? sipCpp :  ::QBluetoothDeviceDiscoveryAgent::qt_metacast(_clname));
}

bool sipQBluetoothDeviceDiscoveryAgent::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothDeviceDiscoveryAgent::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothDeviceDiscoveryAgent::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothDeviceDiscoveryAgent::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothDeviceDiscoveryAgent::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_inquiryType, "inquiryType(self) -> QBluetoothDeviceDiscoveryAgent.InquiryType");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_inquiryType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_inquiryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothDeviceDiscoveryAgent::InquiryType sipRes;

            sipRes = sipCpp->inquiryType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothDeviceDiscoveryAgent_InquiryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_inquiryType, doc_QBluetoothDeviceDiscoveryAgent_inquiryType);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_setInquiryType, "setInquiryType(self, QBluetoothDeviceDiscoveryAgent.InquiryType)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setInquiryType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setInquiryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QBluetoothDeviceDiscoveryAgent::InquiryType a0;
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, sipType_QBluetoothDeviceDiscoveryAgent_InquiryType, &a0))
        {
            sipCpp->setInquiryType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_setInquiryType, doc_QBluetoothDeviceDiscoveryAgent_setInquiryType);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_isActive, doc_QBluetoothDeviceDiscoveryAgent_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_error, "error(self) -> QBluetoothDeviceDiscoveryAgent.Error");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothDeviceDiscoveryAgent::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothDeviceDiscoveryAgent_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_error, doc_QBluetoothDeviceDiscoveryAgent_error);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_errorString, doc_QBluetoothDeviceDiscoveryAgent_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices, "discoveredDevices(self) -> List[QBluetoothDeviceInfo]");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            QList< ::QBluetoothDeviceInfo>*sipRes;

            sipRes = new QList< ::QBluetoothDeviceInfo>(sipCpp->discoveredDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothDeviceInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_discoveredDevices, doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_start, "start(self)\n"
"start(self, Union[QBluetoothDeviceDiscoveryAgent.DiscoveryMethods, QBluetoothDeviceDiscoveryAgent.DiscoveryMethod])");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_start(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State))
        {
            sipCpp->start(*a0);
            sipReleaseType(a0,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_start, doc_QBluetoothDeviceDiscoveryAgent_start);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_stop, "stop(self)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_stop(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_stop, doc_QBluetoothDeviceDiscoveryAgent_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout, "setLowEnergyDiscoveryTimeout(self, int)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, &a0))
        {
            sipCpp->setLowEnergyDiscoveryTimeout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_setLowEnergyDiscoveryTimeout, doc_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout, "lowEnergyDiscoveryTimeout(self) -> int");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lowEnergyDiscoveryTimeout();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_lowEnergyDiscoveryTimeout, doc_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods, "supportedDiscoveryMethods() -> QBluetoothDeviceDiscoveryAgent.DiscoveryMethods");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods*sipRes;

            sipRes = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods( ::QBluetoothDeviceDiscoveryAgent::supportedDiscoveryMethods());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_supportedDiscoveryMethods, doc_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothDeviceDiscoveryAgent(void *, const sipTypeDef *);}
static void *cast_QBluetoothDeviceDiscoveryAgent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothDeviceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceDiscoveryAgent(void *, int);}
static void release_QBluetoothDeviceDiscoveryAgent(void *sipCppV, int)
{
     ::QBluetoothDeviceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothDeviceDiscoveryAgent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceDiscoveryAgent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothDeviceDiscoveryAgent *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothDeviceDiscoveryAgent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothDeviceDiscoveryAgent(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothDeviceDiscoveryAgent[] = {{6, 0, 1}};


static PyMethodDef methods_QBluetoothDeviceDiscoveryAgent[] = {
    {SIP_MLNAME_CAST(sipName_discoveredDevices), meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothDeviceDiscoveryAgent_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothDeviceDiscoveryAgent_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_errorString)},
    {SIP_MLNAME_CAST(sipName_inquiryType), meth_QBluetoothDeviceDiscoveryAgent_inquiryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_inquiryType)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBluetoothDeviceDiscoveryAgent_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_isActive)},
    {SIP_MLNAME_CAST(sipName_lowEnergyDiscoveryTimeout), meth_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout)},
    {SIP_MLNAME_CAST(sipName_setInquiryType), meth_QBluetoothDeviceDiscoveryAgent_setInquiryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_setInquiryType)},
    {SIP_MLNAME_CAST(sipName_setLowEnergyDiscoveryTimeout), meth_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout)},
    {SIP_MLNAME_CAST(sipName_start), meth_QBluetoothDeviceDiscoveryAgent_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBluetoothDeviceDiscoveryAgent_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_stop)},
    {SIP_MLNAME_CAST(sipName_supportedDiscoveryMethods), meth_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods)}
};

static sipEnumMemberDef enummembers_QBluetoothDeviceDiscoveryAgent[] = {
    {sipName_GeneralUnlimitedInquiry, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::GeneralUnlimitedInquiry), 10},
    {sipName_InputOutputError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::InputOutputError), 9},
    {sipName_InvalidBluetoothAdapterError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::InvalidBluetoothAdapterError), 9},
    {sipName_LimitedInquiry, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::LimitedInquiry), 10},
    {sipName_NoError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::NoError), 9},
    {sipName_PoweredOffError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::PoweredOffError), 9},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::UnknownError), 9},
    {sipName_UnsupportedDiscoveryMethod, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::UnsupportedDiscoveryMethod), 9},
    {sipName_UnsupportedPlatformError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::UnsupportedPlatformError), 9},
};

PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent, "\1QBluetoothDeviceDiscoveryAgent(parent: QObject = None)\n"
"QBluetoothDeviceDiscoveryAgent(QBluetoothAddress, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothDeviceDiscoveryAgent[] = {
    {"canceled()", "\1canceled(self)", 0, 0},
    {"finished()", "\1finished(self)", 0, 0},
    {"deviceDiscovered(QBluetoothDeviceInfo)", "\1deviceDiscovered(self, QBluetoothDeviceInfo)", 0, 0},
    {"error(QBluetoothDeviceDiscoveryAgent::Error)", "\1error(self, QBluetoothDeviceDiscoveryAgent.Error)", &methods_QBluetoothDeviceDiscoveryAgent[1], 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QBluetoothDeviceDiscoveryAgent = {
    & ::QBluetoothDeviceDiscoveryAgent::staticMetaObject,
    0,
    signals_QBluetoothDeviceDiscoveryAgent,
    0
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceDiscoveryAgent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceDiscoveryAgent,
        {0},
        &plugin_QBluetoothDeviceDiscoveryAgent
    },
    {
        sipNameNr_QBluetoothDeviceDiscoveryAgent,
        {0, 0, 1},
        11, methods_QBluetoothDeviceDiscoveryAgent,
        9, enummembers_QBluetoothDeviceDiscoveryAgent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothDeviceDiscoveryAgent,
    -1,
    -1,
    supers_QBluetoothDeviceDiscoveryAgent,
    0,
    init_type_QBluetoothDeviceDiscoveryAgent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothDeviceDiscoveryAgent,
    0,
    0,
    0,
    release_QBluetoothDeviceDiscoveryAgent,
    cast_QBluetoothDeviceDiscoveryAgent,
    0,
    0,
    0,
    0,
    0,
    0
};
