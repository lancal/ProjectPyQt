/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothservicediscoveryagent.sip"
#include <qbluetoothservicediscoveryagent.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtBluetooth/sipQtBluetoothQBluetoothServiceDiscoveryAgent.cpp"


class sipQBluetoothServiceDiscoveryAgent : public  ::QBluetoothServiceDiscoveryAgent
{
public:
    sipQBluetoothServiceDiscoveryAgent( ::QObject*);
    sipQBluetoothServiceDiscoveryAgent(const  ::QBluetoothAddress&, ::QObject*);
    virtual ~sipQBluetoothServiceDiscoveryAgent();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothServiceDiscoveryAgent(const sipQBluetoothServiceDiscoveryAgent &);
    sipQBluetoothServiceDiscoveryAgent &operator = (const sipQBluetoothServiceDiscoveryAgent &);

    char sipPyMethods[7];
};

sipQBluetoothServiceDiscoveryAgent::sipQBluetoothServiceDiscoveryAgent( ::QObject*a0):  ::QBluetoothServiceDiscoveryAgent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothServiceDiscoveryAgent::sipQBluetoothServiceDiscoveryAgent(const  ::QBluetoothAddress& a0, ::QObject*a1):  ::QBluetoothServiceDiscoveryAgent(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothServiceDiscoveryAgent::~sipQBluetoothServiceDiscoveryAgent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothServiceDiscoveryAgent::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothServiceDiscoveryAgent);

    return  ::QBluetoothServiceDiscoveryAgent::metaObject();
}

int sipQBluetoothServiceDiscoveryAgent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothServiceDiscoveryAgent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothServiceDiscoveryAgent,_c,_id,_a);

    return _id;
}

void *sipQBluetoothServiceDiscoveryAgent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothServiceDiscoveryAgent, _clname, &sipCpp) ? sipCpp :  ::QBluetoothServiceDiscoveryAgent::qt_metacast(_clname));
}

bool sipQBluetoothServiceDiscoveryAgent::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothServiceDiscoveryAgent::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothServiceDiscoveryAgent::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothServiceDiscoveryAgent::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothServiceDiscoveryAgent::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_isActive, doc_QBluetoothServiceDiscoveryAgent_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_error, "error(self) -> QBluetoothServiceDiscoveryAgent.Error");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothServiceDiscoveryAgent::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothServiceDiscoveryAgent_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_error, doc_QBluetoothServiceDiscoveryAgent_error);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_errorString, doc_QBluetoothServiceDiscoveryAgent_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_discoveredServices, "discoveredServices(self) -> List[QBluetoothServiceInfo]");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_discoveredServices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_discoveredServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            QList< ::QBluetoothServiceInfo>*sipRes;

            sipRes = new QList< ::QBluetoothServiceInfo>(sipCpp->discoveredServices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothServiceInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_discoveredServices, doc_QBluetoothServiceDiscoveryAgent_discoveredServices);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_setUuidFilter, "setUuidFilter(self, Iterable[QBluetoothUuid])\n"
"setUuidFilter(self, QBluetoothUuid)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_setUuidFilter(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_setUuidFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QBluetoothUuid>* a0;
        int a0State = 0;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QList_0100QBluetoothUuid,&a0, &a0State))
        {
            sipCpp->setUuidFilter(*a0);
            sipReleaseType(const_cast<QList< ::QBluetoothUuid> *>(a0),sipType_QList_0100QBluetoothUuid,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QBluetoothUuid* a0;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setUuidFilter(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_setUuidFilter, doc_QBluetoothServiceDiscoveryAgent_setUuidFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_uuidFilter, "uuidFilter(self) -> List[QBluetoothUuid]");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_uuidFilter(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_uuidFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            QList< ::QBluetoothUuid>*sipRes;

            sipRes = new QList< ::QBluetoothUuid>(sipCpp->uuidFilter());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_uuidFilter, doc_QBluetoothServiceDiscoveryAgent_uuidFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_setRemoteAddress, "setRemoteAddress(self, QBluetoothAddress) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_setRemoteAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_setRemoteAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothAddress* a0;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setRemoteAddress(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_setRemoteAddress, doc_QBluetoothServiceDiscoveryAgent_setRemoteAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_remoteAddress, "remoteAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_remoteAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_remoteAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->remoteAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_remoteAddress, doc_QBluetoothServiceDiscoveryAgent_remoteAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_start, "start(self, mode: QBluetoothServiceDiscoveryAgent.DiscoveryMode = QBluetoothServiceDiscoveryAgent.MinimalDiscovery)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QBluetoothServiceDiscoveryAgent::DiscoveryMode a0 = QBluetoothServiceDiscoveryAgent::MinimalDiscovery;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QBluetoothServiceDiscoveryAgent_DiscoveryMode, &a0))
        {
            sipCpp->start(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_start, doc_QBluetoothServiceDiscoveryAgent_start);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_stop, "stop(self)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_stop(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_stop, doc_QBluetoothServiceDiscoveryAgent_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_clear, "clear(self)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_clear(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_clear, doc_QBluetoothServiceDiscoveryAgent_clear);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothServiceDiscoveryAgent(void *, const sipTypeDef *);}
static void *cast_QBluetoothServiceDiscoveryAgent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothServiceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothServiceDiscoveryAgent *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothServiceDiscoveryAgent(void *, int);}
static void release_QBluetoothServiceDiscoveryAgent(void *sipCppV, int)
{
     ::QBluetoothServiceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothServiceDiscoveryAgent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *);}
static void dealloc_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothServiceDiscoveryAgent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothServiceDiscoveryAgent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothServiceDiscoveryAgent *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothServiceDiscoveryAgent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothServiceDiscoveryAgent(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothServiceDiscoveryAgent[] = {{6, 0, 1}};


static PyMethodDef methods_QBluetoothServiceDiscoveryAgent[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QBluetoothServiceDiscoveryAgent_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_clear)},
    {SIP_MLNAME_CAST(sipName_discoveredServices), meth_QBluetoothServiceDiscoveryAgent_discoveredServices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_discoveredServices)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothServiceDiscoveryAgent_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothServiceDiscoveryAgent_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_errorString)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBluetoothServiceDiscoveryAgent_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_isActive)},
    {SIP_MLNAME_CAST(sipName_remoteAddress), meth_QBluetoothServiceDiscoveryAgent_remoteAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_remoteAddress)},
    {SIP_MLNAME_CAST(sipName_setRemoteAddress), meth_QBluetoothServiceDiscoveryAgent_setRemoteAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_setRemoteAddress)},
    {SIP_MLNAME_CAST(sipName_setUuidFilter), meth_QBluetoothServiceDiscoveryAgent_setUuidFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_setUuidFilter)},
    {SIP_MLNAME_CAST(sipName_start), (PyCFunction)meth_QBluetoothServiceDiscoveryAgent_start, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBluetoothServiceDiscoveryAgent_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_stop)},
    {SIP_MLNAME_CAST(sipName_uuidFilter), meth_QBluetoothServiceDiscoveryAgent_uuidFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_uuidFilter)}
};

static sipEnumMemberDef enummembers_QBluetoothServiceDiscoveryAgent[] = {
    {sipName_FullDiscovery, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::FullDiscovery), 36},
    {sipName_InputOutputError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::InputOutputError), 37},
    {sipName_InvalidBluetoothAdapterError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::InvalidBluetoothAdapterError), 37},
    {sipName_MinimalDiscovery, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::MinimalDiscovery), 36},
    {sipName_NoError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::NoError), 37},
    {sipName_PoweredOffError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::PoweredOffError), 37},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::UnknownError), 37},
};

PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent, "\1QBluetoothServiceDiscoveryAgent(parent: QObject = None)\n"
"QBluetoothServiceDiscoveryAgent(QBluetoothAddress, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothServiceDiscoveryAgent[] = {
    {"canceled()", "\1canceled(self)", 0, 0},
    {"finished()", "\1finished(self)", 0, 0},
    {"serviceDiscovered(QBluetoothServiceInfo)", "\1serviceDiscovered(self, QBluetoothServiceInfo)", 0, 0},
    {"error(QBluetoothServiceDiscoveryAgent::Error)", "\1error(self, QBluetoothServiceDiscoveryAgent.Error)", &methods_QBluetoothServiceDiscoveryAgent[2], 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QBluetoothServiceDiscoveryAgent = {
    & ::QBluetoothServiceDiscoveryAgent::staticMetaObject,
    0,
    signals_QBluetoothServiceDiscoveryAgent,
    0
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothServiceDiscoveryAgent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothServiceDiscoveryAgent,
        {0},
        &plugin_QBluetoothServiceDiscoveryAgent
    },
    {
        sipNameNr_QBluetoothServiceDiscoveryAgent,
        {0, 0, 1},
        11, methods_QBluetoothServiceDiscoveryAgent,
        7, enummembers_QBluetoothServiceDiscoveryAgent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothServiceDiscoveryAgent,
    -1,
    -1,
    supers_QBluetoothServiceDiscoveryAgent,
    0,
    init_type_QBluetoothServiceDiscoveryAgent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothServiceDiscoveryAgent,
    0,
    0,
    0,
    release_QBluetoothServiceDiscoveryAgent,
    cast_QBluetoothServiceDiscoveryAgent,
    0,
    0,
    0,
    0,
    0,
    0
};
