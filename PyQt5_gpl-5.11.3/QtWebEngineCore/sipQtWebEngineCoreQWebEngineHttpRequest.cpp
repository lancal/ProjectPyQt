/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineCore.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineCore/qwebenginehttprequest.sip"
#include <qwebenginehttprequest.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineHttpRequest.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineHttpRequest.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineHttpRequest.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineHttpRequest.cpp"
#line 27 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineHttpRequest.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineHttpRequest.cpp"


PyDoc_STRVAR(doc_QWebEngineHttpRequest_postRequest, "postRequest(QUrl, Dict[str, str]) -> QWebEngineHttpRequest");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_postRequest(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_postRequest(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
        const QMap< ::QString, ::QString>* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUrl, &a0, sipType_QMap_0100QString_0100QString,&a1, &a1State))
        {
             ::QWebEngineHttpRequest*sipRes;

            sipRes = new  ::QWebEngineHttpRequest( ::QWebEngineHttpRequest::postRequest(*a0,*a1));
            sipReleaseType(const_cast<QMap< ::QString, ::QString> *>(a1),sipType_QMap_0100QString_0100QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QWebEngineHttpRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_postRequest, doc_QWebEngineHttpRequest_postRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_swap, "swap(self, QWebEngineHttpRequest)");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_swap(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEngineHttpRequest* a0;
         ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QWebEngineHttpRequest, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_swap, doc_QWebEngineHttpRequest_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_method, "method(self) -> QWebEngineHttpRequest.Method");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_method(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_method(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp))
        {
             ::QWebEngineHttpRequest::Method sipRes;

            sipRes = sipCpp->method();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QWebEngineHttpRequest_Method);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_method, doc_QWebEngineHttpRequest_method);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_setMethod, "setMethod(self, QWebEngineHttpRequest.Method)");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_setMethod(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_setMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEngineHttpRequest::Method a0;
         ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QWebEngineHttpRequest_Method, &a0))
        {
            sipCpp->setMethod(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_setMethod, doc_QWebEngineHttpRequest_setMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_url(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_url, doc_QWebEngineHttpRequest_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_setUrl, doc_QWebEngineHttpRequest_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_postData, "postData(self) -> QByteArray");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_postData(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_postData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->postData());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_postData, doc_QWebEngineHttpRequest_postData);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_setPostData, "setPostData(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_setPostData(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_setPostData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setPostData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_setPostData, doc_QWebEngineHttpRequest_setPostData);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_hasHeader, "hasHeader(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_hasHeader(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_hasHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasHeader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_hasHeader, doc_QWebEngineHttpRequest_hasHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_headers, "headers(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_headers(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_headers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp))
        {
            QVector< ::QByteArray>*sipRes;

            sipRes = new QVector< ::QByteArray>(sipCpp->headers());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_headers, doc_QWebEngineHttpRequest_headers);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_header, "header(self, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_header(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->header(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_header, doc_QWebEngineHttpRequest_header);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_setHeader, "setHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setHeader(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_setHeader, doc_QWebEngineHttpRequest_setHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHttpRequest_unsetHeader, "unsetHeader(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QWebEngineHttpRequest_unsetHeader(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHttpRequest_unsetHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QWebEngineHttpRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineHttpRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->unsetHeader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHttpRequest, sipName_unsetHeader, doc_QWebEngineHttpRequest_unsetHeader);

    return NULL;
}


extern "C" {static PyObject *slot_QWebEngineHttpRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QWebEngineHttpRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QWebEngineHttpRequest *sipCpp = reinterpret_cast< ::QWebEngineHttpRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebEngineHttpRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineHttpRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebEngineHttpRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QWebEngineHttpRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebEngineCore, ne_slot, sipType_QWebEngineHttpRequest, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QWebEngineHttpRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QWebEngineHttpRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QWebEngineHttpRequest *sipCpp = reinterpret_cast< ::QWebEngineHttpRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebEngineHttpRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineHttpRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebEngineHttpRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QWebEngineHttpRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebEngineCore, eq_slot, sipType_QWebEngineHttpRequest, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineHttpRequest(void *, int);}
static void release_QWebEngineHttpRequest(void *sipCppV, int)
{
    delete reinterpret_cast< ::QWebEngineHttpRequest *>(sipCppV);
}


extern "C" {static void assign_QWebEngineHttpRequest(void *, SIP_SSIZE_T, void *);}
static void assign_QWebEngineHttpRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QWebEngineHttpRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QWebEngineHttpRequest *>(sipSrc);
}


extern "C" {static void *array_QWebEngineHttpRequest(SIP_SSIZE_T);}
static void *array_QWebEngineHttpRequest(SIP_SSIZE_T sipNrElem)
{
    return new  ::QWebEngineHttpRequest[sipNrElem];
}


extern "C" {static void *copy_QWebEngineHttpRequest(const void *, SIP_SSIZE_T);}
static void *copy_QWebEngineHttpRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QWebEngineHttpRequest(reinterpret_cast<const  ::QWebEngineHttpRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebEngineHttpRequest(sipSimpleWrapper *);}
static void dealloc_QWebEngineHttpRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebEngineHttpRequest(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QWebEngineHttpRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineHttpRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QWebEngineHttpRequest *sipCpp = 0;

    {
        const  ::QUrl& a0def = QUrl();
        const  ::QUrl* a0 = &a0def;
         ::QWebEngineHttpRequest::Method a1 = QWebEngineHttpRequest::Method::Get;

        static const char *sipKwdList[] = {
            sipName_url,
            sipName_method,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9E", sipType_QUrl, &a0, sipType_QWebEngineHttpRequest_Method, &a1))
        {
            sipCpp = new  ::QWebEngineHttpRequest(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QWebEngineHttpRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebEngineHttpRequest, &a0))
        {
            sipCpp = new  ::QWebEngineHttpRequest(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QWebEngineHttpRequest[] = {
    {(void *)slot_QWebEngineHttpRequest___ne__, ne_slot},
    {(void *)slot_QWebEngineHttpRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QWebEngineHttpRequest[] = {
    {SIP_MLNAME_CAST(sipName_hasHeader), meth_QWebEngineHttpRequest_hasHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_hasHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QWebEngineHttpRequest_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_header)},
    {SIP_MLNAME_CAST(sipName_headers), meth_QWebEngineHttpRequest_headers, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_headers)},
    {SIP_MLNAME_CAST(sipName_method), meth_QWebEngineHttpRequest_method, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_method)},
    {SIP_MLNAME_CAST(sipName_postData), meth_QWebEngineHttpRequest_postData, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_postData)},
    {SIP_MLNAME_CAST(sipName_postRequest), meth_QWebEngineHttpRequest_postRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_postRequest)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QWebEngineHttpRequest_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_setHeader)},
    {SIP_MLNAME_CAST(sipName_setMethod), meth_QWebEngineHttpRequest_setMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_setMethod)},
    {SIP_MLNAME_CAST(sipName_setPostData), meth_QWebEngineHttpRequest_setPostData, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_setPostData)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebEngineHttpRequest_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_setUrl)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QWebEngineHttpRequest_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_swap)},
    {SIP_MLNAME_CAST(sipName_unsetHeader), meth_QWebEngineHttpRequest_unsetHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_unsetHeader)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebEngineHttpRequest_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHttpRequest_url)}
};

static sipEnumMemberDef enummembers_QWebEngineHttpRequest[] = {
    {sipName_Get, static_cast<int>( ::QWebEngineHttpRequest::Get), 5},
    {sipName_Post, static_cast<int>( ::QWebEngineHttpRequest::Post), 5},
};

PyDoc_STRVAR(doc_QWebEngineHttpRequest, "\1QWebEngineHttpRequest(url: QUrl = QUrl(), method: QWebEngineHttpRequest.Method = QWebEngineHttpRequest.Method.Get)\n"
"QWebEngineHttpRequest(QWebEngineHttpRequest)");


static pyqt5ClassPluginDef plugin_QWebEngineHttpRequest = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWebEngineCore_QWebEngineHttpRequest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineHttpRequest,
        {0},
        &plugin_QWebEngineHttpRequest
    },
    {
        sipNameNr_QWebEngineHttpRequest,
        {0, 0, 1},
        13, methods_QWebEngineHttpRequest,
        2, enummembers_QWebEngineHttpRequest,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineHttpRequest,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QWebEngineHttpRequest,
    init_type_QWebEngineHttpRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineHttpRequest,
    assign_QWebEngineHttpRequest,
    array_QWebEngineHttpRequest,
    copy_QWebEngineHttpRequest,
    release_QWebEngineHttpRequest,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
