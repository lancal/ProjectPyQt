/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineCore.h"

#line 38 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngineCore/qwebengineregisterprotocolhandlerrequest.sip"
#include <qwebengineregisterprotocolhandlerrequest.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineRegisterProtocolHandlerRequest.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineRegisterProtocolHandlerRequest.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngineCore/sipQtWebEngineCoreQWebEngineRegisterProtocolHandlerRequest.cpp"


PyDoc_STRVAR(doc_QWebEngineRegisterProtocolHandlerRequest_accept, "accept(self)");

extern "C" {static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_accept(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEngineRegisterProtocolHandlerRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineRegisterProtocolHandlerRequest, &sipCpp))
        {
            sipCpp->accept();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineRegisterProtocolHandlerRequest, sipName_accept, doc_QWebEngineRegisterProtocolHandlerRequest_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineRegisterProtocolHandlerRequest_reject, "reject(self)");

extern "C" {static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_reject(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_reject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEngineRegisterProtocolHandlerRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineRegisterProtocolHandlerRequest, &sipCpp))
        {
            sipCpp->reject();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineRegisterProtocolHandlerRequest, sipName_reject, doc_QWebEngineRegisterProtocolHandlerRequest_reject);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineRegisterProtocolHandlerRequest_origin, "origin(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_origin(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_origin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineRegisterProtocolHandlerRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineRegisterProtocolHandlerRequest, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->origin());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineRegisterProtocolHandlerRequest, sipName_origin, doc_QWebEngineRegisterProtocolHandlerRequest_origin);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineRegisterProtocolHandlerRequest_scheme, "scheme(self) -> str");

extern "C" {static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_scheme(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineRegisterProtocolHandlerRequest_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineRegisterProtocolHandlerRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineRegisterProtocolHandlerRequest, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->scheme());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineRegisterProtocolHandlerRequest, sipName_scheme, doc_QWebEngineRegisterProtocolHandlerRequest_scheme);

    return NULL;
}


extern "C" {static PyObject *slot_QWebEngineRegisterProtocolHandlerRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QWebEngineRegisterProtocolHandlerRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QWebEngineRegisterProtocolHandlerRequest *sipCpp = reinterpret_cast< ::QWebEngineRegisterProtocolHandlerRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebEngineRegisterProtocolHandlerRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineRegisterProtocolHandlerRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebEngineRegisterProtocolHandlerRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QWebEngineRegisterProtocolHandlerRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebEngineCore, ne_slot, sipType_QWebEngineRegisterProtocolHandlerRequest, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QWebEngineRegisterProtocolHandlerRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QWebEngineRegisterProtocolHandlerRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QWebEngineRegisterProtocolHandlerRequest *sipCpp = reinterpret_cast< ::QWebEngineRegisterProtocolHandlerRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebEngineRegisterProtocolHandlerRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QWebEngineRegisterProtocolHandlerRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebEngineRegisterProtocolHandlerRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QWebEngineRegisterProtocolHandlerRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebEngineCore, eq_slot, sipType_QWebEngineRegisterProtocolHandlerRequest, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineRegisterProtocolHandlerRequest(void *, int);}
static void release_QWebEngineRegisterProtocolHandlerRequest(void *sipCppV, int)
{
    delete reinterpret_cast< ::QWebEngineRegisterProtocolHandlerRequest *>(sipCppV);
}


extern "C" {static void assign_QWebEngineRegisterProtocolHandlerRequest(void *, SIP_SSIZE_T, void *);}
static void assign_QWebEngineRegisterProtocolHandlerRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QWebEngineRegisterProtocolHandlerRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QWebEngineRegisterProtocolHandlerRequest *>(sipSrc);
}


extern "C" {static void *array_QWebEngineRegisterProtocolHandlerRequest(SIP_SSIZE_T);}
static void *array_QWebEngineRegisterProtocolHandlerRequest(SIP_SSIZE_T sipNrElem)
{
    return new  ::QWebEngineRegisterProtocolHandlerRequest[sipNrElem];
}


extern "C" {static void *copy_QWebEngineRegisterProtocolHandlerRequest(const void *, SIP_SSIZE_T);}
static void *copy_QWebEngineRegisterProtocolHandlerRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QWebEngineRegisterProtocolHandlerRequest(reinterpret_cast<const  ::QWebEngineRegisterProtocolHandlerRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebEngineRegisterProtocolHandlerRequest(sipSimpleWrapper *);}
static void dealloc_QWebEngineRegisterProtocolHandlerRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebEngineRegisterProtocolHandlerRequest(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QWebEngineRegisterProtocolHandlerRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineRegisterProtocolHandlerRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QWebEngineRegisterProtocolHandlerRequest *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QWebEngineRegisterProtocolHandlerRequest();

            return sipCpp;
        }
    }

    {
        const  ::QWebEngineRegisterProtocolHandlerRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebEngineRegisterProtocolHandlerRequest, &a0))
        {
            sipCpp = new  ::QWebEngineRegisterProtocolHandlerRequest(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QWebEngineRegisterProtocolHandlerRequest[] = {
    {(void *)slot_QWebEngineRegisterProtocolHandlerRequest___ne__, ne_slot},
    {(void *)slot_QWebEngineRegisterProtocolHandlerRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QWebEngineRegisterProtocolHandlerRequest[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QWebEngineRegisterProtocolHandlerRequest_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineRegisterProtocolHandlerRequest_accept)},
    {SIP_MLNAME_CAST(sipName_origin), meth_QWebEngineRegisterProtocolHandlerRequest_origin, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineRegisterProtocolHandlerRequest_origin)},
    {SIP_MLNAME_CAST(sipName_reject), meth_QWebEngineRegisterProtocolHandlerRequest_reject, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineRegisterProtocolHandlerRequest_reject)},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QWebEngineRegisterProtocolHandlerRequest_scheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineRegisterProtocolHandlerRequest_scheme)}
};

PyDoc_STRVAR(doc_QWebEngineRegisterProtocolHandlerRequest, "\1QWebEngineRegisterProtocolHandlerRequest()\n"
"QWebEngineRegisterProtocolHandlerRequest(QWebEngineRegisterProtocolHandlerRequest)");


static pyqt5ClassPluginDef plugin_QWebEngineRegisterProtocolHandlerRequest = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWebEngineCore_QWebEngineRegisterProtocolHandlerRequest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineRegisterProtocolHandlerRequest,
        {0},
        &plugin_QWebEngineRegisterProtocolHandlerRequest
    },
    {
        sipNameNr_QWebEngineRegisterProtocolHandlerRequest,
        {0, 0, 1},
        4, methods_QWebEngineRegisterProtocolHandlerRequest,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineRegisterProtocolHandlerRequest,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QWebEngineRegisterProtocolHandlerRequest,
    init_type_QWebEngineRegisterProtocolHandlerRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineRegisterProtocolHandlerRequest,
    assign_QWebEngineRegisterProtocolHandlerRequest,
    array_QWebEngineRegisterProtocolHandlerRequest,
    copy_QWebEngineRegisterProtocolHandlerRequest,
    release_QWebEngineRegisterProtocolHandlerRequest,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
