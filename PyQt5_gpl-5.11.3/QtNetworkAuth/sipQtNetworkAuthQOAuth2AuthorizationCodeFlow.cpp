/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetworkAuth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qoauth2authorizationcodeflow.sip"
#include <qoauth2authorizationcodeflow.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 24 "sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 45 "sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth.sip"
#include <qabstractoauth.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauthreplyhandler.sip"
#include <qabstractoauthreplyhandler.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth2AuthorizationCodeFlow.cpp"


class sipQOAuth2AuthorizationCodeFlow : public  ::QOAuth2AuthorizationCodeFlow
{
public:
    sipQOAuth2AuthorizationCodeFlow( ::QObject*);
    sipQOAuth2AuthorizationCodeFlow( ::QNetworkAccessManager*, ::QObject*);
    sipQOAuth2AuthorizationCodeFlow(const  ::QString&, ::QNetworkAccessManager*, ::QObject*);
    sipQOAuth2AuthorizationCodeFlow(const  ::QUrl&,const  ::QUrl&, ::QNetworkAccessManager*, ::QObject*);
    sipQOAuth2AuthorizationCodeFlow(const  ::QString&,const  ::QUrl&,const  ::QUrl&, ::QNetworkAccessManager*, ::QObject*);
    virtual ~sipQOAuth2AuthorizationCodeFlow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void resourceOwnerAuthorization(const  ::QUrl&,const  ::QVariantMap&);
    void grant();
     ::QNetworkReply* deleteResource(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* put(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* post(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* get(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* head(const  ::QUrl&,const  ::QVariantMap&);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);
     ::QUrl createAuthenticatedUrl(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* post(const  ::QUrl&,const  ::QByteArray&);
     ::QNetworkReply* post(const  ::QUrl&, ::QHttpMultiPart*);
     ::QNetworkReply* put(const  ::QUrl&,const  ::QByteArray&);
     ::QNetworkReply* put(const  ::QUrl&, ::QHttpMultiPart*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOAuth2AuthorizationCodeFlow(const sipQOAuth2AuthorizationCodeFlow &);
    sipQOAuth2AuthorizationCodeFlow &operator = (const sipQOAuth2AuthorizationCodeFlow &);

    char sipPyMethods[19];
};

sipQOAuth2AuthorizationCodeFlow::sipQOAuth2AuthorizationCodeFlow( ::QObject*a0):  ::QOAuth2AuthorizationCodeFlow(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth2AuthorizationCodeFlow::sipQOAuth2AuthorizationCodeFlow( ::QNetworkAccessManager*a0, ::QObject*a1):  ::QOAuth2AuthorizationCodeFlow(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth2AuthorizationCodeFlow::sipQOAuth2AuthorizationCodeFlow(const  ::QString& a0, ::QNetworkAccessManager*a1, ::QObject*a2):  ::QOAuth2AuthorizationCodeFlow(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth2AuthorizationCodeFlow::sipQOAuth2AuthorizationCodeFlow(const  ::QUrl& a0,const  ::QUrl& a1, ::QNetworkAccessManager*a2, ::QObject*a3):  ::QOAuth2AuthorizationCodeFlow(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth2AuthorizationCodeFlow::sipQOAuth2AuthorizationCodeFlow(const  ::QString& a0,const  ::QUrl& a1,const  ::QUrl& a2, ::QNetworkAccessManager*a3, ::QObject*a4):  ::QOAuth2AuthorizationCodeFlow(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth2AuthorizationCodeFlow::~sipQOAuth2AuthorizationCodeFlow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOAuth2AuthorizationCodeFlow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetworkAuth_qt_metaobject(sipPySelf,sipType_QOAuth2AuthorizationCodeFlow);

    return  ::QOAuth2AuthorizationCodeFlow::metaObject();
}

int sipQOAuth2AuthorizationCodeFlow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOAuth2AuthorizationCodeFlow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetworkAuth_qt_metacall(sipPySelf,sipType_QOAuth2AuthorizationCodeFlow,_c,_id,_a);

    return _id;
}

void *sipQOAuth2AuthorizationCodeFlow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetworkAuth_qt_metacast(sipPySelf, sipType_QOAuth2AuthorizationCodeFlow, _clname, &sipCpp) ? sipCpp :  ::QOAuth2AuthorizationCodeFlow::qt_metacast(_clname));
}

void sipQOAuth2AuthorizationCodeFlow::resourceOwnerAuthorization(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_resourceOwnerAuthorization);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::resourceOwnerAuthorization(a0,a1);
        return;
    }

    extern void sipVH_QtNetworkAuth_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    sipVH_QtNetworkAuth_8(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOAuth2AuthorizationCodeFlow::grant()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_grant);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::grant();
        return;
    }

    extern void sipVH_QtNetworkAuth_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetworkAuth_7(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::deleteResource(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_deleteResource);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::deleteResource(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::put(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::post(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::get(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_get);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::get(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::head(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_head);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::head(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQOAuth2AuthorizationCodeFlow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::event(a0);

    extern bool sipVH_QtNetworkAuth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetworkAuth_5(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOAuth2AuthorizationCodeFlow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::eventFilter(a0,a1);

    extern bool sipVH_QtNetworkAuth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetworkAuth_4(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOAuth2AuthorizationCodeFlow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetworkAuth_3(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth2AuthorizationCodeFlow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetworkAuth_2(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth2AuthorizationCodeFlow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetworkAuth_1(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth2AuthorizationCodeFlow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetworkAuth_0(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth2AuthorizationCodeFlow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOAuth2AuthorizationCodeFlow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetworkAuth_0(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QUrl sipQOAuth2AuthorizationCodeFlow::createAuthenticatedUrl(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_createAuthenticatedUrl);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::createAuthenticatedUrl(a0,a1);

    extern  ::QUrl sipVH_QtNetworkAuth_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_9(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::post(const  ::QUrl& a0,const  ::QByteArray& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QByteArray&);

    return sipVH_QtNetworkAuth_10(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::post(const  ::QUrl& a0, ::QHttpMultiPart*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&, ::QHttpMultiPart*);

    return sipVH_QtNetworkAuth_11(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::put(const  ::QUrl& a0,const  ::QByteArray& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QByteArray&);

    return sipVH_QtNetworkAuth_10(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth2AuthorizationCodeFlow::put(const  ::QUrl& a0, ::QHttpMultiPart*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QOAuth2AuthorizationCodeFlow::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&, ::QHttpMultiPart*);

    return sipVH_QtNetworkAuth_11(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_accessTokenUrl, "accessTokenUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_accessTokenUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_accessTokenUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth2AuthorizationCodeFlow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->accessTokenUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_accessTokenUrl, doc_QOAuth2AuthorizationCodeFlow_accessTokenUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_setAccessTokenUrl, "setAccessTokenUrl(self, QUrl)");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_setAccessTokenUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_setAccessTokenUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QOAuth2AuthorizationCodeFlow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setAccessTokenUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_setAccessTokenUrl, doc_QOAuth2AuthorizationCodeFlow_setAccessTokenUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_grant, "grant(self)");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_grant(PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_grant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOAuth2AuthorizationCodeFlow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOAuth2AuthorizationCodeFlow::grant() : sipCpp->grant());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_grant, doc_QOAuth2AuthorizationCodeFlow_grant);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_refreshAccessToken, "refreshAccessToken(self)");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_refreshAccessToken(PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_refreshAccessToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOAuth2AuthorizationCodeFlow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp))
        {
            sipCpp->refreshAccessToken();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_refreshAccessToken, doc_QOAuth2AuthorizationCodeFlow_refreshAccessToken);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_buildAuthenticateUrl, "buildAuthenticateUrl(self, parameters: Dict[str, Any] = {}) -> QUrl");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_buildAuthenticateUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_buildAuthenticateUrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantMap& a0def = QVariantMap();
        const  ::QVariantMap* a0 = &a0def;
        int a0State = 0;
         ::QOAuth2AuthorizationCodeFlow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "p|J1", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp, sipType_QVariantMap,&a0, &a0State))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->buildAuthenticateUrl(*a0));
            sipReleaseType(const_cast< ::QVariantMap *>(a0),sipType_QVariantMap,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_buildAuthenticateUrl, doc_QOAuth2AuthorizationCodeFlow_buildAuthenticateUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_requestAccessToken, "requestAccessToken(self, str)");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_requestAccessToken(PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_requestAccessToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth2AuthorizationCodeFlow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->requestAccessToken(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_requestAccessToken, doc_QOAuth2AuthorizationCodeFlow_requestAccessToken);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow_resourceOwnerAuthorization, "resourceOwnerAuthorization(self, QUrl, parameters: Dict[str, Any] = {})");

extern "C" {static PyObject *meth_QOAuth2AuthorizationCodeFlow_resourceOwnerAuthorization(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth2AuthorizationCodeFlow_resourceOwnerAuthorization(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QOAuth2AuthorizationCodeFlow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ9|J1", &sipSelf, sipType_QOAuth2AuthorizationCodeFlow, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QOAuth2AuthorizationCodeFlow::resourceOwnerAuthorization(*a0,*a1) : sipCpp->resourceOwnerAuthorization(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth2AuthorizationCodeFlow, sipName_resourceOwnerAuthorization, doc_QOAuth2AuthorizationCodeFlow_resourceOwnerAuthorization);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOAuth2AuthorizationCodeFlow(void *, const sipTypeDef *);}
static void *cast_QOAuth2AuthorizationCodeFlow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOAuth2AuthorizationCodeFlow *sipCpp = reinterpret_cast< ::QOAuth2AuthorizationCodeFlow *>(sipCppV);

    if (targetType == sipType_QAbstractOAuth2)
        return static_cast< ::QAbstractOAuth2 *>(sipCpp);

    if (targetType == sipType_QAbstractOAuth)
        return static_cast< ::QAbstractOAuth *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOAuth2AuthorizationCodeFlow(void *, int);}
static void release_QOAuth2AuthorizationCodeFlow(void *sipCppV, int)
{
     ::QOAuth2AuthorizationCodeFlow *sipCpp = reinterpret_cast< ::QOAuth2AuthorizationCodeFlow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOAuth2AuthorizationCodeFlow(sipSimpleWrapper *);}
static void dealloc_QOAuth2AuthorizationCodeFlow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOAuth2AuthorizationCodeFlow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOAuth2AuthorizationCodeFlow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOAuth2AuthorizationCodeFlow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOAuth2AuthorizationCodeFlow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOAuth2AuthorizationCodeFlow *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOAuth2AuthorizationCodeFlow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QNetworkAccessManager* a0;
        PyObject *a0Keep;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8|JH", &a0Keep, sipType_QNetworkAccessManager, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQOAuth2AuthorizationCodeFlow(a0,a1);

            sipKeepReference((PyObject *)sipSelf, -6, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkAccessManager* a1;
        PyObject *a1Keep;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1@J8|JH", sipType_QString,&a0, &a0State, &a1Keep, sipType_QNetworkAccessManager, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQOAuth2AuthorizationCodeFlow(*a0,a1,a2);

            sipKeepReference((PyObject *)sipSelf, -7, a1Keep);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
        const  ::QUrl* a1;
         ::QNetworkAccessManager* a2;
        PyObject *a2Keep;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9@J8|JH", sipType_QUrl, &a0, sipType_QUrl, &a1, &a2Keep, sipType_QNetworkAccessManager, &a2, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQOAuth2AuthorizationCodeFlow(*a0,*a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, -8, a2Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl* a1;
        const  ::QUrl* a2;
         ::QNetworkAccessManager* a3;
        PyObject *a3Keep;
         ::QObject* a4 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9J9@J8|JH", sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QUrl, &a2, &a3Keep, sipType_QNetworkAccessManager, &a3, sipType_QObject, &a4, sipOwner))
        {
            sipCpp = new sipQOAuth2AuthorizationCodeFlow(*a0,*a1,*a2,a3,a4);

            sipKeepReference((PyObject *)sipSelf, -9, a3Keep);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOAuth2AuthorizationCodeFlow[] = {{1, 255, 1}};


static PyMethodDef methods_QOAuth2AuthorizationCodeFlow[] = {
    {SIP_MLNAME_CAST(sipName_accessTokenUrl), meth_QOAuth2AuthorizationCodeFlow_accessTokenUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_accessTokenUrl)},
    {SIP_MLNAME_CAST(sipName_buildAuthenticateUrl), (PyCFunction)meth_QOAuth2AuthorizationCodeFlow_buildAuthenticateUrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_buildAuthenticateUrl)},
    {SIP_MLNAME_CAST(sipName_grant), meth_QOAuth2AuthorizationCodeFlow_grant, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_grant)},
    {SIP_MLNAME_CAST(sipName_refreshAccessToken), meth_QOAuth2AuthorizationCodeFlow_refreshAccessToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_refreshAccessToken)},
    {SIP_MLNAME_CAST(sipName_requestAccessToken), meth_QOAuth2AuthorizationCodeFlow_requestAccessToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_requestAccessToken)},
    {SIP_MLNAME_CAST(sipName_resourceOwnerAuthorization), (PyCFunction)meth_QOAuth2AuthorizationCodeFlow_resourceOwnerAuthorization, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_resourceOwnerAuthorization)},
    {SIP_MLNAME_CAST(sipName_setAccessTokenUrl), meth_QOAuth2AuthorizationCodeFlow_setAccessTokenUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth2AuthorizationCodeFlow_setAccessTokenUrl)}
};

PyDoc_STRVAR(doc_QOAuth2AuthorizationCodeFlow, "\1QOAuth2AuthorizationCodeFlow(parent: QObject = None)\n"
"QOAuth2AuthorizationCodeFlow(QNetworkAccessManager, parent: QObject = None)\n"
"QOAuth2AuthorizationCodeFlow(str, QNetworkAccessManager, parent: QObject = None)\n"
"QOAuth2AuthorizationCodeFlow(QUrl, QUrl, QNetworkAccessManager, parent: QObject = None)\n"
"QOAuth2AuthorizationCodeFlow(str, QUrl, QUrl, QNetworkAccessManager, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOAuth2AuthorizationCodeFlow[] = {
    {"accessTokenUrlChanged(QUrl)", "\1accessTokenUrlChanged(self, QUrl)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QOAuth2AuthorizationCodeFlow = {
    & ::QOAuth2AuthorizationCodeFlow::staticMetaObject,
    0,
    signals_QOAuth2AuthorizationCodeFlow,
    0
};


sipClassTypeDef sipTypeDef_QtNetworkAuth_QOAuth2AuthorizationCodeFlow = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOAuth2AuthorizationCodeFlow,
        {0},
        &plugin_QOAuth2AuthorizationCodeFlow
    },
    {
        sipNameNr_QOAuth2AuthorizationCodeFlow,
        {0, 0, 1},
        7, methods_QOAuth2AuthorizationCodeFlow,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOAuth2AuthorizationCodeFlow,
    -1,
    -1,
    supers_QOAuth2AuthorizationCodeFlow,
    0,
    init_type_QOAuth2AuthorizationCodeFlow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOAuth2AuthorizationCodeFlow,
    0,
    0,
    0,
    release_QOAuth2AuthorizationCodeFlow,
    cast_QOAuth2AuthorizationCodeFlow,
    0,
    0,
    0,
    0,
    0,
    0
};
