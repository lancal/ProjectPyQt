/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetworkAuth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qoauth1signature.sip"
#include <qoauth1signature.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"
#line 24 "sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"
#line 26 "sip/QtCore/qurlquery.sip"
#include <qurlquery.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1Signature.cpp"


PyDoc_STRVAR(doc_QOAuth1Signature_httpRequestMethod, "httpRequestMethod(self) -> QOAuth1Signature.HttpRequestMethod");

extern "C" {static PyObject *meth_QOAuth1Signature_httpRequestMethod(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_httpRequestMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QOAuth1Signature::HttpRequestMethod sipRes;

            sipRes = sipCpp->httpRequestMethod();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOAuth1Signature_HttpRequestMethod);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_httpRequestMethod, doc_QOAuth1Signature_httpRequestMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_setHttpRequestMethod, "setHttpRequestMethod(self, QOAuth1Signature.HttpRequestMethod)");

extern "C" {static PyObject *meth_QOAuth1Signature_setHttpRequestMethod(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_setHttpRequestMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOAuth1Signature::HttpRequestMethod a0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QOAuth1Signature_HttpRequestMethod, &a0))
        {
            sipCpp->setHttpRequestMethod(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_setHttpRequestMethod, doc_QOAuth1Signature_setHttpRequestMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QOAuth1Signature_url(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_url, doc_QOAuth1Signature_url);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QOAuth1Signature_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_setUrl, doc_QOAuth1Signature_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_parameters, "parameters(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QOAuth1Signature_parameters(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_parameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QVariantMap*sipRes;

            sipRes = new  ::QVariantMap(sipCpp->parameters());

            return sipConvertFromNewType(sipRes,sipType_QVariantMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_parameters, doc_QOAuth1Signature_parameters);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_setParameters, "setParameters(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QOAuth1Signature_setParameters(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_setParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantMap* a0;
        int a0State = 0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QVariantMap,&a0, &a0State))
        {
            sipCpp->setParameters(*a0);
            sipReleaseType(const_cast< ::QVariantMap *>(a0),sipType_QVariantMap,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_setParameters, doc_QOAuth1Signature_setParameters);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_addRequestBody, "addRequestBody(self, QUrlQuery)");

extern "C" {static PyObject *meth_QOAuth1Signature_addRequestBody(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_addRequestBody(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrlQuery* a0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QUrlQuery, &a0))
        {
            sipCpp->addRequestBody(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_addRequestBody, doc_QOAuth1Signature_addRequestBody);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_insert, "insert(self, str, Any)");

extern "C" {static PyObject *meth_QOAuth1Signature_insert(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->insert(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_insert, doc_QOAuth1Signature_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_keys, "keys(self) -> List[str]");

extern "C" {static PyObject *meth_QOAuth1Signature_keys(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_keys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
            QList< ::QString>*sipRes;

            sipRes = new QList< ::QString>(sipCpp->keys());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_keys, doc_QOAuth1Signature_keys);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_take, "take(self, str) -> Any");

extern "C" {static PyObject *meth_QOAuth1Signature_take(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_take(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->take(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_take, doc_QOAuth1Signature_take);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_value, "value(self, str, defaultValue: Any = None) -> Any");

extern "C" {static PyObject *meth_QOAuth1Signature_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        const  ::QOAuth1Signature *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->value(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_value, doc_QOAuth1Signature_value);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_clientSharedKey, "clientSharedKey(self) -> str");

extern "C" {static PyObject *meth_QOAuth1Signature_clientSharedKey(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_clientSharedKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->clientSharedKey());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_clientSharedKey, doc_QOAuth1Signature_clientSharedKey);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_setClientSharedKey, "setClientSharedKey(self, str)");

extern "C" {static PyObject *meth_QOAuth1Signature_setClientSharedKey(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_setClientSharedKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setClientSharedKey(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_setClientSharedKey, doc_QOAuth1Signature_setClientSharedKey);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_tokenSecret, "tokenSecret(self) -> str");

extern "C" {static PyObject *meth_QOAuth1Signature_tokenSecret(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_tokenSecret(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tokenSecret());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_tokenSecret, doc_QOAuth1Signature_tokenSecret);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_setTokenSecret, "setTokenSecret(self, str)");

extern "C" {static PyObject *meth_QOAuth1Signature_setTokenSecret(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_setTokenSecret(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTokenSecret(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_setTokenSecret, doc_QOAuth1Signature_setTokenSecret);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_hmacSha1, "hmacSha1(self) -> QByteArray");

extern "C" {static PyObject *meth_QOAuth1Signature_hmacSha1(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_hmacSha1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->hmacSha1());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_hmacSha1, doc_QOAuth1Signature_hmacSha1);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_rsaSha1, "rsaSha1(self) -> QByteArray");

extern "C" {static PyObject *meth_QOAuth1Signature_rsaSha1(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_rsaSha1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rsaSha1());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_rsaSha1, doc_QOAuth1Signature_rsaSha1);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_plainText, "plainText(self) -> QByteArray\n"
"plainText(str, str) -> QByteArray");

extern "C" {static PyObject *meth_QOAuth1Signature_plainText(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_plainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1Signature, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->plainText());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QOAuth1Signature::plainText(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_plainText, doc_QOAuth1Signature_plainText);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1Signature_swap, "swap(self, QOAuth1Signature)");

extern "C" {static PyObject *meth_QOAuth1Signature_swap(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1Signature_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOAuth1Signature* a0;
         ::QOAuth1Signature *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOAuth1Signature, &sipCpp, sipType_QOAuth1Signature, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1Signature, sipName_swap, doc_QOAuth1Signature_swap);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOAuth1Signature(void *, int);}
static void release_QOAuth1Signature(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOAuth1Signature *>(sipCppV);
}


extern "C" {static void assign_QOAuth1Signature(void *, SIP_SSIZE_T, void *);}
static void assign_QOAuth1Signature(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOAuth1Signature *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOAuth1Signature *>(sipSrc);
}


extern "C" {static void *array_QOAuth1Signature(SIP_SSIZE_T);}
static void *array_QOAuth1Signature(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOAuth1Signature[sipNrElem];
}


extern "C" {static void *copy_QOAuth1Signature(const void *, SIP_SSIZE_T);}
static void *copy_QOAuth1Signature(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOAuth1Signature(reinterpret_cast<const  ::QOAuth1Signature *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOAuth1Signature(sipSimpleWrapper *);}
static void dealloc_QOAuth1Signature(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOAuth1Signature(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOAuth1Signature(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOAuth1Signature(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOAuth1Signature *sipCpp = 0;

    {
        const  ::QUrl& a0def = QUrl();
        const  ::QUrl* a0 = &a0def;
         ::QOAuth1Signature::HttpRequestMethod a1 = QOAuth1Signature::HttpRequestMethod::Post;
        const  ::QVariantMap& a2def = QVariantMap();
        const  ::QVariantMap* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            sipName_url,
            sipName_method,
            sipName_parameters,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9EJ1", sipType_QUrl, &a0, sipType_QOAuth1Signature_HttpRequestMethod, &a1, sipType_QVariantMap,&a2, &a2State))
        {
            sipCpp = new  ::QOAuth1Signature(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QVariantMap *>(a2),sipType_QVariantMap,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QOAuth1Signature::HttpRequestMethod a3 = QOAuth1Signature::HttpRequestMethod::Post;
        const  ::QVariantMap& a4def = QVariantMap();
        const  ::QVariantMap* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_method,
            sipName_parameters,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1J1|EJ1", sipType_QUrl, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QOAuth1Signature_HttpRequestMethod, &a3, sipType_QVariantMap,&a4, &a4State))
        {
            sipCpp = new  ::QOAuth1Signature(*a0,*a1,*a2,a3,*a4);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QVariantMap *>(a4),sipType_QVariantMap,a4State);

            return sipCpp;
        }
    }

    {
        const  ::QOAuth1Signature* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QOAuth1Signature, &a0))
        {
            sipCpp = new  ::QOAuth1Signature(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QOAuth1Signature[] = {
    {SIP_MLNAME_CAST(sipName_addRequestBody), meth_QOAuth1Signature_addRequestBody, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_addRequestBody)},
    {SIP_MLNAME_CAST(sipName_clientSharedKey), meth_QOAuth1Signature_clientSharedKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_clientSharedKey)},
    {SIP_MLNAME_CAST(sipName_hmacSha1), meth_QOAuth1Signature_hmacSha1, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_hmacSha1)},
    {SIP_MLNAME_CAST(sipName_httpRequestMethod), meth_QOAuth1Signature_httpRequestMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_httpRequestMethod)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QOAuth1Signature_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_insert)},
    {SIP_MLNAME_CAST(sipName_keys), meth_QOAuth1Signature_keys, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_keys)},
    {SIP_MLNAME_CAST(sipName_parameters), meth_QOAuth1Signature_parameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_parameters)},
    {SIP_MLNAME_CAST(sipName_plainText), meth_QOAuth1Signature_plainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_plainText)},
    {SIP_MLNAME_CAST(sipName_rsaSha1), meth_QOAuth1Signature_rsaSha1, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_rsaSha1)},
    {SIP_MLNAME_CAST(sipName_setClientSharedKey), meth_QOAuth1Signature_setClientSharedKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_setClientSharedKey)},
    {SIP_MLNAME_CAST(sipName_setHttpRequestMethod), meth_QOAuth1Signature_setHttpRequestMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_setHttpRequestMethod)},
    {SIP_MLNAME_CAST(sipName_setParameters), meth_QOAuth1Signature_setParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_setParameters)},
    {SIP_MLNAME_CAST(sipName_setTokenSecret), meth_QOAuth1Signature_setTokenSecret, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_setTokenSecret)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QOAuth1Signature_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_setUrl)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QOAuth1Signature_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_swap)},
    {SIP_MLNAME_CAST(sipName_take), meth_QOAuth1Signature_take, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_take)},
    {SIP_MLNAME_CAST(sipName_tokenSecret), meth_QOAuth1Signature_tokenSecret, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_tokenSecret)},
    {SIP_MLNAME_CAST(sipName_url), meth_QOAuth1Signature_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1Signature_url)},
    {SIP_MLNAME_CAST(sipName_value), (PyCFunction)meth_QOAuth1Signature_value, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1Signature_value)}
};

static sipEnumMemberDef enummembers_QOAuth1Signature[] = {
    {sipName_Custom, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Custom), 11},
    {sipName_Delete, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Delete), 11},
    {sipName_Get, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Get), 11},
    {sipName_Head, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Head), 11},
    {sipName_Post, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Post), 11},
    {sipName_Put, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Put), 11},
    {sipName_Unknown, static_cast<int>(::QOAuth1Signature::HttpRequestMethod::Unknown), 11},
};

PyDoc_STRVAR(doc_QOAuth1Signature, "\1QOAuth1Signature(url: QUrl = QUrl(), method: QOAuth1Signature.HttpRequestMethod = QOAuth1Signature.HttpRequestMethod.Post, parameters: Dict[str, Any] = {})\n"
"QOAuth1Signature(QUrl, str, str, method: QOAuth1Signature.HttpRequestMethod = QOAuth1Signature.HttpRequestMethod.Post, parameters: Dict[str, Any] = {})\n"
"QOAuth1Signature(QOAuth1Signature)");


static pyqt5ClassPluginDef plugin_QOAuth1Signature = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtNetworkAuth_QOAuth1Signature = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOAuth1Signature,
        {0},
        &plugin_QOAuth1Signature
    },
    {
        sipNameNr_QOAuth1Signature,
        {0, 0, 1},
        19, methods_QOAuth1Signature,
        7, enummembers_QOAuth1Signature,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOAuth1Signature,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QOAuth1Signature,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOAuth1Signature,
    assign_QOAuth1Signature,
    array_QOAuth1Signature,
    copy_QOAuth1Signature,
    release_QOAuth1Signature,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
