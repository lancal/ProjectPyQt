/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetworkAuth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qoauth1.sip"
#include <qoauth1.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 24 "sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 28 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth.sip"
#include <qabstractoauth.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauthreplyhandler.sip"
#include <qabstractoauthreplyhandler.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQOAuth1.cpp"


class sipQOAuth1 : public  ::QOAuth1
{
public:
    sipQOAuth1( ::QObject*);
    sipQOAuth1( ::QNetworkAccessManager*, ::QObject*);
    sipQOAuth1(const  ::QString&,const  ::QString&, ::QNetworkAccessManager*, ::QObject*);
    virtual ~sipQOAuth1();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QNetworkReply* head(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* get(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* post(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* put(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* deleteResource(const  ::QUrl&,const  ::QVariantMap&);
    void grant();
    void resourceOwnerAuthorization(const  ::QUrl&,const  ::QVariantMap&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOAuth1(const sipQOAuth1 &);
    sipQOAuth1 &operator = (const sipQOAuth1 &);

    char sipPyMethods[14];
};

sipQOAuth1::sipQOAuth1( ::QObject*a0):  ::QOAuth1(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth1::sipQOAuth1( ::QNetworkAccessManager*a0, ::QObject*a1):  ::QOAuth1(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth1::sipQOAuth1(const  ::QString& a0,const  ::QString& a1, ::QNetworkAccessManager*a2, ::QObject*a3):  ::QOAuth1(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOAuth1::~sipQOAuth1()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOAuth1::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetworkAuth_qt_metaobject(sipPySelf,sipType_QOAuth1);

    return  ::QOAuth1::metaObject();
}

int sipQOAuth1::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOAuth1::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetworkAuth_qt_metacall(sipPySelf,sipType_QOAuth1,_c,_id,_a);

    return _id;
}

void *sipQOAuth1::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetworkAuth_qt_metacast(sipPySelf, sipType_QOAuth1, _clname, &sipCpp) ? sipCpp :  ::QOAuth1::qt_metacast(_clname));
}

void sipQOAuth1::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOAuth1::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetworkAuth_0(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth1::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOAuth1::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetworkAuth_0(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth1::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOAuth1::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetworkAuth_1(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth1::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOAuth1::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetworkAuth_2(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOAuth1::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOAuth1::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetworkAuth_3(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOAuth1::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOAuth1::eventFilter(a0,a1);

    extern bool sipVH_QtNetworkAuth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetworkAuth_4(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQOAuth1::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QOAuth1::event(a0);

    extern bool sipVH_QtNetworkAuth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetworkAuth_5(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNetworkReply* sipQOAuth1::head(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_head);

    if (!sipMeth)
        return  ::QOAuth1::head(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth1::get(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_get);

    if (!sipMeth)
        return  ::QOAuth1::get(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth1::post(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QOAuth1::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth1::put(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QOAuth1::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQOAuth1::deleteResource(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_deleteResource);

    if (!sipMeth)
        return  ::QOAuth1::deleteResource(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOAuth1::grant()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_grant);

    if (!sipMeth)
    {
         ::QOAuth1::grant();
        return;
    }

    extern void sipVH_QtNetworkAuth_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetworkAuth_7(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQOAuth1::resourceOwnerAuthorization(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_resourceOwnerAuthorization);

    if (!sipMeth)
    {
         ::QOAuth1::resourceOwnerAuthorization(a0,a1);
        return;
    }

    extern void sipVH_QtNetworkAuth_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    sipVH_QtNetworkAuth_8(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QOAuth1_clientSharedSecret, "clientSharedSecret(self) -> str");

extern "C" {static PyObject *meth_QOAuth1_clientSharedSecret(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_clientSharedSecret(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->clientSharedSecret());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_clientSharedSecret, doc_QOAuth1_clientSharedSecret);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setClientSharedSecret, "setClientSharedSecret(self, str)");

extern "C" {static PyObject *meth_QOAuth1_setClientSharedSecret(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setClientSharedSecret(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setClientSharedSecret(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setClientSharedSecret, doc_QOAuth1_setClientSharedSecret);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_clientCredentials, "clientCredentials(self) -> Tuple[str, str]");

extern "C" {static PyObject *meth_QOAuth1_clientCredentials(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_clientCredentials(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
            QPair< ::QString, ::QString>*sipRes;

            sipRes = new QPair< ::QString, ::QString>(sipCpp->clientCredentials());

            return sipConvertFromNewType(sipRes,sipType_QPair_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_clientCredentials, doc_QOAuth1_clientCredentials);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setClientCredentials, "setClientCredentials(self, Tuple[str, str])\n"
"setClientCredentials(self, str, str)");

extern "C" {static PyObject *meth_QOAuth1_setClientCredentials(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setClientCredentials(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPair< ::QString, ::QString>* a0;
        int a0State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QPair_0100QString_0100QString,&a0, &a0State))
        {
            sipCpp->setClientCredentials(*a0);
            sipReleaseType(const_cast<QPair< ::QString, ::QString> *>(a0),sipType_QPair_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setClientCredentials(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setClientCredentials, doc_QOAuth1_setClientCredentials);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_tokenSecret, "tokenSecret(self) -> str");

extern "C" {static PyObject *meth_QOAuth1_tokenSecret(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_tokenSecret(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tokenSecret());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_tokenSecret, doc_QOAuth1_tokenSecret);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setTokenSecret, "setTokenSecret(self, str)");

extern "C" {static PyObject *meth_QOAuth1_setTokenSecret(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setTokenSecret(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTokenSecret(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setTokenSecret, doc_QOAuth1_setTokenSecret);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_tokenCredentials, "tokenCredentials(self) -> Tuple[str, str]");

extern "C" {static PyObject *meth_QOAuth1_tokenCredentials(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_tokenCredentials(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
            QPair< ::QString, ::QString>*sipRes;

            sipRes = new QPair< ::QString, ::QString>(sipCpp->tokenCredentials());

            return sipConvertFromNewType(sipRes,sipType_QPair_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_tokenCredentials, doc_QOAuth1_tokenCredentials);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setTokenCredentials, "setTokenCredentials(self, Tuple[str, str])\n"
"setTokenCredentials(self, str, str)");

extern "C" {static PyObject *meth_QOAuth1_setTokenCredentials(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setTokenCredentials(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPair< ::QString, ::QString>* a0;
        int a0State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QPair_0100QString_0100QString,&a0, &a0State))
        {
            sipCpp->setTokenCredentials(*a0);
            sipReleaseType(const_cast<QPair< ::QString, ::QString> *>(a0),sipType_QPair_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTokenCredentials(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setTokenCredentials, doc_QOAuth1_setTokenCredentials);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_temporaryCredentialsUrl, "temporaryCredentialsUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QOAuth1_temporaryCredentialsUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_temporaryCredentialsUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->temporaryCredentialsUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_temporaryCredentialsUrl, doc_QOAuth1_temporaryCredentialsUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setTemporaryCredentialsUrl, "setTemporaryCredentialsUrl(self, QUrl)");

extern "C" {static PyObject *meth_QOAuth1_setTemporaryCredentialsUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setTemporaryCredentialsUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setTemporaryCredentialsUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setTemporaryCredentialsUrl, doc_QOAuth1_setTemporaryCredentialsUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_tokenCredentialsUrl, "tokenCredentialsUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QOAuth1_tokenCredentialsUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_tokenCredentialsUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->tokenCredentialsUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_tokenCredentialsUrl, doc_QOAuth1_tokenCredentialsUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setTokenCredentialsUrl, "setTokenCredentialsUrl(self, QUrl)");

extern "C" {static PyObject *meth_QOAuth1_setTokenCredentialsUrl(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setTokenCredentialsUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setTokenCredentialsUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setTokenCredentialsUrl, doc_QOAuth1_setTokenCredentialsUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_signatureMethod, "signatureMethod(self) -> QOAuth1.SignatureMethod");

extern "C" {static PyObject *meth_QOAuth1_signatureMethod(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_signatureMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
             ::QOAuth1::SignatureMethod sipRes;

            sipRes = sipCpp->signatureMethod();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOAuth1_SignatureMethod);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_signatureMethod, doc_QOAuth1_signatureMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setSignatureMethod, "setSignatureMethod(self, QOAuth1.SignatureMethod)");

extern "C" {static PyObject *meth_QOAuth1_setSignatureMethod(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setSignatureMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOAuth1::SignatureMethod a0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QOAuth1_SignatureMethod, &a0))
        {
            sipCpp->setSignatureMethod(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setSignatureMethod, doc_QOAuth1_setSignatureMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_head, "head(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_head(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_head(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOAuth1::head(*a0,*a1) : sipCpp->head(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_head, doc_QOAuth1_head);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_get, "get(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_get(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_get(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOAuth1::get(*a0,*a1) : sipCpp->get(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_get, doc_QOAuth1_get);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_post, "post(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_post(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_post(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOAuth1::post(*a0,*a1) : sipCpp->post(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_post, doc_QOAuth1_post);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_put, "put(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_put(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_put(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOAuth1::put(*a0,*a1) : sipCpp->put(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_put, doc_QOAuth1_put);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_deleteResource, "deleteResource(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_deleteResource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_deleteResource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOAuth1::deleteResource(*a0,*a1) : sipCpp->deleteResource(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_deleteResource, doc_QOAuth1_deleteResource);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_grant, "grant(self)");

extern "C" {static PyObject *meth_QOAuth1_grant(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_grant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOAuth1, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOAuth1::grant() : sipCpp->grant());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_grant, doc_QOAuth1_grant);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_continueGrantWithVerifier, "continueGrantWithVerifier(self, str)");

extern "C" {static PyObject *meth_QOAuth1_continueGrantWithVerifier(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_continueGrantWithVerifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->continueGrantWithVerifier(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_continueGrantWithVerifier, doc_QOAuth1_continueGrantWithVerifier);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_requestTemporaryCredentials, "requestTemporaryCredentials(self, QNetworkAccessManager.Operation, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_requestTemporaryCredentials(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_requestTemporaryCredentials(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QNetworkAccessManager::Operation a0;
        const  ::QUrl* a1;
        const  ::QVariantMap& a2def = QVariantMap();
        const  ::QVariantMap* a2 = &a2def;
        int a2State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pEJ9|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QUrl, &a1, sipType_QVariantMap,&a2, &a2State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->requestTemporaryCredentials(a0,*a1,*a2);
            sipReleaseType(const_cast< ::QVariantMap *>(a2),sipType_QVariantMap,a2State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_requestTemporaryCredentials, doc_QOAuth1_requestTemporaryCredentials);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_requestTokenCredentials, "requestTokenCredentials(self, QNetworkAccessManager.Operation, QUrl, Tuple[str, str], parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QOAuth1_requestTokenCredentials(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_requestTokenCredentials(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QNetworkAccessManager::Operation a0;
        const  ::QUrl* a1;
        const QPair< ::QString, ::QString>* a2;
        int a2State = 0;
        const  ::QVariantMap& a3def = QVariantMap();
        const  ::QVariantMap* a3 = &a3def;
        int a3State = 0;
         ::QOAuth1 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pEJ9J1|J1", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QUrl, &a1, sipType_QPair_0100QString_0100QString,&a2, &a2State, sipType_QVariantMap,&a3, &a3State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->requestTokenCredentials(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QPair< ::QString, ::QString> *>(a2),sipType_QPair_0100QString_0100QString,a2State);
            sipReleaseType(const_cast< ::QVariantMap *>(a3),sipType_QVariantMap,a3State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_requestTokenCredentials, doc_QOAuth1_requestTokenCredentials);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_setup, "setup(self, QNetworkRequest, Dict[str, Any], QNetworkAccessManager.Operation)");

extern "C" {static PyObject *meth_QOAuth1_setup(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_setup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QNetworkRequest* a0;
        const  ::QVariantMap* a1;
        int a1State = 0;
         ::QNetworkAccessManager::Operation a2;
         ::QOAuth1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J1E", &sipSelf, sipType_QOAuth1, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QVariantMap,&a1, &a1State, sipType_QNetworkAccessManager_Operation, &a2))
        {
            sipCpp->setup(a0,*a1,a2);
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_setup, doc_QOAuth1_setup);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_nonce, "nonce() -> QByteArray");

extern "C" {static PyObject *meth_QOAuth1_nonce(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_nonce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QOAuth1::nonce());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_nonce, doc_QOAuth1_nonce);

    return NULL;
}


PyDoc_STRVAR(doc_QOAuth1_generateAuthorizationHeader, "generateAuthorizationHeader(Dict[str, Any]) -> QByteArray");

extern "C" {static PyObject *meth_QOAuth1_generateAuthorizationHeader(PyObject *, PyObject *);}
static PyObject *meth_QOAuth1_generateAuthorizationHeader(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantMap* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QVariantMap,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QOAuth1::generateAuthorizationHeader(*a0));
            sipReleaseType(const_cast< ::QVariantMap *>(a0),sipType_QVariantMap,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOAuth1, sipName_generateAuthorizationHeader, doc_QOAuth1_generateAuthorizationHeader);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOAuth1(void *, const sipTypeDef *);}
static void *cast_QOAuth1(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOAuth1 *sipCpp = reinterpret_cast< ::QOAuth1 *>(sipCppV);

    if (targetType == sipType_QAbstractOAuth)
        return static_cast< ::QAbstractOAuth *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOAuth1(void *, int);}
static void release_QOAuth1(void *sipCppV, int)
{
     ::QOAuth1 *sipCpp = reinterpret_cast< ::QOAuth1 *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOAuth1(sipSimpleWrapper *);}
static void dealloc_QOAuth1(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOAuth1 *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOAuth1(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOAuth1(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOAuth1(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOAuth1 *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOAuth1(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QNetworkAccessManager* a0;
        PyObject *a0Keep;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8|JH", &a0Keep, sipType_QNetworkAccessManager, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQOAuth1(a0,a1);

            sipKeepReference((PyObject *)sipSelf, -4, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QNetworkAccessManager* a2;
        PyObject *a2Keep;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1@J8|JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2Keep, sipType_QNetworkAccessManager, &a2, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQOAuth1(*a0,*a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, -5, a2Keep);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOAuth1[] = {{0, 255, 1}};


static PyMethodDef methods_QOAuth1[] = {
    {SIP_MLNAME_CAST(sipName_clientCredentials), meth_QOAuth1_clientCredentials, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_clientCredentials)},
    {SIP_MLNAME_CAST(sipName_clientSharedSecret), meth_QOAuth1_clientSharedSecret, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_clientSharedSecret)},
    {SIP_MLNAME_CAST(sipName_continueGrantWithVerifier), meth_QOAuth1_continueGrantWithVerifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_continueGrantWithVerifier)},
    {SIP_MLNAME_CAST(sipName_deleteResource), (PyCFunction)meth_QOAuth1_deleteResource, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_deleteResource)},
    {SIP_MLNAME_CAST(sipName_generateAuthorizationHeader), meth_QOAuth1_generateAuthorizationHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_generateAuthorizationHeader)},
    {SIP_MLNAME_CAST(sipName_get), (PyCFunction)meth_QOAuth1_get, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_get)},
    {SIP_MLNAME_CAST(sipName_grant), meth_QOAuth1_grant, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_grant)},
    {SIP_MLNAME_CAST(sipName_head), (PyCFunction)meth_QOAuth1_head, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_head)},
    {SIP_MLNAME_CAST(sipName_nonce), meth_QOAuth1_nonce, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_nonce)},
    {SIP_MLNAME_CAST(sipName_post), (PyCFunction)meth_QOAuth1_post, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_post)},
    {SIP_MLNAME_CAST(sipName_put), (PyCFunction)meth_QOAuth1_put, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_put)},
    {SIP_MLNAME_CAST(sipName_requestTemporaryCredentials), (PyCFunction)meth_QOAuth1_requestTemporaryCredentials, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_requestTemporaryCredentials)},
    {SIP_MLNAME_CAST(sipName_requestTokenCredentials), (PyCFunction)meth_QOAuth1_requestTokenCredentials, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOAuth1_requestTokenCredentials)},
    {SIP_MLNAME_CAST(sipName_setClientCredentials), meth_QOAuth1_setClientCredentials, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setClientCredentials)},
    {SIP_MLNAME_CAST(sipName_setClientSharedSecret), meth_QOAuth1_setClientSharedSecret, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setClientSharedSecret)},
    {SIP_MLNAME_CAST(sipName_setSignatureMethod), meth_QOAuth1_setSignatureMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setSignatureMethod)},
    {SIP_MLNAME_CAST(sipName_setTemporaryCredentialsUrl), meth_QOAuth1_setTemporaryCredentialsUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setTemporaryCredentialsUrl)},
    {SIP_MLNAME_CAST(sipName_setTokenCredentials), meth_QOAuth1_setTokenCredentials, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setTokenCredentials)},
    {SIP_MLNAME_CAST(sipName_setTokenCredentialsUrl), meth_QOAuth1_setTokenCredentialsUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setTokenCredentialsUrl)},
    {SIP_MLNAME_CAST(sipName_setTokenSecret), meth_QOAuth1_setTokenSecret, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setTokenSecret)},
    {SIP_MLNAME_CAST(sipName_setup), meth_QOAuth1_setup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_setup)},
    {SIP_MLNAME_CAST(sipName_signatureMethod), meth_QOAuth1_signatureMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_signatureMethod)},
    {SIP_MLNAME_CAST(sipName_temporaryCredentialsUrl), meth_QOAuth1_temporaryCredentialsUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_temporaryCredentialsUrl)},
    {SIP_MLNAME_CAST(sipName_tokenCredentials), meth_QOAuth1_tokenCredentials, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_tokenCredentials)},
    {SIP_MLNAME_CAST(sipName_tokenCredentialsUrl), meth_QOAuth1_tokenCredentialsUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_tokenCredentialsUrl)},
    {SIP_MLNAME_CAST(sipName_tokenSecret), meth_QOAuth1_tokenSecret, METH_VARARGS, SIP_MLDOC_CAST(doc_QOAuth1_tokenSecret)}
};

static sipEnumMemberDef enummembers_QOAuth1[] = {
    {sipName_Hmac_Sha1, static_cast<int>(::QOAuth1::SignatureMethod::Hmac_Sha1), 9},
    {sipName_PlainText, static_cast<int>(::QOAuth1::SignatureMethod::PlainText), 9},
    {sipName_Rsa_Sha1, static_cast<int>(::QOAuth1::SignatureMethod::Rsa_Sha1), 9},
};

PyDoc_STRVAR(doc_QOAuth1, "\1QOAuth1(parent: QObject = None)\n"
"QOAuth1(QNetworkAccessManager, parent: QObject = None)\n"
"QOAuth1(str, str, QNetworkAccessManager, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOAuth1[] = {
    {"tokenCredentialsUrlChanged(QUrl)", "\1tokenCredentialsUrlChanged(self, QUrl)", 0, 0},
    {"temporaryCredentialsUrlChanged(QUrl)", "\1temporaryCredentialsUrlChanged(self, QUrl)", 0, 0},
    {"tokenSecretChanged(QString)", "\1tokenSecretChanged(self, str)", 0, 0},
    {"clientSharedSecretChanged(QString)", "\1clientSharedSecretChanged(self, str)", 0, 0},
    {"signatureMethodChanged(QOAuth1::SignatureMethod)", "\1signatureMethodChanged(self, QOAuth1.SignatureMethod)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QOAuth1 = {
    & ::QOAuth1::staticMetaObject,
    0,
    signals_QOAuth1,
    0
};


sipClassTypeDef sipTypeDef_QtNetworkAuth_QOAuth1 = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOAuth1,
        {0},
        &plugin_QOAuth1
    },
    {
        sipNameNr_QOAuth1,
        {0, 0, 1},
        26, methods_QOAuth1,
        3, enummembers_QOAuth1,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOAuth1,
    -1,
    -1,
    supers_QOAuth1,
    0,
    init_type_QOAuth1,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOAuth1,
    0,
    0,
    0,
    release_QOAuth1,
    cast_QOAuth1,
    0,
    0,
    0,
    0,
    0,
    0
};
