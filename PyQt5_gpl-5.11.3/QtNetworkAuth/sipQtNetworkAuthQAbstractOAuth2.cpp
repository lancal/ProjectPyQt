/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetworkAuth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth2.sip"
#include <qabstractoauth2.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 24 "sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 45 "sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth.sip"
#include <qabstractoauth.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauthreplyhandler.sip"
#include <qabstractoauthreplyhandler.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth2.cpp"


class sipQAbstractOAuth2 : public  ::QAbstractOAuth2
{
public:
    sipQAbstractOAuth2( ::QObject*);
    sipQAbstractOAuth2( ::QNetworkAccessManager*, ::QObject*);
    virtual ~sipQAbstractOAuth2();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QNetworkReply* put(const  ::QUrl&, ::QHttpMultiPart*);
     ::QNetworkReply* put(const  ::QUrl&,const  ::QByteArray&);
     ::QNetworkReply* post(const  ::QUrl&, ::QHttpMultiPart*);
     ::QNetworkReply* post(const  ::QUrl&,const  ::QByteArray&);
     ::QUrl createAuthenticatedUrl(const  ::QUrl&,const  ::QVariantMap&);
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QNetworkReply* head(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* get(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* post(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* put(const  ::QUrl&,const  ::QVariantMap&);
     ::QNetworkReply* deleteResource(const  ::QUrl&,const  ::QVariantMap&);
    void grant();
    void resourceOwnerAuthorization(const  ::QUrl&,const  ::QVariantMap&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractOAuth2(const sipQAbstractOAuth2 &);
    sipQAbstractOAuth2 &operator = (const sipQAbstractOAuth2 &);

    char sipPyMethods[19];
};

sipQAbstractOAuth2::sipQAbstractOAuth2( ::QObject*a0):  ::QAbstractOAuth2(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractOAuth2::sipQAbstractOAuth2( ::QNetworkAccessManager*a0, ::QObject*a1):  ::QAbstractOAuth2(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractOAuth2::~sipQAbstractOAuth2()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractOAuth2::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetworkAuth_qt_metaobject(sipPySelf,sipType_QAbstractOAuth2);

    return  ::QAbstractOAuth2::metaObject();
}

int sipQAbstractOAuth2::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractOAuth2::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetworkAuth_qt_metacall(sipPySelf,sipType_QAbstractOAuth2,_c,_id,_a);

    return _id;
}

void *sipQAbstractOAuth2::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetworkAuth_qt_metacast(sipPySelf, sipType_QAbstractOAuth2, _clname, &sipCpp) ? sipCpp :  ::QAbstractOAuth2::qt_metacast(_clname));
}

 ::QNetworkReply* sipQAbstractOAuth2::put(const  ::QUrl& a0, ::QHttpMultiPart*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QAbstractOAuth2::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&, ::QHttpMultiPart*);

    return sipVH_QtNetworkAuth_11(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::put(const  ::QUrl& a0,const  ::QByteArray& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QAbstractOAuth2::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QByteArray&);

    return sipVH_QtNetworkAuth_10(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::post(const  ::QUrl& a0, ::QHttpMultiPart*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QAbstractOAuth2::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&, ::QHttpMultiPart*);

    return sipVH_QtNetworkAuth_11(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::post(const  ::QUrl& a0,const  ::QByteArray& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QAbstractOAuth2::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QByteArray&);

    return sipVH_QtNetworkAuth_10(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QUrl sipQAbstractOAuth2::createAuthenticatedUrl(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_createAuthenticatedUrl);

    if (!sipMeth)
        return  ::QAbstractOAuth2::createAuthenticatedUrl(a0,a1);

    extern  ::QUrl sipVH_QtNetworkAuth_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_9(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractOAuth2::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractOAuth2::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetworkAuth_0(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractOAuth2::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractOAuth2::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetworkAuth_0(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractOAuth2::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractOAuth2::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetworkAuth_1(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractOAuth2::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractOAuth2::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetworkAuth_2(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractOAuth2::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractOAuth2::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetworkAuth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetworkAuth_3(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractOAuth2::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractOAuth2::eventFilter(a0,a1);

    extern bool sipVH_QtNetworkAuth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetworkAuth_4(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractOAuth2::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QAbstractOAuth2::event(a0);

    extern bool sipVH_QtNetworkAuth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetworkAuth_5(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNetworkReply* sipQAbstractOAuth2::head(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_head);

    if (!sipMeth)
        return  ::QAbstractOAuth2::head(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::get(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_get);

    if (!sipMeth)
        return  ::QAbstractOAuth2::get(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::post(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_post);

    if (!sipMeth)
        return  ::QAbstractOAuth2::post(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::put(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_put);

    if (!sipMeth)
        return  ::QAbstractOAuth2::put(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QNetworkReply* sipQAbstractOAuth2::deleteResource(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_deleteResource);

    if (!sipMeth)
        return  ::QAbstractOAuth2::deleteResource(a0,a1);

    extern  ::QNetworkReply* sipVH_QtNetworkAuth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    return sipVH_QtNetworkAuth_6(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractOAuth2::grant()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QAbstractOAuth2,sipName_grant);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetworkAuth_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetworkAuth_7(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractOAuth2::resourceOwnerAuthorization(const  ::QUrl& a0,const  ::QVariantMap& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_resourceOwnerAuthorization);

    if (!sipMeth)
    {
         ::QAbstractOAuth2::resourceOwnerAuthorization(a0,a1);
        return;
    }

    extern void sipVH_QtNetworkAuth_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&,const  ::QVariantMap&);

    sipVH_QtNetworkAuth_8(sipGILState, sipImportedVirtErrorHandlers_QtNetworkAuth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QAbstractOAuth2_createAuthenticatedUrl, "createAuthenticatedUrl(self, QUrl, parameters: Dict[str, Any] = {}) -> QUrl");

extern "C" {static PyObject *meth_QAbstractOAuth2_createAuthenticatedUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_createAuthenticatedUrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl((sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::createAuthenticatedUrl(*a0,*a1) : sipCpp->createAuthenticatedUrl(*a0,*a1)));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_createAuthenticatedUrl, doc_QAbstractOAuth2_createAuthenticatedUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_head, "head(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth2_head(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_head(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::head(*a0,*a1) : sipCpp->head(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_head, doc_QAbstractOAuth2_head);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_get, "get(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth2_get(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_get(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::get(*a0,*a1) : sipCpp->get(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_get, doc_QAbstractOAuth2_get);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_post, "post(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply\n"
"post(self, QUrl, Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"post(self, QUrl, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth2_post(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_post(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::post(*a0,*a1) : sipCpp->post(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const  ::QUrl* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::post(*a0,*a1) : sipCpp->post(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const  ::QUrl* a0;
         ::QHttpMultiPart* a1;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J8", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QHttpMultiPart, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::post(*a0,a1) : sipCpp->post(*a0,a1));

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_post, doc_QAbstractOAuth2_post);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_put, "put(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply\n"
"put(self, QUrl, Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"put(self, QUrl, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth2_put(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_put(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::put(*a0,*a1) : sipCpp->put(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const  ::QUrl* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::put(*a0,*a1) : sipCpp->put(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const  ::QUrl* a0;
         ::QHttpMultiPart* a1;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J8", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QHttpMultiPart, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::put(*a0,a1) : sipCpp->put(*a0,a1));

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_put, doc_QAbstractOAuth2_put);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_deleteResource, "deleteResource(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth2_deleteResource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_deleteResource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth2 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth2::deleteResource(*a0,*a1) : sipCpp->deleteResource(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_deleteResource, doc_QAbstractOAuth2_deleteResource);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_scope, "scope(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth2_scope(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->scope());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_scope, doc_QAbstractOAuth2_scope);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_setScope, "setScope(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth2_setScope(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_setScope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setScope(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_setScope, doc_QAbstractOAuth2_setScope);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_userAgent, "userAgent(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth2_userAgent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_userAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->userAgent());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_userAgent, doc_QAbstractOAuth2_userAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_setUserAgent, "setUserAgent(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth2_setUserAgent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_setUserAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setUserAgent(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_setUserAgent, doc_QAbstractOAuth2_setUserAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_responseType, "responseType(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth2_responseType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_responseType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->responseType());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_responseType, doc_QAbstractOAuth2_responseType);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_clientIdentifierSharedKey, "clientIdentifierSharedKey(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth2_clientIdentifierSharedKey(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_clientIdentifierSharedKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->clientIdentifierSharedKey());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_clientIdentifierSharedKey, doc_QAbstractOAuth2_clientIdentifierSharedKey);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_setClientIdentifierSharedKey, "setClientIdentifierSharedKey(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth2_setClientIdentifierSharedKey(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_setClientIdentifierSharedKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setClientIdentifierSharedKey(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_setClientIdentifierSharedKey, doc_QAbstractOAuth2_setClientIdentifierSharedKey);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_state, "state(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth2_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->state());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_state, doc_QAbstractOAuth2_state);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_setState, "setState(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth2_setState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setState(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_setState, doc_QAbstractOAuth2_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_expirationAt, "expirationAt(self) -> QDateTime");

extern "C" {static PyObject *meth_QAbstractOAuth2_expirationAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_expirationAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expirationAt());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_expirationAt, doc_QAbstractOAuth2_expirationAt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_refreshToken, "refreshToken(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth2_refreshToken(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_refreshToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth2, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->refreshToken());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_refreshToken, doc_QAbstractOAuth2_refreshToken);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_setRefreshToken, "setRefreshToken(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth2_setRefreshToken(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_setRefreshToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setRefreshToken(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_setRefreshToken, doc_QAbstractOAuth2_setRefreshToken);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth2_setResponseType, "setResponseType(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth2_setResponseType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth2_setResponseType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractOAuth2, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setResponseType(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth2, sipName_setResponseType, doc_QAbstractOAuth2_setResponseType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractOAuth2(void *, const sipTypeDef *);}
static void *cast_QAbstractOAuth2(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractOAuth2 *sipCpp = reinterpret_cast< ::QAbstractOAuth2 *>(sipCppV);

    if (targetType == sipType_QAbstractOAuth)
        return static_cast< ::QAbstractOAuth *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractOAuth2(void *, int);}
static void release_QAbstractOAuth2(void *sipCppV, int)
{
     ::QAbstractOAuth2 *sipCpp = reinterpret_cast< ::QAbstractOAuth2 *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractOAuth2(sipSimpleWrapper *);}
static void dealloc_QAbstractOAuth2(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractOAuth2 *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractOAuth2(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractOAuth2(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractOAuth2(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractOAuth2 *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractOAuth2(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QNetworkAccessManager* a0;
        PyObject *a0Keep;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8|JH", &a0Keep, sipType_QNetworkAccessManager, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQAbstractOAuth2(a0,a1);

            sipKeepReference((PyObject *)sipSelf, -3, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractOAuth2[] = {{0, 255, 1}};


static PyMethodDef methods_QAbstractOAuth2[] = {
    {SIP_MLNAME_CAST(sipName_clientIdentifierSharedKey), meth_QAbstractOAuth2_clientIdentifierSharedKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_clientIdentifierSharedKey)},
    {SIP_MLNAME_CAST(sipName_createAuthenticatedUrl), (PyCFunction)meth_QAbstractOAuth2_createAuthenticatedUrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_createAuthenticatedUrl)},
    {SIP_MLNAME_CAST(sipName_deleteResource), (PyCFunction)meth_QAbstractOAuth2_deleteResource, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_deleteResource)},
    {SIP_MLNAME_CAST(sipName_expirationAt), meth_QAbstractOAuth2_expirationAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_expirationAt)},
    {SIP_MLNAME_CAST(sipName_get), (PyCFunction)meth_QAbstractOAuth2_get, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_get)},
    {SIP_MLNAME_CAST(sipName_head), (PyCFunction)meth_QAbstractOAuth2_head, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_head)},
    {SIP_MLNAME_CAST(sipName_post), (PyCFunction)meth_QAbstractOAuth2_post, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_post)},
    {SIP_MLNAME_CAST(sipName_put), (PyCFunction)meth_QAbstractOAuth2_put, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_put)},
    {SIP_MLNAME_CAST(sipName_refreshToken), meth_QAbstractOAuth2_refreshToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_refreshToken)},
    {SIP_MLNAME_CAST(sipName_responseType), meth_QAbstractOAuth2_responseType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_responseType)},
    {SIP_MLNAME_CAST(sipName_scope), meth_QAbstractOAuth2_scope, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_scope)},
    {SIP_MLNAME_CAST(sipName_setClientIdentifierSharedKey), meth_QAbstractOAuth2_setClientIdentifierSharedKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_setClientIdentifierSharedKey)},
    {SIP_MLNAME_CAST(sipName_setRefreshToken), meth_QAbstractOAuth2_setRefreshToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_setRefreshToken)},
    {SIP_MLNAME_CAST(sipName_setResponseType), meth_QAbstractOAuth2_setResponseType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_setResponseType)},
    {SIP_MLNAME_CAST(sipName_setScope), meth_QAbstractOAuth2_setScope, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_setScope)},
    {SIP_MLNAME_CAST(sipName_setState), meth_QAbstractOAuth2_setState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_setState)},
    {SIP_MLNAME_CAST(sipName_setUserAgent), meth_QAbstractOAuth2_setUserAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_setUserAgent)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAbstractOAuth2_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_state)},
    {SIP_MLNAME_CAST(sipName_userAgent), meth_QAbstractOAuth2_userAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth2_userAgent)}
};

PyDoc_STRVAR(doc_QAbstractOAuth2, "\1QAbstractOAuth2(parent: QObject = None)\n"
"QAbstractOAuth2(QNetworkAccessManager, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractOAuth2[] = {
    {"authorizationCallbackReceived(QVariantMap)", "\1authorizationCallbackReceived(self, Dict[str, Any])", 0, 0},
    {"error(QString,QString,QUrl)", "\1error(self, str, str, QUrl)", 0, 0},
    {"expirationAtChanged(QDateTime)", "\1expirationAtChanged(self, Union[QDateTime, datetime.datetime])", 0, 0},
    {"stateChanged(QString)", "\1stateChanged(self, str)", 0, 0},
    {"clientIdentifierSharedKeyChanged(QString)", "\1clientIdentifierSharedKeyChanged(self, str)", 0, 0},
    {"responseTypeChanged(QString)", "\1responseTypeChanged(self, str)", 0, 0},
    {"userAgentChanged(QString)", "\1userAgentChanged(self, str)", 0, 0},
    {"scopeChanged(QString)", "\1scopeChanged(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QAbstractOAuth2 = {
    & ::QAbstractOAuth2::staticMetaObject,
    0,
    signals_QAbstractOAuth2,
    0
};


sipClassTypeDef sipTypeDef_QtNetworkAuth_QAbstractOAuth2 = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractOAuth2,
        {0},
        &plugin_QAbstractOAuth2
    },
    {
        sipNameNr_QAbstractOAuth2,
        {0, 0, 1},
        19, methods_QAbstractOAuth2,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractOAuth2,
    -1,
    -1,
    supers_QAbstractOAuth2,
    0,
    init_type_QAbstractOAuth2,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractOAuth2,
    0,
    0,
    0,
    release_QAbstractOAuth2,
    cast_QAbstractOAuth2,
    0,
    0,
    0,
    0,
    0,
    0
};
