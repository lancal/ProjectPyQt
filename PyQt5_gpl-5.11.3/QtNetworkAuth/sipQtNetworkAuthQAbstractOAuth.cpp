/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetworkAuth.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth.sip"
#include <qabstractoauth.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"

#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 24 "sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauthreplyhandler.sip"
#include <qabstractoauthreplyhandler.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"


PyDoc_STRVAR(doc_QAbstractOAuth_clientIdentifier, "clientIdentifier(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth_clientIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_clientIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->clientIdentifier());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_clientIdentifier, doc_QAbstractOAuth_clientIdentifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setClientIdentifier, "setClientIdentifier(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth_setClientIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setClientIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setClientIdentifier(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setClientIdentifier, doc_QAbstractOAuth_setClientIdentifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_token, "token(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth_token(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_token(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->token());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_token, doc_QAbstractOAuth_token);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setToken, "setToken(self, str)");

extern "C" {static PyObject *meth_QAbstractOAuth_setToken(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToken(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setToken, doc_QAbstractOAuth_setToken);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_networkAccessManager, "networkAccessManager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QAbstractOAuth_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QNetworkAccessManager*sipRes;

            sipRes = sipCpp->networkAccessManager();

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_networkAccessManager, doc_QAbstractOAuth_networkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setNetworkAccessManager, "setNetworkAccessManager(self, QNetworkAccessManager)");

extern "C" {static PyObject *meth_QAbstractOAuth_setNetworkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setNetworkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QNetworkAccessManager* a0;
        PyObject *a0Keep;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractOAuth, &sipCpp, &a0Keep, sipType_QNetworkAccessManager, &a0))
        {
            sipCpp->setNetworkAccessManager(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setNetworkAccessManager, doc_QAbstractOAuth_setNetworkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_status, "status(self) -> QAbstractOAuth.Status");

extern "C" {static PyObject *meth_QAbstractOAuth_status(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QAbstractOAuth::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractOAuth_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_status, doc_QAbstractOAuth_status);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_authorizationUrl, "authorizationUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QAbstractOAuth_authorizationUrl(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_authorizationUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->authorizationUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_authorizationUrl, doc_QAbstractOAuth_authorizationUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setAuthorizationUrl, "setAuthorizationUrl(self, QUrl)");

extern "C" {static PyObject *meth_QAbstractOAuth_setAuthorizationUrl(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setAuthorizationUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setAuthorizationUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setAuthorizationUrl, doc_QAbstractOAuth_setAuthorizationUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_extraTokens, "extraTokens(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QAbstractOAuth_extraTokens(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_extraTokens(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QVariantMap*sipRes;

            sipRes = new  ::QVariantMap(sipCpp->extraTokens());

            return sipConvertFromNewType(sipRes,sipType_QVariantMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_extraTokens, doc_QAbstractOAuth_extraTokens);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_replyHandler, "replyHandler(self) -> QAbstractOAuthReplyHandler");

extern "C" {static PyObject *meth_QAbstractOAuth_replyHandler(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_replyHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QAbstractOAuthReplyHandler*sipRes;

            sipRes = sipCpp->replyHandler();

            return sipConvertFromType(sipRes,sipType_QAbstractOAuthReplyHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_replyHandler, doc_QAbstractOAuth_replyHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setReplyHandler, "setReplyHandler(self, QAbstractOAuthReplyHandler)");

extern "C" {static PyObject *meth_QAbstractOAuth_setReplyHandler(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setReplyHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractOAuthReplyHandler* a0;
        PyObject *a0Keep;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractOAuth, &sipCpp, &a0Keep, sipType_QAbstractOAuthReplyHandler, &a0))
        {
            sipCpp->setReplyHandler(a0);

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setReplyHandler, doc_QAbstractOAuth_setReplyHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_head, "head(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth_head(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_head(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractOAuth, sipName_head);
                return NULL;
            }

            sipRes = sipCpp->head(*a0,*a1);
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_head, doc_QAbstractOAuth_head);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_get, "get(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth_get(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_get(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractOAuth, sipName_get);
                return NULL;
            }

            sipRes = sipCpp->get(*a0,*a1);
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_get, doc_QAbstractOAuth_get);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_post, "post(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth_post(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_post(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractOAuth, sipName_post);
                return NULL;
            }

            sipRes = sipCpp->post(*a0,*a1);
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_post, doc_QAbstractOAuth_post);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_put, "put(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth_put(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_put(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractOAuth, sipName_put);
                return NULL;
            }

            sipRes = sipCpp->put(*a0,*a1);
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_put, doc_QAbstractOAuth_put);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_deleteResource, "deleteResource(self, QUrl, parameters: Dict[str, Any] = {}) -> QNetworkReply");

extern "C" {static PyObject *meth_QAbstractOAuth_deleteResource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_deleteResource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
        const  ::QVariantMap& a1def = QVariantMap();
        const  ::QVariantMap* a1 = &a1def;
        int a1State = 0;
         ::QAbstractOAuth *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractOAuth, sipName_deleteResource);
                return NULL;
            }

            sipRes = sipCpp->deleteResource(*a0,*a1);
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_deleteResource, doc_QAbstractOAuth_deleteResource);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_modifyParametersFunction, "modifyParametersFunction(self) -> Callable[..., None]");

extern "C" {static PyObject *meth_QAbstractOAuth_modifyParametersFunction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_modifyParametersFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 118 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth.sip"
        // The callable, if any,  is held in the user object.
        sipRes = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        Py_XINCREF(sipRes);
#line 686 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_modifyParametersFunction, doc_QAbstractOAuth_modifyParametersFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setModifyParametersFunction, "setModifyParametersFunction(self, Callable[..., None])");

extern "C" {static PyObject *meth_QAbstractOAuth_setModifyParametersFunction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setModifyParametersFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BH", &sipSelf, sipType_QAbstractOAuth, &sipCpp, &a0))
        {
#line 125 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtNetworkAuth/qabstractoauth.sip"
        // Remove any existing callable.
        PyObject *func = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        Py_XDECREF(func);
        
        // Save the new callable.
        if (a0 == Py_None)
        {
            func = 0;
        }
        else
        {
            func = a0;
            Py_INCREF(func);
        }
        
        sipSetUserObject((sipSimpleWrapper *)sipSelf, func);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->setModifyParametersFunction([func](QAbstractOAuth::Stage stage, QVariantMap *parameters) {
            if (func)
            {
                SIP_BLOCK_THREADS
        
                static const sipTypeDef *variant_map = 0;
        
                if (!variant_map)
                {
                    variant_map = sipFindType("QMap<QString,QVariant>");
                    Q_ASSERT(variant_map);
                }
        
                PyObject *parameters_obj = sipConvertFromType(parameters, variant_map, NULL);
        
                if (!parameters_obj)
                {
                    pyqt5_qtnetworkauth_err_print();
                }
                else
                {
                    PyObject *res = sipCallMethod(NULL, func, "FR", stage, sipType_QAbstractOAuth_Stage, parameters_obj);
        
                    if (!res)
                    {
                        pyqt5_qtnetworkauth_err_print();
                    }
                    else
                    {
                        Py_DECREF(res);
        
                        int iserr = 0;
                        QVariantMap *updated = reinterpret_cast<QVariantMap *>(sipForceConvertToType(parameters_obj, variant_map, NULL, SIP_NO_CONVERTORS, NULL, &iserr));
        
                        if (iserr)
                        {
                            pyqt5_qtnetworkauth_err_print();
                        }
                        else
                        {
                            // Copy the updated parameters.
                            *parameters = *updated;
                            delete updated;
                        }
                    }
        
                    Py_DECREF(parameters_obj);
                }
        
                SIP_UNBLOCK_THREADS
            }
        });
        
        Py_END_ALLOW_THREADS
#line 787 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtNetworkAuth/sipQtNetworkAuthQAbstractOAuth.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setModifyParametersFunction, doc_QAbstractOAuth_setModifyParametersFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_contentType, "contentType(self) -> QAbstractOAuth.ContentType");

extern "C" {static PyObject *meth_QAbstractOAuth_contentType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_contentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QAbstractOAuth::ContentType sipRes;

            sipRes = sipCpp->contentType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractOAuth_ContentType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_contentType, doc_QAbstractOAuth_contentType);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setContentType, "setContentType(self, QAbstractOAuth.ContentType)");

extern "C" {static PyObject *meth_QAbstractOAuth_setContentType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setContentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractOAuth::ContentType a0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QAbstractOAuth_ContentType, &a0))
        {
            sipCpp->setContentType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setContentType, doc_QAbstractOAuth_setContentType);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_grant, "grant(self)");

extern "C" {static PyObject *meth_QAbstractOAuth_grant(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_grant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractOAuth, sipName_grant);
                return NULL;
            }

            sipCpp->grant();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_grant, doc_QAbstractOAuth_grant);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_setStatus, "setStatus(self, QAbstractOAuth.Status)");

extern "C" {static PyObject *meth_QAbstractOAuth_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractOAuth::Status a0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QAbstractOAuth_Status, &a0))
        {
            sipCpp->setStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_setStatus, doc_QAbstractOAuth_setStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_callback, "callback(self) -> str");

extern "C" {static PyObject *meth_QAbstractOAuth_callback(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_callback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractOAuth, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->callback());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_callback, doc_QAbstractOAuth_callback);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_resourceOwnerAuthorization, "resourceOwnerAuthorization(self, QUrl, Dict[str, Any])");

extern "C" {static PyObject *meth_QAbstractOAuth_resourceOwnerAuthorization(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_resourceOwnerAuthorization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QVariantMap* a1;
        int a1State = 0;
         ::QAbstractOAuth *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QAbstractOAuth, &sipCpp, sipType_QUrl, &a0, sipType_QVariantMap,&a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractOAuth::resourceOwnerAuthorization(*a0,*a1) : sipCpp->resourceOwnerAuthorization(*a0,*a1));
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QVariantMap,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_resourceOwnerAuthorization, doc_QAbstractOAuth_resourceOwnerAuthorization);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractOAuth_generateRandomString, "generateRandomString(int) -> QByteArray");

extern "C" {static PyObject *meth_QAbstractOAuth_generateRandomString(PyObject *, PyObject *);}
static PyObject *meth_QAbstractOAuth_generateRandomString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::quint8 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "M", &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QAbstractOAuth::generateRandomString(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractOAuth, sipName_generateRandomString, doc_QAbstractOAuth_generateRandomString);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractOAuth(void *, const sipTypeDef *);}
static void *cast_QAbstractOAuth(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractOAuth *sipCpp = reinterpret_cast< ::QAbstractOAuth *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractOAuth(void *, int);}
static void release_QAbstractOAuth(void *sipCppV, int)
{
     ::QAbstractOAuth *sipCpp = reinterpret_cast< ::QAbstractOAuth *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractOAuth(sipSimpleWrapper *);}
static void dealloc_QAbstractOAuth(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractOAuth(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractOAuth[] = {{5, 0, 1}};


static PyMethodDef methods_QAbstractOAuth[] = {
    {SIP_MLNAME_CAST(sipName_authorizationUrl), meth_QAbstractOAuth_authorizationUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_authorizationUrl)},
    {SIP_MLNAME_CAST(sipName_callback), meth_QAbstractOAuth_callback, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_callback)},
    {SIP_MLNAME_CAST(sipName_clientIdentifier), meth_QAbstractOAuth_clientIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_clientIdentifier)},
    {SIP_MLNAME_CAST(sipName_contentType), meth_QAbstractOAuth_contentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_contentType)},
    {SIP_MLNAME_CAST(sipName_deleteResource), (PyCFunction)meth_QAbstractOAuth_deleteResource, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth_deleteResource)},
    {SIP_MLNAME_CAST(sipName_extraTokens), meth_QAbstractOAuth_extraTokens, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_extraTokens)},
    {SIP_MLNAME_CAST(sipName_generateRandomString), meth_QAbstractOAuth_generateRandomString, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_generateRandomString)},
    {SIP_MLNAME_CAST(sipName_get), (PyCFunction)meth_QAbstractOAuth_get, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth_get)},
    {SIP_MLNAME_CAST(sipName_grant), meth_QAbstractOAuth_grant, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_grant)},
    {SIP_MLNAME_CAST(sipName_head), (PyCFunction)meth_QAbstractOAuth_head, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth_head)},
    {SIP_MLNAME_CAST(sipName_modifyParametersFunction), meth_QAbstractOAuth_modifyParametersFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_modifyParametersFunction)},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QAbstractOAuth_networkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_networkAccessManager)},
    {SIP_MLNAME_CAST(sipName_post), (PyCFunction)meth_QAbstractOAuth_post, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth_post)},
    {SIP_MLNAME_CAST(sipName_put), (PyCFunction)meth_QAbstractOAuth_put, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractOAuth_put)},
    {SIP_MLNAME_CAST(sipName_replyHandler), meth_QAbstractOAuth_replyHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_replyHandler)},
    {SIP_MLNAME_CAST(sipName_resourceOwnerAuthorization), meth_QAbstractOAuth_resourceOwnerAuthorization, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_resourceOwnerAuthorization)},
    {SIP_MLNAME_CAST(sipName_setAuthorizationUrl), meth_QAbstractOAuth_setAuthorizationUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setAuthorizationUrl)},
    {SIP_MLNAME_CAST(sipName_setClientIdentifier), meth_QAbstractOAuth_setClientIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setClientIdentifier)},
    {SIP_MLNAME_CAST(sipName_setContentType), meth_QAbstractOAuth_setContentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setContentType)},
    {SIP_MLNAME_CAST(sipName_setModifyParametersFunction), meth_QAbstractOAuth_setModifyParametersFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setModifyParametersFunction)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManager), meth_QAbstractOAuth_setNetworkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setNetworkAccessManager)},
    {SIP_MLNAME_CAST(sipName_setReplyHandler), meth_QAbstractOAuth_setReplyHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setReplyHandler)},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QAbstractOAuth_setStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setStatus)},
    {SIP_MLNAME_CAST(sipName_setToken), meth_QAbstractOAuth_setToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_setToken)},
    {SIP_MLNAME_CAST(sipName_status), meth_QAbstractOAuth_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_status)},
    {SIP_MLNAME_CAST(sipName_token), meth_QAbstractOAuth_token, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractOAuth_token)}
};

static sipEnumMemberDef enummembers_QAbstractOAuth[] = {
    {sipName_Granted, static_cast<int>(::QAbstractOAuth::Status::Granted), 5},
    {sipName_Json, static_cast<int>(::QAbstractOAuth::ContentType::Json), 2},
    {sipName_NetworkError, static_cast<int>(::QAbstractOAuth::Error::NetworkError), 3},
    {sipName_NoError, static_cast<int>(::QAbstractOAuth::Error::NoError), 3},
    {sipName_NotAuthenticated, static_cast<int>(::QAbstractOAuth::Status::NotAuthenticated), 5},
    {sipName_OAuthCallbackNotVerified, static_cast<int>(::QAbstractOAuth::Error::OAuthCallbackNotVerified), 3},
    {sipName_OAuthTokenNotFoundError, static_cast<int>(::QAbstractOAuth::Error::OAuthTokenNotFoundError), 3},
    {sipName_OAuthTokenSecretNotFoundError, static_cast<int>(::QAbstractOAuth::Error::OAuthTokenSecretNotFoundError), 3},
    {sipName_RefreshingAccessToken, static_cast<int>(::QAbstractOAuth::Stage::RefreshingAccessToken), 4},
    {sipName_RefreshingToken, static_cast<int>(::QAbstractOAuth::Status::RefreshingToken), 5},
    {sipName_RequestingAccessToken, static_cast<int>(::QAbstractOAuth::Stage::RequestingAccessToken), 4},
    {sipName_RequestingAuthorization, static_cast<int>(::QAbstractOAuth::Stage::RequestingAuthorization), 4},
    {sipName_RequestingTemporaryCredentials, static_cast<int>(::QAbstractOAuth::Stage::RequestingTemporaryCredentials), 4},
    {sipName_ServerError, static_cast<int>(::QAbstractOAuth::Error::ServerError), 3},
    {sipName_TemporaryCredentialsReceived, static_cast<int>(::QAbstractOAuth::Status::TemporaryCredentialsReceived), 5},
    {sipName_WwwFormUrlEncoded, static_cast<int>(::QAbstractOAuth::ContentType::WwwFormUrlEncoded), 2},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractOAuth[] = {
    {"replyDataReceived(QByteArray)", "\1replyDataReceived(self, Union[QByteArray, bytes, bytearray])", 0, 0},
    {"finished(QNetworkReply*)", "\1finished(self, QNetworkReply)", 0, 0},
    {"granted()", "\1granted(self)", 0, 0},
    {"authorizeWithBrowser(QUrl)", "\1authorizeWithBrowser(self, QUrl)", 0, 0},
    {"requestFailed(Error)|(QAbstractOAuth::Error)", "\1requestFailed(self, QAbstractOAuth.Error)", 0, 0},
    {"contentTypeChanged(ContentType)|(QAbstractOAuth::ContentType)", "\1contentTypeChanged(self, QAbstractOAuth.ContentType)", 0, 0},
    {"extraTokensChanged(QVariantMap)", "\1extraTokensChanged(self, Dict[str, Any])", 0, 0},
    {"authorizationUrlChanged(QUrl)", "\1authorizationUrlChanged(self, QUrl)", 0, 0},
    {"statusChanged(Status)|(QAbstractOAuth::Status)", "\1statusChanged(self, QAbstractOAuth.Status)", 0, 0},
    {"tokenChanged(QString)", "\1tokenChanged(self, str)", 0, 0},
    {"clientIdentifierChanged(QString)", "\1clientIdentifierChanged(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QAbstractOAuth = {
    & ::QAbstractOAuth::staticMetaObject,
    0,
    signals_QAbstractOAuth,
    0
};


sipClassTypeDef sipTypeDef_QtNetworkAuth_QAbstractOAuth = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractOAuth,
        {0},
        &plugin_QAbstractOAuth
    },
    {
        sipNameNr_QAbstractOAuth,
        {0, 0, 1},
        26, methods_QAbstractOAuth,
        16, enummembers_QAbstractOAuth,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QAbstractOAuth,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractOAuth,
    0,
    0,
    0,
    release_QAbstractOAuth,
    cast_QAbstractOAuth,
    0,
    0,
    0,
    0,
    0,
    0
};
