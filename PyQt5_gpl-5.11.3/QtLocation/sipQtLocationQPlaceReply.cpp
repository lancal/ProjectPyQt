/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtLocation/qplacereply.sip"
#include <qplacereply.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQPlaceReply.cpp"


class sipQPlaceReply : public  ::QPlaceReply
{
public:
    sipQPlaceReply( ::QObject*);
    virtual ~sipQPlaceReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void abort();
     ::QPlaceReply::Type type() const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceReply(const sipQPlaceReply &);
    sipQPlaceReply &operator = (const sipQPlaceReply &);

    char sipPyMethods[9];
};

sipQPlaceReply::sipQPlaceReply( ::QObject*a0):  ::QPlaceReply(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlaceReply::~sipQPlaceReply()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPlaceReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QPlaceReply);

    return  ::QPlaceReply::metaObject();
}

int sipQPlaceReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPlaceReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QPlaceReply,_c,_id,_a);

    return _id;
}

void *sipQPlaceReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QPlaceReply, _clname, &sipCpp) ? sipCpp :  ::QPlaceReply::qt_metacast(_clname));
}

void sipQPlaceReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_abort);

    if (!sipMeth)
    {
         ::QPlaceReply::abort();
        return;
    }

    extern void sipVH_QtLocation_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtLocation_6(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPlaceReply::Type sipQPlaceReply::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return  ::QPlaceReply::type();

    extern  ::QPlaceReply::Type sipVH_QtLocation_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtLocation_12(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQPlaceReply::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QPlaceReply::event(a0);

    extern bool sipVH_QtLocation_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtLocation_5(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPlaceReply::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPlaceReply::eventFilter(a0,a1);

    extern bool sipVH_QtLocation_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtLocation_4(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPlaceReply::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPlaceReply::timerEvent(a0);
        return;
    }

    extern void sipVH_QtLocation_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtLocation_3(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlaceReply::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPlaceReply::childEvent(a0);
        return;
    }

    extern void sipVH_QtLocation_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtLocation_2(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlaceReply::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPlaceReply::customEvent(a0);
        return;
    }

    extern void sipVH_QtLocation_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtLocation_1(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlaceReply::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPlaceReply::connectNotify(a0);
        return;
    }

    extern void sipVH_QtLocation_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtLocation_0(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPlaceReply::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPlaceReply::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtLocation_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtLocation_0(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPlaceReply_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QPlaceReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlaceReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceReply, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_isFinished, doc_QPlaceReply_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceReply_type, "type(self) -> QPlaceReply.Type");

extern "C" {static PyObject *meth_QPlaceReply_type(PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlaceReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceReply, &sipCpp))
        {
             ::QPlaceReply::Type sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlaceReply::type() : sipCpp->type());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPlaceReply_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_type, doc_QPlaceReply_type);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceReply_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QPlaceReply_errorString(PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlaceReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceReply, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_errorString, doc_QPlaceReply_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceReply_error, "error(self) -> QPlaceReply.Error");

extern "C" {static PyObject *meth_QPlaceReply_error(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_error(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlaceReply *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QPlaceReply, &sipCpp))
        {
             ::QPlaceReply::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPlaceReply_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_error, doc_QPlaceReply_error);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceReply_abort, "abort(self)");

extern "C" {static PyObject *meth_QPlaceReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPlaceReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceReply, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QPlaceReply::abort() : sipCpp->abort());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_abort, doc_QPlaceReply_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceReply_setFinished, "setFinished(self, bool)");

extern "C" {static PyObject *meth_QPlaceReply_setFinished(PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_setFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlaceReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QPlaceReply, &sipCpp, &a0))
        {
            sipCpp->setFinished(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_setFinished, doc_QPlaceReply_setFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceReply_setError, "setError(self, QPlaceReply.Error, str)");

extern "C" {static PyObject *meth_QPlaceReply_setError(PyObject *, PyObject *);}
static PyObject *meth_QPlaceReply_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlaceReply::Error a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QPlaceReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QPlaceReply, &sipCpp, sipType_QPlaceReply_Error, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setError(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_setError, doc_QPlaceReply_setError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPlaceReply(void *, const sipTypeDef *);}
static void *cast_QPlaceReply(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPlaceReply *sipCpp = reinterpret_cast< ::QPlaceReply *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceReply(void *, int);}
static void release_QPlaceReply(void *sipCppV, int)
{
     ::QPlaceReply *sipCpp = reinterpret_cast< ::QPlaceReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlaceReply(sipSimpleWrapper *);}
static void dealloc_QPlaceReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPlaceReply *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPlaceReply(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPlaceReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPlaceReply *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPlaceReply(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceReply[] = {{7, 0, 1}};


static PyMethodDef methods_QPlaceReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QPlaceReply_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceReply_abort)},
    {SIP_MLNAME_CAST(sipName_error), (PyCFunction)meth_QPlaceReply_error, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlaceReply_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QPlaceReply_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceReply_errorString)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QPlaceReply_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceReply_isFinished)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QPlaceReply_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceReply_setError)},
    {SIP_MLNAME_CAST(sipName_setFinished), meth_QPlaceReply_setFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceReply_setFinished)},
    {SIP_MLNAME_CAST(sipName_type), meth_QPlaceReply_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceReply_type)}
};

static sipEnumMemberDef enummembers_QPlaceReply[] = {
    {sipName_BadArgumentError, static_cast<int>( ::QPlaceReply::BadArgumentError), 72},
    {sipName_CancelError, static_cast<int>( ::QPlaceReply::CancelError), 72},
    {sipName_CategoryDoesNotExistError, static_cast<int>( ::QPlaceReply::CategoryDoesNotExistError), 72},
    {sipName_CommunicationError, static_cast<int>( ::QPlaceReply::CommunicationError), 72},
    {sipName_ContentReply, static_cast<int>( ::QPlaceReply::ContentReply), 73},
    {sipName_DetailsReply, static_cast<int>( ::QPlaceReply::DetailsReply), 73},
    {sipName_IdReply, static_cast<int>( ::QPlaceReply::IdReply), 73},
    {sipName_MatchReply, static_cast<int>( ::QPlaceReply::MatchReply), 73},
    {sipName_NoError, static_cast<int>( ::QPlaceReply::NoError), 72},
    {sipName_ParseError, static_cast<int>( ::QPlaceReply::ParseError), 72},
    {sipName_PermissionsError, static_cast<int>( ::QPlaceReply::PermissionsError), 72},
    {sipName_PlaceDoesNotExistError, static_cast<int>( ::QPlaceReply::PlaceDoesNotExistError), 72},
    {sipName_Reply, static_cast<int>( ::QPlaceReply::Reply), 73},
    {sipName_SearchReply, static_cast<int>( ::QPlaceReply::SearchReply), 73},
    {sipName_SearchSuggestionReply, static_cast<int>( ::QPlaceReply::SearchSuggestionReply), 73},
    {sipName_UnknownError, static_cast<int>( ::QPlaceReply::UnknownError), 72},
    {sipName_UnsupportedError, static_cast<int>( ::QPlaceReply::UnsupportedError), 72},
};

PyDoc_STRVAR(doc_QPlaceReply, "\1QPlaceReply(parent: QObject = None)");


extern "C" {static int emit_QPlaceReply_error(void *, PyObject *);}

static int emit_QPlaceReply_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QPlaceReply *sipCpp = reinterpret_cast<QPlaceReply *>(sipCppV);

    {
         ::QPlaceReply::Error a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E|J1", sipType_QPlaceReply_Error, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlaceReply, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QPlaceReply[] = {
    {"finished()", "\1finished(self)", 0, 0},
    {"aborted()", "\1aborted(self)", 0, 0},
    {"error(QPlaceReply::Error,QString)", "\1error(self, QPlaceReply.Error, errorString: str = '')", &methods_QPlaceReply[1], emit_QPlaceReply_error},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QPlaceReply = {
    & ::QPlaceReply::staticMetaObject,
    0,
    signals_QPlaceReply,
    0
};


sipClassTypeDef sipTypeDef_QtLocation_QPlaceReply = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPlaceReply,
        {0},
        &plugin_QPlaceReply
    },
    {
        sipNameNr_QPlaceReply,
        {0, 0, 1},
        7, methods_QPlaceReply,
        17, enummembers_QPlaceReply,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceReply,
    -1,
    -1,
    supers_QPlaceReply,
    0,
    init_type_QPlaceReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceReply,
    0,
    0,
    0,
    release_QPlaceReply,
    cast_QPlaceReply,
    0,
    0,
    0,
    0,
    0,
    0
};
