/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtLocation/qgeocodingmanagerengine.sip"
#include <qgeocodingmanagerengine.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"

#line 24 "sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtLocation/qgeocodereply.sip"
#include <qgeocodereply.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 28 "sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 28 "sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 28 "sip/QtPositioning/qgeoaddress.sip"
#include <qgeoaddress.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtLocation/sipQtLocationQGeoCodingManagerEngine.cpp"


class sipQGeoCodingManagerEngine : public  ::QGeoCodingManagerEngine
{
public:
    sipQGeoCodingManagerEngine(const  ::QVariantMap&, ::QObject*);
    virtual ~sipQGeoCodingManagerEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QGeoCodeReply* reverseGeocode(const  ::QGeoCoordinate&,const  ::QGeoShape&);
     ::QGeoCodeReply* geocode(const  ::QString&,int,int,const  ::QGeoShape&);
     ::QGeoCodeReply* geocode(const  ::QGeoAddress&,const  ::QGeoShape&);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoCodingManagerEngine(const sipQGeoCodingManagerEngine &);
    sipQGeoCodingManagerEngine &operator = (const sipQGeoCodingManagerEngine &);

    char sipPyMethods[10];
};

sipQGeoCodingManagerEngine::sipQGeoCodingManagerEngine(const  ::QVariantMap& a0, ::QObject*a1):  ::QGeoCodingManagerEngine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoCodingManagerEngine::~sipQGeoCodingManagerEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGeoCodingManagerEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QGeoCodingManagerEngine);

    return  ::QGeoCodingManagerEngine::metaObject();
}

int sipQGeoCodingManagerEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGeoCodingManagerEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QGeoCodingManagerEngine,_c,_id,_a);

    return _id;
}

void *sipQGeoCodingManagerEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QGeoCodingManagerEngine, _clname, &sipCpp) ? sipCpp :  ::QGeoCodingManagerEngine::qt_metacast(_clname));
}

 ::QGeoCodeReply* sipQGeoCodingManagerEngine::reverseGeocode(const  ::QGeoCoordinate& a0,const  ::QGeoShape& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_reverseGeocode);

    if (!sipMeth)
        return  ::QGeoCodingManagerEngine::reverseGeocode(a0,a1);

    extern  ::QGeoCodeReply* sipVH_QtLocation_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGeoCoordinate&,const  ::QGeoShape&);

    return sipVH_QtLocation_9(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QGeoCodeReply* sipQGeoCodingManagerEngine::geocode(const  ::QString& a0,int a1,int a2,const  ::QGeoShape& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_geocode);

    if (!sipMeth)
        return  ::QGeoCodingManagerEngine::geocode(a0,a1,a2,a3);

    extern  ::QGeoCodeReply* sipVH_QtLocation_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,int,int,const  ::QGeoShape&);

    return sipVH_QtLocation_8(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QGeoCodeReply* sipQGeoCodingManagerEngine::geocode(const  ::QGeoAddress& a0,const  ::QGeoShape& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_geocode);

    if (!sipMeth)
        return  ::QGeoCodingManagerEngine::geocode(a0,a1);

    extern  ::QGeoCodeReply* sipVH_QtLocation_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGeoAddress&,const  ::QGeoShape&);

    return sipVH_QtLocation_7(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoCodingManagerEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QGeoCodingManagerEngine::event(a0);

    extern bool sipVH_QtLocation_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtLocation_5(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGeoCodingManagerEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGeoCodingManagerEngine::eventFilter(a0,a1);

    extern bool sipVH_QtLocation_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtLocation_4(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQGeoCodingManagerEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGeoCodingManagerEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtLocation_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtLocation_3(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoCodingManagerEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGeoCodingManagerEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtLocation_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtLocation_2(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoCodingManagerEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGeoCodingManagerEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtLocation_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtLocation_1(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoCodingManagerEngine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGeoCodingManagerEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtLocation_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtLocation_0(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGeoCodingManagerEngine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGeoCodingManagerEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtLocation_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtLocation_0(sipGILState, sipImportedVirtErrorHandlers_QtLocation_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGeoCodingManagerEngine_managerName, "managerName(self) -> str");

extern "C" {static PyObject *meth_QGeoCodingManagerEngine_managerName(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManagerEngine_managerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->managerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_managerName, doc_QGeoCodingManagerEngine_managerName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManagerEngine_managerVersion, "managerVersion(self) -> int");

extern "C" {static PyObject *meth_QGeoCodingManagerEngine_managerVersion(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManagerEngine_managerVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->managerVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_managerVersion, doc_QGeoCodingManagerEngine_managerVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManagerEngine_geocode, "geocode(self, QGeoAddress, QGeoShape) -> QGeoCodeReply\n"
"geocode(self, str, int, int, QGeoShape) -> QGeoCodeReply");

extern "C" {static PyObject *meth_QGeoCodingManagerEngine_geocode(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManagerEngine_geocode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGeoAddress* a0;
        const  ::QGeoShape* a1;
         ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp, sipType_QGeoAddress, &a0, sipType_QGeoShape, &a1))
        {
             ::QGeoCodeReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGeoCodingManagerEngine::geocode(*a0,*a1) : sipCpp->geocode(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QGeoCodeReply,NULL);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        int a2;
        const  ::QGeoShape* a3;
         ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1iiJ9", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, sipType_QGeoShape, &a3))
        {
             ::QGeoCodeReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGeoCodingManagerEngine::geocode(*a0,a1,a2,*a3) : sipCpp->geocode(*a0,a1,a2,*a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGeoCodeReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_geocode, doc_QGeoCodingManagerEngine_geocode);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManagerEngine_reverseGeocode, "reverseGeocode(self, QGeoCoordinate, QGeoShape) -> QGeoCodeReply");

extern "C" {static PyObject *meth_QGeoCodingManagerEngine_reverseGeocode(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManagerEngine_reverseGeocode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QGeoCoordinate* a0;
        const  ::QGeoShape* a1;
         ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp, sipType_QGeoCoordinate, &a0, sipType_QGeoShape, &a1))
        {
             ::QGeoCodeReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGeoCodingManagerEngine::reverseGeocode(*a0,*a1) : sipCpp->reverseGeocode(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QGeoCodeReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_reverseGeocode, doc_QGeoCodingManagerEngine_reverseGeocode);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManagerEngine_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QGeoCodingManagerEngine_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManagerEngine_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLocale* a0;
         ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_setLocale, doc_QGeoCodingManagerEngine_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManagerEngine_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QGeoCodingManagerEngine_locale(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManagerEngine_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGeoCodingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodingManagerEngine, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_locale, doc_QGeoCodingManagerEngine_locale);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGeoCodingManagerEngine(void *, const sipTypeDef *);}
static void *cast_QGeoCodingManagerEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGeoCodingManagerEngine *sipCpp = reinterpret_cast< ::QGeoCodingManagerEngine *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoCodingManagerEngine(void *, int);}
static void release_QGeoCodingManagerEngine(void *sipCppV, int)
{
     ::QGeoCodingManagerEngine *sipCpp = reinterpret_cast< ::QGeoCodingManagerEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoCodingManagerEngine(sipSimpleWrapper *);}
static void dealloc_QGeoCodingManagerEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGeoCodingManagerEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGeoCodingManagerEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGeoCodingManagerEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoCodingManagerEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoCodingManagerEngine *sipCpp = 0;

    {
        const  ::QVariantMap* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QVariantMap,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQGeoCodingManagerEngine(*a0,a1);
            sipReleaseType(const_cast< ::QVariantMap *>(a0),sipType_QVariantMap,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoCodingManagerEngine[] = {{7, 0, 1}};


static PyMethodDef methods_QGeoCodingManagerEngine[] = {
    {SIP_MLNAME_CAST(sipName_geocode), meth_QGeoCodingManagerEngine_geocode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManagerEngine_geocode)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QGeoCodingManagerEngine_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManagerEngine_locale)},
    {SIP_MLNAME_CAST(sipName_managerName), meth_QGeoCodingManagerEngine_managerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManagerEngine_managerName)},
    {SIP_MLNAME_CAST(sipName_managerVersion), meth_QGeoCodingManagerEngine_managerVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManagerEngine_managerVersion)},
    {SIP_MLNAME_CAST(sipName_reverseGeocode), meth_QGeoCodingManagerEngine_reverseGeocode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManagerEngine_reverseGeocode)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QGeoCodingManagerEngine_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManagerEngine_setLocale)}
};

PyDoc_STRVAR(doc_QGeoCodingManagerEngine, "\1QGeoCodingManagerEngine(Dict[str, Any], parent: QObject = None)");


extern "C" {static int emit_QGeoCodingManagerEngine_error(void *, PyObject *);}

static int emit_QGeoCodingManagerEngine_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QGeoCodingManagerEngine *sipCpp = reinterpret_cast<QGeoCodingManagerEngine *>(sipCppV);

    {
         ::QGeoCodeReply* a0;
         ::QGeoCodeReply::Error a1;
         ::QString a2def = QString();
         ::QString* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E|J1", sipType_QGeoCodeReply, &a0, sipType_QGeoCodeReply_Error, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(a2,sipType_QString,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGeoCodingManagerEngine, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoCodingManagerEngine[] = {
    {"error(QGeoCodeReply*,QGeoCodeReply::Error,QString)", "\1error(self, QGeoCodeReply, QGeoCodeReply.Error, errorString: str = '')", 0, emit_QGeoCodingManagerEngine_error},
    {"finished(QGeoCodeReply*)", "\1finished(self, QGeoCodeReply)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QGeoCodingManagerEngine = {
    & ::QGeoCodingManagerEngine::staticMetaObject,
    0,
    signals_QGeoCodingManagerEngine,
    0
};


sipClassTypeDef sipTypeDef_QtLocation_QGeoCodingManagerEngine = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGeoCodingManagerEngine,
        {0},
        &plugin_QGeoCodingManagerEngine
    },
    {
        sipNameNr_QGeoCodingManagerEngine,
        {0, 0, 1},
        6, methods_QGeoCodingManagerEngine,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoCodingManagerEngine,
    -1,
    -1,
    supers_QGeoCodingManagerEngine,
    0,
    init_type_QGeoCodingManagerEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoCodingManagerEngine,
    0,
    0,
    0,
    release_QGeoCodingManagerEngine,
    cast_QGeoCodingManagerEngine,
    0,
    0,
    0,
    0,
    0,
    0
};
