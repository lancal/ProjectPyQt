/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 93 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtHelp/qhelpsearchengine.sip"
#include <qhelpsearchengine.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtHelp/sipQtHelpQHelpSearchResult.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtHelp/sipQtHelpQHelpSearchResult.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtHelp/sipQtHelpQHelpSearchResult.cpp"


PyDoc_STRVAR(doc_QHelpSearchResult_title, "title(self) -> str");

extern "C" {static PyObject *meth_QHelpSearchResult_title(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchResult_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHelpSearchResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchResult, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchResult, sipName_title, doc_QHelpSearchResult_title);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchResult_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QHelpSearchResult_url(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchResult_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHelpSearchResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchResult, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchResult, sipName_url, doc_QHelpSearchResult_url);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpSearchResult_snippet, "snippet(self) -> str");

extern "C" {static PyObject *meth_QHelpSearchResult_snippet(PyObject *, PyObject *);}
static PyObject *meth_QHelpSearchResult_snippet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHelpSearchResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpSearchResult, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->snippet());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpSearchResult, sipName_snippet, doc_QHelpSearchResult_snippet);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpSearchResult(void *, int);}
static void release_QHelpSearchResult(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHelpSearchResult *>(sipCppV);
}


extern "C" {static void assign_QHelpSearchResult(void *, SIP_SSIZE_T, void *);}
static void assign_QHelpSearchResult(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHelpSearchResult *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHelpSearchResult *>(sipSrc);
}


extern "C" {static void *array_QHelpSearchResult(SIP_SSIZE_T);}
static void *array_QHelpSearchResult(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHelpSearchResult[sipNrElem];
}


extern "C" {static void *copy_QHelpSearchResult(const void *, SIP_SSIZE_T);}
static void *copy_QHelpSearchResult(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHelpSearchResult(reinterpret_cast<const  ::QHelpSearchResult *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHelpSearchResult(sipSimpleWrapper *);}
static void dealloc_QHelpSearchResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHelpSearchResult(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHelpSearchResult(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHelpSearchResult(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHelpSearchResult *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QHelpSearchResult();

            return sipCpp;
        }
    }

    {
        const  ::QHelpSearchResult* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QHelpSearchResult, &a0))
        {
            sipCpp = new  ::QHelpSearchResult(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J1J1", sipType_QUrl, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp = new  ::QHelpSearchResult(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QHelpSearchResult[] = {
    {SIP_MLNAME_CAST(sipName_snippet), meth_QHelpSearchResult_snippet, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchResult_snippet)},
    {SIP_MLNAME_CAST(sipName_title), meth_QHelpSearchResult_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchResult_title)},
    {SIP_MLNAME_CAST(sipName_url), meth_QHelpSearchResult_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpSearchResult_url)}
};

PyDoc_STRVAR(doc_QHelpSearchResult, "\1QHelpSearchResult()\n"
"QHelpSearchResult(QHelpSearchResult)\n"
"QHelpSearchResult(QUrl, str, str)");


static pyqt5ClassPluginDef plugin_QHelpSearchResult = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtHelp_QHelpSearchResult = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHelpSearchResult,
        {0},
        &plugin_QHelpSearchResult
    },
    {
        sipNameNr_QHelpSearchResult,
        {0, 0, 1},
        3, methods_QHelpSearchResult,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHelpSearchResult,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QHelpSearchResult,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpSearchResult,
    assign_QHelpSearchResult,
    array_QHelpSearchResult,
    copy_QHelpSearchResult,
    release_QHelpSearchResult,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
