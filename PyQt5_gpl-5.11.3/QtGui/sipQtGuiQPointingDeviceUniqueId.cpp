/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 910 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQPointingDeviceUniqueId.cpp"



PyDoc_STRVAR(doc_QPointingDeviceUniqueId_fromNumericId, "fromNumericId(int) -> QPointingDeviceUniqueId");

extern "C" {static PyObject *meth_QPointingDeviceUniqueId_fromNumericId(PyObject *, PyObject *);}
static PyObject *meth_QPointingDeviceUniqueId_fromNumericId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
             ::QPointingDeviceUniqueId*sipRes;

            sipRes = new  ::QPointingDeviceUniqueId( ::QPointingDeviceUniqueId::fromNumericId(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointingDeviceUniqueId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointingDeviceUniqueId, sipName_fromNumericId, doc_QPointingDeviceUniqueId_fromNumericId);

    return NULL;
}


PyDoc_STRVAR(doc_QPointingDeviceUniqueId_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPointingDeviceUniqueId_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPointingDeviceUniqueId_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPointingDeviceUniqueId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointingDeviceUniqueId, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointingDeviceUniqueId, sipName_isValid, doc_QPointingDeviceUniqueId_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QPointingDeviceUniqueId_numericId, "numericId(self) -> int");

extern "C" {static PyObject *meth_QPointingDeviceUniqueId_numericId(PyObject *, PyObject *);}
static PyObject *meth_QPointingDeviceUniqueId_numericId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPointingDeviceUniqueId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointingDeviceUniqueId, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->numericId();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointingDeviceUniqueId, sipName_numericId, doc_QPointingDeviceUniqueId_numericId);

    return NULL;
}


extern "C" {static PyObject *slot_QPointingDeviceUniqueId___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPointingDeviceUniqueId___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPointingDeviceUniqueId *sipCpp = reinterpret_cast< ::QPointingDeviceUniqueId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointingDeviceUniqueId));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
         ::QPointingDeviceUniqueId* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointingDeviceUniqueId, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPointingDeviceUniqueId, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPointingDeviceUniqueId___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPointingDeviceUniqueId___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPointingDeviceUniqueId *sipCpp = reinterpret_cast< ::QPointingDeviceUniqueId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointingDeviceUniqueId));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
         ::QPointingDeviceUniqueId* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointingDeviceUniqueId, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPointingDeviceUniqueId, sipSelf, sipArg);
}


extern "C" {static long slot_QPointingDeviceUniqueId___hash__(PyObject *);}
static long slot_QPointingDeviceUniqueId___hash__(PyObject *sipSelf)
{
     ::QPointingDeviceUniqueId *sipCpp = reinterpret_cast< ::QPointingDeviceUniqueId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointingDeviceUniqueId));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 920 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtGui/qevent.sip"
        sipRes = qHash(*sipCpp);
#line 196 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQPointingDeviceUniqueId.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPointingDeviceUniqueId(void *, int);}
static void release_QPointingDeviceUniqueId(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPointingDeviceUniqueId *>(sipCppV);
}


extern "C" {static void assign_QPointingDeviceUniqueId(void *, SIP_SSIZE_T, void *);}
static void assign_QPointingDeviceUniqueId(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPointingDeviceUniqueId *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPointingDeviceUniqueId *>(sipSrc);
}


extern "C" {static void *array_QPointingDeviceUniqueId(SIP_SSIZE_T);}
static void *array_QPointingDeviceUniqueId(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPointingDeviceUniqueId[sipNrElem];
}


extern "C" {static void *copy_QPointingDeviceUniqueId(const void *, SIP_SSIZE_T);}
static void *copy_QPointingDeviceUniqueId(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPointingDeviceUniqueId(reinterpret_cast<const  ::QPointingDeviceUniqueId *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPointingDeviceUniqueId(sipSimpleWrapper *);}
static void dealloc_QPointingDeviceUniqueId(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPointingDeviceUniqueId(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPointingDeviceUniqueId(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPointingDeviceUniqueId(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPointingDeviceUniqueId *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QPointingDeviceUniqueId();

            return sipCpp;
        }
    }

    {
        const  ::QPointingDeviceUniqueId* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPointingDeviceUniqueId, &a0))
        {
            sipCpp = new  ::QPointingDeviceUniqueId(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPointingDeviceUniqueId[] = {
    {(void *)slot_QPointingDeviceUniqueId___eq__, eq_slot},
    {(void *)slot_QPointingDeviceUniqueId___ne__, ne_slot},
    {(void *)slot_QPointingDeviceUniqueId___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPointingDeviceUniqueId[] = {
    {SIP_MLNAME_CAST(sipName_fromNumericId), meth_QPointingDeviceUniqueId_fromNumericId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointingDeviceUniqueId_fromNumericId)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPointingDeviceUniqueId_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointingDeviceUniqueId_isValid)},
    {SIP_MLNAME_CAST(sipName_numericId), meth_QPointingDeviceUniqueId_numericId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointingDeviceUniqueId_numericId)}
};

PyDoc_STRVAR(doc_QPointingDeviceUniqueId, "\1QPointingDeviceUniqueId()\n"
"QPointingDeviceUniqueId(QPointingDeviceUniqueId)");


static pyqt5ClassPluginDef plugin_QPointingDeviceUniqueId = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QPointingDeviceUniqueId = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPointingDeviceUniqueId,
        {0},
        &plugin_QPointingDeviceUniqueId
    },
    {
        sipNameNr_QPointingDeviceUniqueId,
        {0, 0, 1},
        3, methods_QPointingDeviceUniqueId,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPointingDeviceUniqueId,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPointingDeviceUniqueId,
    init_type_QPointingDeviceUniqueId,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPointingDeviceUniqueId,
    assign_QPointingDeviceUniqueId,
    array_QPointingDeviceUniqueId,
    copy_QPointingDeviceUniqueId,
    release_QPointingDeviceUniqueId,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
