/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtGui/qopengltextureblitter.sip"
#include <qopengltextureblitter.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQOpenGLTextureBlitter.cpp"

#line 483 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQOpenGLTextureBlitter.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQOpenGLTextureBlitter.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQOpenGLTextureBlitter.cpp"
#line 30 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQOpenGLTextureBlitter.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtGui/sipQtGuiQOpenGLTextureBlitter.cpp"


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_create, doc_QOpenGLTextureBlitter_create);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_isCreated, doc_QOpenGLTextureBlitter_isCreated);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_destroy, doc_QOpenGLTextureBlitter_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_supportsExternalOESTarget, "supportsExternalOESTarget(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_supportsExternalOESTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_supportsExternalOESTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsExternalOESTarget();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_supportsExternalOESTarget, doc_QOpenGLTextureBlitter_supportsExternalOESTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_bind, "bind(self, target: int = GL_TEXTURE_2D)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_bind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_bind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::GLenum a0 = GL_TEXTURE_2D;
         ::QOpenGLTextureBlitter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_target,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0))
        {
            sipCpp->bind(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_bind, doc_QOpenGLTextureBlitter_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_release, doc_QOpenGLTextureBlitter_release);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_setRedBlueSwizzle, "setRedBlueSwizzle(self, bool)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_setRedBlueSwizzle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_setRedBlueSwizzle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0))
        {
            sipCpp->setRedBlueSwizzle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_setRedBlueSwizzle, doc_QOpenGLTextureBlitter_setRedBlueSwizzle);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_setOpacity, doc_QOpenGLTextureBlitter_setOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_blit, "blit(self, int, QMatrix4x4, QOpenGLTextureBlitter.Origin)\n"
"blit(self, int, QMatrix4x4, QMatrix3x3)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_blit(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_blit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::GLuint a0;
        const  ::QMatrix4x4* a1;
         ::QOpenGLTextureBlitter::Origin a2;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9E", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0, sipType_QMatrix4x4, &a1, sipType_QOpenGLTextureBlitter_Origin, &a2))
        {
            sipCpp->blit(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::GLuint a0;
        const  ::QMatrix4x4* a1;
        const  ::QMatrix3x3* a2;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9J9", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0, sipType_QMatrix4x4, &a1, sipType_QMatrix3x3, &a2))
        {
            sipCpp->blit(a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_blit, doc_QOpenGLTextureBlitter_blit);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_targetTransform, "targetTransform(QRectF, QRect) -> QMatrix4x4");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_targetTransform(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_targetTransform(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRectF* a0;
        const  ::QRect* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QRectF, &a0, sipType_QRect, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4( ::QOpenGLTextureBlitter::targetTransform(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_targetTransform, doc_QOpenGLTextureBlitter_targetTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_sourceTransform, "sourceTransform(QRectF, QSize, QOpenGLTextureBlitter.Origin) -> QMatrix3x3");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_sourceTransform(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_sourceTransform(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRectF* a0;
        const  ::QSize* a1;
         ::QOpenGLTextureBlitter::Origin a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9E", sipType_QRectF, &a0, sipType_QSize, &a1, sipType_QOpenGLTextureBlitter_Origin, &a2))
        {
             ::QMatrix3x3*sipRes;

            sipRes = new  ::QMatrix3x3( ::QOpenGLTextureBlitter::sourceTransform(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x3,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_sourceTransform, doc_QOpenGLTextureBlitter_sourceTransform);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLTextureBlitter(void *, int);}
static void release_QOpenGLTextureBlitter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLTextureBlitter *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLTextureBlitter(sipSimpleWrapper *);}
static void dealloc_QOpenGLTextureBlitter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLTextureBlitter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLTextureBlitter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLTextureBlitter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLTextureBlitter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLTextureBlitter();

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QOpenGLTextureBlitter[] = {
    {SIP_MLNAME_CAST(sipName_bind), (PyCFunction)meth_QOpenGLTextureBlitter_bind, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_bind)},
    {SIP_MLNAME_CAST(sipName_blit), meth_QOpenGLTextureBlitter_blit, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_blit)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLTextureBlitter_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_create)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOpenGLTextureBlitter_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_destroy)},
    {SIP_MLNAME_CAST(sipName_isCreated), meth_QOpenGLTextureBlitter_isCreated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_isCreated)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLTextureBlitter_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_release)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QOpenGLTextureBlitter_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setRedBlueSwizzle), meth_QOpenGLTextureBlitter_setRedBlueSwizzle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_setRedBlueSwizzle)},
    {SIP_MLNAME_CAST(sipName_sourceTransform), meth_QOpenGLTextureBlitter_sourceTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_sourceTransform)},
    {SIP_MLNAME_CAST(sipName_supportsExternalOESTarget), meth_QOpenGLTextureBlitter_supportsExternalOESTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_supportsExternalOESTarget)},
    {SIP_MLNAME_CAST(sipName_targetTransform), meth_QOpenGLTextureBlitter_targetTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_targetTransform)}
};

static sipEnumMemberDef enummembers_QOpenGLTextureBlitter[] = {
    {sipName_OriginBottomLeft, static_cast<int>( ::QOpenGLTextureBlitter::OriginBottomLeft), 172},
    {sipName_OriginTopLeft, static_cast<int>( ::QOpenGLTextureBlitter::OriginTopLeft), 172},
};

PyDoc_STRVAR(doc_QOpenGLTextureBlitter, "\1QOpenGLTextureBlitter()");


static pyqt5ClassPluginDef plugin_QOpenGLTextureBlitter = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLTextureBlitter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLTextureBlitter,
        {0},
        &plugin_QOpenGLTextureBlitter
    },
    {
        sipNameNr_QOpenGLTextureBlitter,
        {0, 0, 1},
        11, methods_QOpenGLTextureBlitter,
        2, enummembers_QOpenGLTextureBlitter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLTextureBlitter,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QOpenGLTextureBlitter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLTextureBlitter,
    0,
    0,
    0,
    release_QOpenGLTextureBlitter,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
