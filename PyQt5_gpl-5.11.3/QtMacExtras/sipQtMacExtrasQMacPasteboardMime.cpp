/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMacExtras.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtMacExtras/qmacpasteboardmime.sip"
#include <qmacpasteboardmime.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacPasteboardMime.cpp"

#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacPasteboardMime.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacPasteboardMime.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacPasteboardMime.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacPasteboardMime.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacPasteboardMime.cpp"


class sipQMacPasteboardMime : public  ::QMacPasteboardMime
{
public:
    sipQMacPasteboardMime(char);
    sipQMacPasteboardMime(const  ::QMacPasteboardMime&);
    virtual ~sipQMacPasteboardMime();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int count( ::QMimeData*);
    QList< ::QByteArray> convertFromMime(const  ::QString&, ::QVariant, ::QString);
     ::QVariant convertToMime(const  ::QString&,QList< ::QByteArray>, ::QString);
     ::QString flavorFor(const  ::QString&);
     ::QString mimeFor( ::QString);
    bool canConvert(const  ::QString&, ::QString);
     ::QString convertorName();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMacPasteboardMime(const sipQMacPasteboardMime &);
    sipQMacPasteboardMime &operator = (const sipQMacPasteboardMime &);

    char sipPyMethods[7];
};

sipQMacPasteboardMime::sipQMacPasteboardMime(char a0):  ::QMacPasteboardMime(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMacPasteboardMime::sipQMacPasteboardMime(const  ::QMacPasteboardMime& a0):  ::QMacPasteboardMime(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMacPasteboardMime::~sipQMacPasteboardMime()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQMacPasteboardMime::count( ::QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return  ::QMacPasteboardMime::count(a0);

    extern int sipVH_QtMacExtras_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMimeData*);

    return sipVH_QtMacExtras_6(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

QList< ::QByteArray> sipQMacPasteboardMime::convertFromMime(const  ::QString& a0, ::QVariant a1, ::QString a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QMacPasteboardMime,sipName_convertFromMime);

    if (!sipMeth)
        return QList< ::QByteArray>();

    extern QList< ::QByteArray> sipVH_QtMacExtras_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QVariant, ::QString);

    return sipVH_QtMacExtras_5(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQMacPasteboardMime::convertToMime(const  ::QString& a0,QList< ::QByteArray> a1, ::QString a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QMacPasteboardMime,sipName_convertToMime);

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtMacExtras_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,QList< ::QByteArray>, ::QString);

    return sipVH_QtMacExtras_4(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QString sipQMacPasteboardMime::flavorFor(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QMacPasteboardMime,sipName_flavorFor);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtMacExtras_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtMacExtras_3(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QString sipQMacPasteboardMime::mimeFor( ::QString a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QMacPasteboardMime,sipName_mimeFor);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtMacExtras_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString);

    return sipVH_QtMacExtras_2(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMacPasteboardMime::canConvert(const  ::QString& a0, ::QString a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QMacPasteboardMime,sipName_canConvert);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtMacExtras_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QString);

    return sipVH_QtMacExtras_1(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QString sipQMacPasteboardMime::convertorName()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QMacPasteboardMime,sipName_convertorName);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtMacExtras_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMacExtras_0(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMacPasteboardMime_convertorName, "convertorName(self) -> str");

extern "C" {static PyObject *meth_QMacPasteboardMime_convertorName(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_convertorName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacPasteboardMime, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMacPasteboardMime, sipName_convertorName);
                return NULL;
            }

            sipRes = new  ::QString(sipCpp->convertorName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_convertorName, doc_QMacPasteboardMime_convertorName);

    return NULL;
}


PyDoc_STRVAR(doc_QMacPasteboardMime_canConvert, "canConvert(self, str, str) -> bool");

extern "C" {static PyObject *meth_QMacPasteboardMime_canConvert(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_canConvert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMacPasteboardMime, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMacPasteboardMime, sipName_canConvert);
                return NULL;
            }

            sipRes = sipCpp->canConvert(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_canConvert, doc_QMacPasteboardMime_canConvert);

    return NULL;
}


PyDoc_STRVAR(doc_QMacPasteboardMime_mimeFor, "mimeFor(self, str) -> str");

extern "C" {static PyObject *meth_QMacPasteboardMime_mimeFor(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_mimeFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QString* a0;
        int a0State = 0;
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMacPasteboardMime, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMacPasteboardMime, sipName_mimeFor);
                return NULL;
            }

            sipRes = new  ::QString(sipCpp->mimeFor(*a0));
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_mimeFor, doc_QMacPasteboardMime_mimeFor);

    return NULL;
}


PyDoc_STRVAR(doc_QMacPasteboardMime_flavorFor, "flavorFor(self, str) -> str");

extern "C" {static PyObject *meth_QMacPasteboardMime_flavorFor(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_flavorFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMacPasteboardMime, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMacPasteboardMime, sipName_flavorFor);
                return NULL;
            }

            sipRes = new  ::QString(sipCpp->flavorFor(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_flavorFor, doc_QMacPasteboardMime_flavorFor);

    return NULL;
}


PyDoc_STRVAR(doc_QMacPasteboardMime_convertToMime, "convertToMime(self, str, Iterable[Union[QByteArray, bytes, bytearray]], str) -> Any");

extern "C" {static PyObject *meth_QMacPasteboardMime_convertToMime(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_convertToMime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        QList< ::QByteArray>* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QMacPasteboardMime, &sipCpp, sipType_QString,&a0, &a0State, sipType_QList_0100QByteArray,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
             ::QVariant*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMacPasteboardMime, sipName_convertToMime);
                return NULL;
            }

            sipRes = new  ::QVariant(sipCpp->convertToMime(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QList_0100QByteArray,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_convertToMime, doc_QMacPasteboardMime_convertToMime);

    return NULL;
}


PyDoc_STRVAR(doc_QMacPasteboardMime_convertFromMime, "convertFromMime(self, str, Any, str) -> List[QByteArray]");

extern "C" {static PyObject *meth_QMacPasteboardMime_convertFromMime(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_convertFromMime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QVariant* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QMacPasteboardMime, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, sipType_QString,&a2, &a2State))
        {
            QList< ::QByteArray>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMacPasteboardMime, sipName_convertFromMime);
                return NULL;
            }

            sipRes = new QList< ::QByteArray>(sipCpp->convertFromMime(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_convertFromMime, doc_QMacPasteboardMime_convertFromMime);

    return NULL;
}


PyDoc_STRVAR(doc_QMacPasteboardMime_count, "count(self, QMimeData) -> int");

extern "C" {static PyObject *meth_QMacPasteboardMime_count(PyObject *, PyObject *);}
static PyObject *meth_QMacPasteboardMime_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMimeData* a0;
         ::QMacPasteboardMime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMacPasteboardMime, &sipCpp, sipType_QMimeData, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMacPasteboardMime::count(a0) : sipCpp->count(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacPasteboardMime, sipName_count, doc_QMacPasteboardMime_count);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMacPasteboardMime(void *, int);}
static void release_QMacPasteboardMime(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQMacPasteboardMime *>(sipCppV);
    else
        delete reinterpret_cast< ::QMacPasteboardMime *>(sipCppV);
}


extern "C" {static void dealloc_QMacPasteboardMime(sipSimpleWrapper *);}
static void dealloc_QMacPasteboardMime(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMacPasteboardMime *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMacPasteboardMime(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMacPasteboardMime(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMacPasteboardMime(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMacPasteboardMime *sipCpp = 0;

    {
        char a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "L", &a0))
        {
            sipCpp = new sipQMacPasteboardMime(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QMacPasteboardMime* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMacPasteboardMime, &a0))
        {
            sipCpp = new sipQMacPasteboardMime(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMacPasteboardMime[] = {
    {SIP_MLNAME_CAST(sipName_canConvert), meth_QMacPasteboardMime_canConvert, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_canConvert)},
    {SIP_MLNAME_CAST(sipName_convertFromMime), meth_QMacPasteboardMime_convertFromMime, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_convertFromMime)},
    {SIP_MLNAME_CAST(sipName_convertToMime), meth_QMacPasteboardMime_convertToMime, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_convertToMime)},
    {SIP_MLNAME_CAST(sipName_convertorName), meth_QMacPasteboardMime_convertorName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_convertorName)},
    {SIP_MLNAME_CAST(sipName_count), meth_QMacPasteboardMime_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_count)},
    {SIP_MLNAME_CAST(sipName_flavorFor), meth_QMacPasteboardMime_flavorFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_flavorFor)},
    {SIP_MLNAME_CAST(sipName_mimeFor), meth_QMacPasteboardMime_mimeFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacPasteboardMime_mimeFor)}
};

static sipEnumMemberDef enummembers_QMacPasteboardMime[] = {
    {sipName_MIME_ALL, static_cast<int>( ::QMacPasteboardMime::MIME_ALL), 4},
    {sipName_MIME_CLIP, static_cast<int>( ::QMacPasteboardMime::MIME_CLIP), 4},
    {sipName_MIME_DND, static_cast<int>( ::QMacPasteboardMime::MIME_DND), 4},
    {sipName_MIME_QT3_CONVERTOR, static_cast<int>( ::QMacPasteboardMime::MIME_QT3_CONVERTOR), 4},
    {sipName_MIME_QT_CONVERTOR, static_cast<int>( ::QMacPasteboardMime::MIME_QT_CONVERTOR), 4},
};

PyDoc_STRVAR(doc_QMacPasteboardMime, "\1QMacPasteboardMime(int)\n"
"QMacPasteboardMime(QMacPasteboardMime)");


static pyqt5ClassPluginDef plugin_QMacPasteboardMime = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtMacExtras_QMacPasteboardMime = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMacPasteboardMime,
        {0},
        &plugin_QMacPasteboardMime
    },
    {
        sipNameNr_QMacPasteboardMime,
        {0, 0, 1},
        7, methods_QMacPasteboardMime,
        5, enummembers_QMacPasteboardMime,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMacPasteboardMime,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QMacPasteboardMime,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMacPasteboardMime,
    0,
    0,
    0,
    release_QMacPasteboardMime,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
