/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMacExtras.h"

#line 30 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtMacExtras/qmactoolbaritem.sip"
#include <qmactoolbaritem.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBarItem.cpp"


class sipQMacToolBarItem : public  ::QMacToolBarItem
{
public:
    sipQMacToolBarItem( ::QObject*);
    virtual ~sipQMacToolBarItem();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMacToolBarItem(const sipQMacToolBarItem &);
    sipQMacToolBarItem &operator = (const sipQMacToolBarItem &);

    char sipPyMethods[7];
};

sipQMacToolBarItem::sipQMacToolBarItem( ::QObject*a0):  ::QMacToolBarItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMacToolBarItem::~sipQMacToolBarItem()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMacToolBarItem::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMacExtras_qt_metaobject(sipPySelf,sipType_QMacToolBarItem);

    return  ::QMacToolBarItem::metaObject();
}

int sipQMacToolBarItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMacToolBarItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMacExtras_qt_metacall(sipPySelf,sipType_QMacToolBarItem,_c,_id,_a);

    return _id;
}

void *sipQMacToolBarItem::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMacExtras_qt_metacast(sipPySelf, sipType_QMacToolBarItem, _clname, &sipCpp) ? sipCpp :  ::QMacToolBarItem::qt_metacast(_clname));
}

bool sipQMacToolBarItem::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QMacToolBarItem::event(a0);

    extern bool sipVH_QtMacExtras_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtMacExtras_12(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMacToolBarItem::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMacToolBarItem::eventFilter(a0,a1);

    extern bool sipVH_QtMacExtras_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtMacExtras_11(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMacToolBarItem::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMacToolBarItem::timerEvent(a0);
        return;
    }

    extern void sipVH_QtMacExtras_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtMacExtras_10(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBarItem::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMacToolBarItem::childEvent(a0);
        return;
    }

    extern void sipVH_QtMacExtras_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtMacExtras_9(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBarItem::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMacToolBarItem::customEvent(a0);
        return;
    }

    extern void sipVH_QtMacExtras_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtMacExtras_8(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBarItem::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMacToolBarItem::connectNotify(a0);
        return;
    }

    extern void sipVH_QtMacExtras_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtMacExtras_7(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBarItem::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMacToolBarItem::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtMacExtras_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtMacExtras_7(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMacToolBarItem_selectable, "selectable(self) -> bool");

extern "C" {static PyObject *meth_QMacToolBarItem_selectable(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_selectable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBarItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->selectable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_selectable, doc_QMacToolBarItem_selectable);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_setSelectable, "setSelectable(self, bool)");

extern "C" {static PyObject *meth_QMacToolBarItem_setSelectable(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_setSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMacToolBarItem, &sipCpp, &a0))
        {
            sipCpp->setSelectable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_setSelectable, doc_QMacToolBarItem_setSelectable);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_standardItem, "standardItem(self) -> QMacToolBarItem.StandardItem");

extern "C" {static PyObject *meth_QMacToolBarItem_standardItem(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_standardItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBarItem, &sipCpp))
        {
             ::QMacToolBarItem::StandardItem sipRes;

            sipRes = sipCpp->standardItem();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMacToolBarItem_StandardItem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_standardItem, doc_QMacToolBarItem_standardItem);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_setStandardItem, "setStandardItem(self, QMacToolBarItem.StandardItem)");

extern "C" {static PyObject *meth_QMacToolBarItem_setStandardItem(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_setStandardItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMacToolBarItem::StandardItem a0;
         ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMacToolBarItem, &sipCpp, sipType_QMacToolBarItem_StandardItem, &a0))
        {
            sipCpp->setStandardItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_setStandardItem, doc_QMacToolBarItem_setStandardItem);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_text, "text(self) -> str");

extern "C" {static PyObject *meth_QMacToolBarItem_text(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBarItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_text, doc_QMacToolBarItem_text);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QMacToolBarItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMacToolBarItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_setText, doc_QMacToolBarItem_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QMacToolBarItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBarItem, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_icon, doc_QMacToolBarItem_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QMacToolBarItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QIcon* a0;
         ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMacToolBarItem, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_setIcon, doc_QMacToolBarItem_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBarItem_nativeToolBarItem, "nativeToolBarItem(self) -> NSToolbarItem");

extern "C" {static PyObject *meth_QMacToolBarItem_nativeToolBarItem(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBarItem_nativeToolBarItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMacToolBarItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBarItem, &sipCpp))
        {
             ::NSToolbarItem*sipRes;

            sipRes = sipCpp->nativeToolBarItem();

            return sipConvertFromType(sipRes,sipType_NSToolbarItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBarItem, sipName_nativeToolBarItem, doc_QMacToolBarItem_nativeToolBarItem);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMacToolBarItem(void *, const sipTypeDef *);}
static void *cast_QMacToolBarItem(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMacToolBarItem *sipCpp = reinterpret_cast< ::QMacToolBarItem *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMacToolBarItem(void *, int);}
static void release_QMacToolBarItem(void *sipCppV, int)
{
     ::QMacToolBarItem *sipCpp = reinterpret_cast< ::QMacToolBarItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMacToolBarItem(sipSimpleWrapper *);}
static void dealloc_QMacToolBarItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMacToolBarItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMacToolBarItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMacToolBarItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMacToolBarItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMacToolBarItem *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQMacToolBarItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMacToolBarItem[] = {{5, 0, 1}};


static PyMethodDef methods_QMacToolBarItem[] = {
    {SIP_MLNAME_CAST(sipName_icon), meth_QMacToolBarItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_icon)},
    {SIP_MLNAME_CAST(sipName_nativeToolBarItem), meth_QMacToolBarItem_nativeToolBarItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_nativeToolBarItem)},
    {SIP_MLNAME_CAST(sipName_selectable), meth_QMacToolBarItem_selectable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_selectable)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QMacToolBarItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setSelectable), meth_QMacToolBarItem_setSelectable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_setSelectable)},
    {SIP_MLNAME_CAST(sipName_setStandardItem), meth_QMacToolBarItem_setStandardItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_setStandardItem)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMacToolBarItem_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_setText)},
    {SIP_MLNAME_CAST(sipName_standardItem), meth_QMacToolBarItem_standardItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_standardItem)},
    {SIP_MLNAME_CAST(sipName_text), meth_QMacToolBarItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBarItem_text)}
};

static sipEnumMemberDef enummembers_QMacToolBarItem[] = {
    {sipName_FlexibleSpace, static_cast<int>( ::QMacToolBarItem::FlexibleSpace), 7},
    {sipName_NoStandardItem, static_cast<int>( ::QMacToolBarItem::NoStandardItem), 7},
    {sipName_Space, static_cast<int>( ::QMacToolBarItem::Space), 7},
};

PyDoc_STRVAR(doc_QMacToolBarItem, "\1QMacToolBarItem(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMacToolBarItem[] = {
    {"activated()", "\1activated(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QMacToolBarItem = {
    & ::QMacToolBarItem::staticMetaObject,
    0,
    signals_QMacToolBarItem,
    0
};


sipClassTypeDef sipTypeDef_QtMacExtras_QMacToolBarItem = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMacToolBarItem,
        {0},
        &plugin_QMacToolBarItem
    },
    {
        sipNameNr_QMacToolBarItem,
        {0, 0, 1},
        9, methods_QMacToolBarItem,
        3, enummembers_QMacToolBarItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMacToolBarItem,
    -1,
    -1,
    supers_QMacToolBarItem,
    0,
    init_type_QMacToolBarItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMacToolBarItem,
    0,
    0,
    0,
    release_QMacToolBarItem,
    cast_QMacToolBarItem,
    0,
    0,
    0,
    0,
    0,
    0
};
