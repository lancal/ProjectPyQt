/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMacExtras.h"

#line 30 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtMacExtras/qmactoolbar.sip"
#include <qmactoolbar.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 30 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtMacExtras/qmactoolbaritem.sip"
#include <qmactoolbaritem.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtMacExtras/sipQtMacExtrasQMacToolBar.cpp"


class sipQMacToolBar : public  ::QMacToolBar
{
public:
    sipQMacToolBar( ::QObject*);
    sipQMacToolBar(const  ::QString&, ::QObject*);
    virtual ~sipQMacToolBar();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMacToolBar(const sipQMacToolBar &);
    sipQMacToolBar &operator = (const sipQMacToolBar &);

    char sipPyMethods[7];
};

sipQMacToolBar::sipQMacToolBar( ::QObject*a0):  ::QMacToolBar(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMacToolBar::sipQMacToolBar(const  ::QString& a0, ::QObject*a1):  ::QMacToolBar(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMacToolBar::~sipQMacToolBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMacToolBar::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMacExtras_qt_metaobject(sipPySelf,sipType_QMacToolBar);

    return  ::QMacToolBar::metaObject();
}

int sipQMacToolBar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMacToolBar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMacExtras_qt_metacall(sipPySelf,sipType_QMacToolBar,_c,_id,_a);

    return _id;
}

void *sipQMacToolBar::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMacExtras_qt_metacast(sipPySelf, sipType_QMacToolBar, _clname, &sipCpp) ? sipCpp :  ::QMacToolBar::qt_metacast(_clname));
}

bool sipQMacToolBar::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QMacToolBar::event(a0);

    extern bool sipVH_QtMacExtras_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtMacExtras_12(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMacToolBar::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMacToolBar::eventFilter(a0,a1);

    extern bool sipVH_QtMacExtras_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtMacExtras_11(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMacToolBar::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMacToolBar::timerEvent(a0);
        return;
    }

    extern void sipVH_QtMacExtras_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtMacExtras_10(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBar::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMacToolBar::childEvent(a0);
        return;
    }

    extern void sipVH_QtMacExtras_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtMacExtras_9(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBar::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMacToolBar::customEvent(a0);
        return;
    }

    extern void sipVH_QtMacExtras_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtMacExtras_8(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBar::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMacToolBar::connectNotify(a0);
        return;
    }

    extern void sipVH_QtMacExtras_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtMacExtras_7(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMacToolBar::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMacToolBar::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtMacExtras_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtMacExtras_7(sipGILState, sipImportedVirtErrorHandlers_QtMacExtras_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMacToolBar_addItem, "addItem(self, QIcon, str) -> QMacToolBarItem");

extern "C" {static PyObject *meth_QMacToolBar_addItem(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QIcon* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QMacToolBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
             ::QMacToolBarItem*sipRes;

            sipRes = sipCpp->addItem(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QMacToolBarItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_addItem, doc_QMacToolBar_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_addAllowedItem, "addAllowedItem(self, QIcon, str) -> QMacToolBarItem");

extern "C" {static PyObject *meth_QMacToolBar_addAllowedItem(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_addAllowedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QIcon* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QMacToolBar, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
             ::QMacToolBarItem*sipRes;

            sipRes = sipCpp->addAllowedItem(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QMacToolBarItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_addAllowedItem, doc_QMacToolBar_addAllowedItem);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_addSeparator, "addSeparator(self)");

extern "C" {static PyObject *meth_QMacToolBar_addSeparator(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_addSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBar, &sipCpp))
        {
            sipCpp->addSeparator();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_addSeparator, doc_QMacToolBar_addSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_setItems, "setItems(self, Iterable[QMacToolBarItem])");

extern "C" {static PyObject *meth_QMacToolBar_setItems(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_setItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QList< ::QMacToolBarItem*>* a0;
        int a0State = 0;
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMacToolBar, &sipCpp, sipType_QList_0101QMacToolBarItem,&a0, &a0State))
        {
            sipCpp->setItems(*a0);
            sipReleaseType(a0,sipType_QList_0101QMacToolBarItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_setItems, doc_QMacToolBar_setItems);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_items, "items(self) -> List[QMacToolBarItem]");

extern "C" {static PyObject *meth_QMacToolBar_items(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_items(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBar, &sipCpp))
        {
            QList< ::QMacToolBarItem*>*sipRes;

            sipRes = new QList< ::QMacToolBarItem*>(sipCpp->items());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QMacToolBarItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_items, doc_QMacToolBar_items);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_setAllowedItems, "setAllowedItems(self, Iterable[QMacToolBarItem])");

extern "C" {static PyObject *meth_QMacToolBar_setAllowedItems(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_setAllowedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QList< ::QMacToolBarItem*>* a0;
        int a0State = 0;
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMacToolBar, &sipCpp, sipType_QList_0101QMacToolBarItem,&a0, &a0State))
        {
            sipCpp->setAllowedItems(*a0);
            sipReleaseType(a0,sipType_QList_0101QMacToolBarItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_setAllowedItems, doc_QMacToolBar_setAllowedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_allowedItems, "allowedItems(self) -> List[QMacToolBarItem]");

extern "C" {static PyObject *meth_QMacToolBar_allowedItems(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_allowedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBar, &sipCpp))
        {
            QList< ::QMacToolBarItem*>*sipRes;

            sipRes = new QList< ::QMacToolBarItem*>(sipCpp->allowedItems());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QMacToolBarItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_allowedItems, doc_QMacToolBar_allowedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_attachToWindow, "attachToWindow(self, QWindow)");

extern "C" {static PyObject *meth_QMacToolBar_attachToWindow(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_attachToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWindow* a0;
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMacToolBar, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->attachToWindow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_attachToWindow, doc_QMacToolBar_attachToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_detachFromWindow, "detachFromWindow(self)");

extern "C" {static PyObject *meth_QMacToolBar_detachFromWindow(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_detachFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBar, &sipCpp))
        {
            sipCpp->detachFromWindow();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_detachFromWindow, doc_QMacToolBar_detachFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QMacToolBar_nativeToolbar, "nativeToolbar(self) -> NSToolbar");

extern "C" {static PyObject *meth_QMacToolBar_nativeToolbar(PyObject *, PyObject *);}
static PyObject *meth_QMacToolBar_nativeToolbar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMacToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMacToolBar, &sipCpp))
        {
             ::NSToolbar*sipRes;

            sipRes = sipCpp->nativeToolbar();

            return sipConvertFromType(sipRes,sipType_NSToolbar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMacToolBar, sipName_nativeToolbar, doc_QMacToolBar_nativeToolbar);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMacToolBar(void *, const sipTypeDef *);}
static void *cast_QMacToolBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMacToolBar *sipCpp = reinterpret_cast< ::QMacToolBar *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMacToolBar(void *, int);}
static void release_QMacToolBar(void *sipCppV, int)
{
     ::QMacToolBar *sipCpp = reinterpret_cast< ::QMacToolBar *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMacToolBar(sipSimpleWrapper *);}
static void dealloc_QMacToolBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMacToolBar *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMacToolBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMacToolBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMacToolBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMacToolBar *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQMacToolBar(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQMacToolBar(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMacToolBar[] = {{5, 0, 1}};


static PyMethodDef methods_QMacToolBar[] = {
    {SIP_MLNAME_CAST(sipName_addAllowedItem), meth_QMacToolBar_addAllowedItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_addAllowedItem)},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QMacToolBar_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_addItem)},
    {SIP_MLNAME_CAST(sipName_addSeparator), meth_QMacToolBar_addSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_addSeparator)},
    {SIP_MLNAME_CAST(sipName_allowedItems), meth_QMacToolBar_allowedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_allowedItems)},
    {SIP_MLNAME_CAST(sipName_attachToWindow), meth_QMacToolBar_attachToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_attachToWindow)},
    {SIP_MLNAME_CAST(sipName_detachFromWindow), meth_QMacToolBar_detachFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_detachFromWindow)},
    {SIP_MLNAME_CAST(sipName_items), meth_QMacToolBar_items, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_items)},
    {SIP_MLNAME_CAST(sipName_nativeToolbar), meth_QMacToolBar_nativeToolbar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_nativeToolbar)},
    {SIP_MLNAME_CAST(sipName_setAllowedItems), meth_QMacToolBar_setAllowedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_setAllowedItems)},
    {SIP_MLNAME_CAST(sipName_setItems), meth_QMacToolBar_setItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QMacToolBar_setItems)}
};

PyDoc_STRVAR(doc_QMacToolBar, "\1QMacToolBar(parent: QObject = None)\n"
"QMacToolBar(str, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QMacToolBar = {
    & ::QMacToolBar::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtMacExtras_QMacToolBar = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMacToolBar,
        {0},
        &plugin_QMacToolBar
    },
    {
        sipNameNr_QMacToolBar,
        {0, 0, 1},
        10, methods_QMacToolBar,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMacToolBar,
    -1,
    -1,
    supers_QMacToolBar,
    0,
    init_type_QMacToolBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMacToolBar,
    0,
    0,
    0,
    release_QMacToolBar,
    cast_QMacToolBar,
    0,
    0,
    0,
    0,
    0,
    0
};
