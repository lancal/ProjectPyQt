/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngine.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngine/qquickwebengineprofile.sip"
#include <qquickwebengineprofile.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 28 "sip/QtWebEngineCore/qwebengineurlschemehandler.sip"
#include <qwebengineurlschemehandler.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 28 "sip/QtWebEngineCore/qwebengineurlrequestinterceptor.sip"
#include <qwebengineurlrequestinterceptor.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 28 "sip/QtWebEngineCore/qwebenginecookiestore.sip"
#include <qwebenginecookiestore.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineProfile.cpp"


class sipQQuickWebEngineProfile : public  ::QQuickWebEngineProfile
{
public:
    sipQQuickWebEngineProfile( ::QObject*);
    virtual ~sipQQuickWebEngineProfile();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickWebEngineProfile(const sipQQuickWebEngineProfile &);
    sipQQuickWebEngineProfile &operator = (const sipQQuickWebEngineProfile &);

    char sipPyMethods[7];
};

sipQQuickWebEngineProfile::sipQQuickWebEngineProfile( ::QObject*a0):  ::QQuickWebEngineProfile(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWebEngineProfile::~sipQQuickWebEngineProfile()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickWebEngineProfile::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngine_qt_metaobject(sipPySelf,sipType_QQuickWebEngineProfile);

    return  ::QQuickWebEngineProfile::metaObject();
}

int sipQQuickWebEngineProfile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickWebEngineProfile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngine_qt_metacall(sipPySelf,sipType_QQuickWebEngineProfile,_c,_id,_a);

    return _id;
}

void *sipQQuickWebEngineProfile::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngine_qt_metacast(sipPySelf, sipType_QQuickWebEngineProfile, _clname, &sipCpp) ? sipCpp :  ::QQuickWebEngineProfile::qt_metacast(_clname));
}

bool sipQQuickWebEngineProfile::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QQuickWebEngineProfile::event(a0);

    extern bool sipVH_QtWebEngine_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebEngine_5(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickWebEngineProfile::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickWebEngineProfile::eventFilter(a0,a1);

    extern bool sipVH_QtWebEngine_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebEngine_4(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickWebEngineProfile::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickWebEngineProfile::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngine_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebEngine_3(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineProfile::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickWebEngineProfile::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngine_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebEngine_2(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineProfile::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickWebEngineProfile::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngine_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebEngine_1(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineProfile::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickWebEngineProfile::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebEngine_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWebEngine_0(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineProfile::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickWebEngineProfile::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebEngine_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWebEngine_0(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_storageName, "storageName(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_storageName(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_storageName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->storageName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_storageName, doc_QQuickWebEngineProfile_storageName);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setStorageName, "setStorageName(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setStorageName(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setStorageName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStorageName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setStorageName, doc_QQuickWebEngineProfile_setStorageName);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_isOffTheRecord, "isOffTheRecord(self) -> bool");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_isOffTheRecord(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_isOffTheRecord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOffTheRecord();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_isOffTheRecord, doc_QQuickWebEngineProfile_isOffTheRecord);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setOffTheRecord, "setOffTheRecord(self, bool)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setOffTheRecord(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setOffTheRecord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, &a0))
        {
            sipCpp->setOffTheRecord(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setOffTheRecord, doc_QQuickWebEngineProfile_setOffTheRecord);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_persistentStoragePath, "persistentStoragePath(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_persistentStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_persistentStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->persistentStoragePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_persistentStoragePath, doc_QQuickWebEngineProfile_persistentStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setPersistentStoragePath, "setPersistentStoragePath(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setPersistentStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setPersistentStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPersistentStoragePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setPersistentStoragePath, doc_QQuickWebEngineProfile_setPersistentStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_cachePath, "cachePath(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_cachePath(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_cachePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->cachePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_cachePath, doc_QQuickWebEngineProfile_cachePath);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setCachePath, "setCachePath(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setCachePath(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setCachePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCachePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setCachePath, doc_QQuickWebEngineProfile_setCachePath);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_httpUserAgent, "httpUserAgent(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_httpUserAgent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_httpUserAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->httpUserAgent());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_httpUserAgent, doc_QQuickWebEngineProfile_httpUserAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setHttpUserAgent, "setHttpUserAgent(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setHttpUserAgent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setHttpUserAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHttpUserAgent(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setHttpUserAgent, doc_QQuickWebEngineProfile_setHttpUserAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_httpCacheType, "httpCacheType(self) -> QQuickWebEngineProfile.HttpCacheType");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_httpCacheType(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_httpCacheType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QQuickWebEngineProfile::HttpCacheType sipRes;

            sipRes = sipCpp->httpCacheType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWebEngineProfile_HttpCacheType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_httpCacheType, doc_QQuickWebEngineProfile_httpCacheType);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setHttpCacheType, "setHttpCacheType(self, QQuickWebEngineProfile.HttpCacheType)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setHttpCacheType(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setHttpCacheType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWebEngineProfile::HttpCacheType a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QQuickWebEngineProfile_HttpCacheType, &a0))
        {
            sipCpp->setHttpCacheType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setHttpCacheType, doc_QQuickWebEngineProfile_setHttpCacheType);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_persistentCookiesPolicy, "persistentCookiesPolicy(self) -> QQuickWebEngineProfile.PersistentCookiesPolicy");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_persistentCookiesPolicy(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_persistentCookiesPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QQuickWebEngineProfile::PersistentCookiesPolicy sipRes;

            sipRes = sipCpp->persistentCookiesPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWebEngineProfile_PersistentCookiesPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_persistentCookiesPolicy, doc_QQuickWebEngineProfile_persistentCookiesPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setPersistentCookiesPolicy, "setPersistentCookiesPolicy(self, QQuickWebEngineProfile.PersistentCookiesPolicy)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setPersistentCookiesPolicy(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setPersistentCookiesPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWebEngineProfile::PersistentCookiesPolicy a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QQuickWebEngineProfile_PersistentCookiesPolicy, &a0))
        {
            sipCpp->setPersistentCookiesPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setPersistentCookiesPolicy, doc_QQuickWebEngineProfile_setPersistentCookiesPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_httpCacheMaximumSize, "httpCacheMaximumSize(self) -> int");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_httpCacheMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_httpCacheMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->httpCacheMaximumSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_httpCacheMaximumSize, doc_QQuickWebEngineProfile_httpCacheMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setHttpCacheMaximumSize, "setHttpCacheMaximumSize(self, int)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setHttpCacheMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setHttpCacheMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, &a0))
        {
            sipCpp->setHttpCacheMaximumSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setHttpCacheMaximumSize, doc_QQuickWebEngineProfile_setHttpCacheMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_httpAcceptLanguage, "httpAcceptLanguage(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_httpAcceptLanguage(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_httpAcceptLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->httpAcceptLanguage());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_httpAcceptLanguage, doc_QQuickWebEngineProfile_httpAcceptLanguage);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setHttpAcceptLanguage, "setHttpAcceptLanguage(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setHttpAcceptLanguage(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setHttpAcceptLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHttpAcceptLanguage(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setHttpAcceptLanguage, doc_QQuickWebEngineProfile_setHttpAcceptLanguage);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_cookieStore, "cookieStore(self) -> QWebEngineCookieStore");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_cookieStore(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_cookieStore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QWebEngineCookieStore*sipRes;

            sipRes = sipCpp->cookieStore();

            return sipConvertFromType(sipRes,sipType_QWebEngineCookieStore,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_cookieStore, doc_QQuickWebEngineProfile_cookieStore);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setRequestInterceptor, "setRequestInterceptor(self, QWebEngineUrlRequestInterceptor)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setRequestInterceptor(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setRequestInterceptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEngineUrlRequestInterceptor* a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QWebEngineUrlRequestInterceptor, &a0))
        {
            sipCpp->setRequestInterceptor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setRequestInterceptor, doc_QQuickWebEngineProfile_setRequestInterceptor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_urlSchemeHandler, "urlSchemeHandler(self, Union[QByteArray, bytes, bytearray]) -> QWebEngineUrlSchemeHandler");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_urlSchemeHandler(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_urlSchemeHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            const  ::QWebEngineUrlSchemeHandler*sipRes;

            sipRes = sipCpp->urlSchemeHandler(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(const_cast< ::QWebEngineUrlSchemeHandler *>(sipRes),sipType_QWebEngineUrlSchemeHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_urlSchemeHandler, doc_QQuickWebEngineProfile_urlSchemeHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_installUrlSchemeHandler, "installUrlSchemeHandler(self, Union[QByteArray, bytes, bytearray], QWebEngineUrlSchemeHandler)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_installUrlSchemeHandler(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_installUrlSchemeHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QWebEngineUrlSchemeHandler* a1;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QWebEngineUrlSchemeHandler, &a1))
        {
            sipCpp->installUrlSchemeHandler(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_installUrlSchemeHandler, doc_QQuickWebEngineProfile_installUrlSchemeHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_removeUrlScheme, "removeUrlScheme(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_removeUrlScheme(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_removeUrlScheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->removeUrlScheme(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_removeUrlScheme, doc_QQuickWebEngineProfile_removeUrlScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_removeUrlSchemeHandler, "removeUrlSchemeHandler(self, QWebEngineUrlSchemeHandler)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_removeUrlSchemeHandler(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_removeUrlSchemeHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebEngineUrlSchemeHandler* a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QWebEngineUrlSchemeHandler, &a0))
        {
            sipCpp->removeUrlSchemeHandler(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_removeUrlSchemeHandler, doc_QQuickWebEngineProfile_removeUrlSchemeHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_removeAllUrlSchemeHandlers, "removeAllUrlSchemeHandlers(self)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_removeAllUrlSchemeHandlers(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_removeAllUrlSchemeHandlers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
            sipCpp->removeAllUrlSchemeHandlers();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_removeAllUrlSchemeHandlers, doc_QQuickWebEngineProfile_removeAllUrlSchemeHandlers);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_clearHttpCache, "clearHttpCache(self)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_clearHttpCache(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_clearHttpCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
            sipCpp->clearHttpCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_clearHttpCache, doc_QQuickWebEngineProfile_clearHttpCache);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_defaultProfile, "defaultProfile() -> QQuickWebEngineProfile");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_defaultProfile(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_defaultProfile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QQuickWebEngineProfile*sipRes;

            sipRes =  ::QQuickWebEngineProfile::defaultProfile();

            PyObject *sipResObj = sipConvertFromType(sipRes,sipType_QQuickWebEngineProfile,NULL);

           sipTransferTo(sipResObj, Py_None);

           return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_defaultProfile, doc_QQuickWebEngineProfile_defaultProfile);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setSpellCheckLanguages, "setSpellCheckLanguages(self, Iterable[str])");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setSpellCheckLanguages(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setSpellCheckLanguages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setSpellCheckLanguages(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setSpellCheckLanguages, doc_QQuickWebEngineProfile_setSpellCheckLanguages);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_spellCheckLanguages, "spellCheckLanguages(self) -> List[str]");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_spellCheckLanguages(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_spellCheckLanguages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->spellCheckLanguages());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_spellCheckLanguages, doc_QQuickWebEngineProfile_spellCheckLanguages);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_setSpellCheckEnabled, "setSpellCheckEnabled(self, bool)");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_setSpellCheckEnabled(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_setSpellCheckEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp, &a0))
        {
            sipCpp->setSpellCheckEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_setSpellCheckEnabled, doc_QQuickWebEngineProfile_setSpellCheckEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineProfile_isSpellCheckEnabled, "isSpellCheckEnabled(self) -> bool");

extern "C" {static PyObject *meth_QQuickWebEngineProfile_isSpellCheckEnabled(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineProfile_isSpellCheckEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSpellCheckEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineProfile, sipName_isSpellCheckEnabled, doc_QQuickWebEngineProfile_isSpellCheckEnabled);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickWebEngineProfile(void *, const sipTypeDef *);}
static void *cast_QQuickWebEngineProfile(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickWebEngineProfile *sipCpp = reinterpret_cast< ::QQuickWebEngineProfile *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWebEngineProfile(void *, int);}
static void release_QQuickWebEngineProfile(void *sipCppV, int)
{
     ::QQuickWebEngineProfile *sipCpp = reinterpret_cast< ::QQuickWebEngineProfile *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickWebEngineProfile(sipSimpleWrapper *);}
static void dealloc_QQuickWebEngineProfile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickWebEngineProfile *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickWebEngineProfile(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickWebEngineProfile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWebEngineProfile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWebEngineProfile *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWebEngineProfile(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWebEngineProfile[] = {{4, 0, 1}};


static PyMethodDef methods_QQuickWebEngineProfile[] = {
    {SIP_MLNAME_CAST(sipName_cachePath), meth_QQuickWebEngineProfile_cachePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_cachePath)},
    {SIP_MLNAME_CAST(sipName_clearHttpCache), meth_QQuickWebEngineProfile_clearHttpCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_clearHttpCache)},
    {SIP_MLNAME_CAST(sipName_cookieStore), meth_QQuickWebEngineProfile_cookieStore, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_cookieStore)},
    {SIP_MLNAME_CAST(sipName_defaultProfile), meth_QQuickWebEngineProfile_defaultProfile, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_defaultProfile)},
    {SIP_MLNAME_CAST(sipName_httpAcceptLanguage), meth_QQuickWebEngineProfile_httpAcceptLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_httpAcceptLanguage)},
    {SIP_MLNAME_CAST(sipName_httpCacheMaximumSize), meth_QQuickWebEngineProfile_httpCacheMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_httpCacheMaximumSize)},
    {SIP_MLNAME_CAST(sipName_httpCacheType), meth_QQuickWebEngineProfile_httpCacheType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_httpCacheType)},
    {SIP_MLNAME_CAST(sipName_httpUserAgent), meth_QQuickWebEngineProfile_httpUserAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_httpUserAgent)},
    {SIP_MLNAME_CAST(sipName_installUrlSchemeHandler), meth_QQuickWebEngineProfile_installUrlSchemeHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_installUrlSchemeHandler)},
    {SIP_MLNAME_CAST(sipName_isOffTheRecord), meth_QQuickWebEngineProfile_isOffTheRecord, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_isOffTheRecord)},
    {SIP_MLNAME_CAST(sipName_isSpellCheckEnabled), meth_QQuickWebEngineProfile_isSpellCheckEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_isSpellCheckEnabled)},
    {SIP_MLNAME_CAST(sipName_persistentCookiesPolicy), meth_QQuickWebEngineProfile_persistentCookiesPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_persistentCookiesPolicy)},
    {SIP_MLNAME_CAST(sipName_persistentStoragePath), meth_QQuickWebEngineProfile_persistentStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_persistentStoragePath)},
    {SIP_MLNAME_CAST(sipName_removeAllUrlSchemeHandlers), meth_QQuickWebEngineProfile_removeAllUrlSchemeHandlers, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_removeAllUrlSchemeHandlers)},
    {SIP_MLNAME_CAST(sipName_removeUrlScheme), meth_QQuickWebEngineProfile_removeUrlScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_removeUrlScheme)},
    {SIP_MLNAME_CAST(sipName_removeUrlSchemeHandler), meth_QQuickWebEngineProfile_removeUrlSchemeHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_removeUrlSchemeHandler)},
    {SIP_MLNAME_CAST(sipName_setCachePath), meth_QQuickWebEngineProfile_setCachePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setCachePath)},
    {SIP_MLNAME_CAST(sipName_setHttpAcceptLanguage), meth_QQuickWebEngineProfile_setHttpAcceptLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setHttpAcceptLanguage)},
    {SIP_MLNAME_CAST(sipName_setHttpCacheMaximumSize), meth_QQuickWebEngineProfile_setHttpCacheMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setHttpCacheMaximumSize)},
    {SIP_MLNAME_CAST(sipName_setHttpCacheType), meth_QQuickWebEngineProfile_setHttpCacheType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setHttpCacheType)},
    {SIP_MLNAME_CAST(sipName_setHttpUserAgent), meth_QQuickWebEngineProfile_setHttpUserAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setHttpUserAgent)},
    {SIP_MLNAME_CAST(sipName_setOffTheRecord), meth_QQuickWebEngineProfile_setOffTheRecord, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setOffTheRecord)},
    {SIP_MLNAME_CAST(sipName_setPersistentCookiesPolicy), meth_QQuickWebEngineProfile_setPersistentCookiesPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setPersistentCookiesPolicy)},
    {SIP_MLNAME_CAST(sipName_setPersistentStoragePath), meth_QQuickWebEngineProfile_setPersistentStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setPersistentStoragePath)},
    {SIP_MLNAME_CAST(sipName_setRequestInterceptor), meth_QQuickWebEngineProfile_setRequestInterceptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setRequestInterceptor)},
    {SIP_MLNAME_CAST(sipName_setSpellCheckEnabled), meth_QQuickWebEngineProfile_setSpellCheckEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setSpellCheckEnabled)},
    {SIP_MLNAME_CAST(sipName_setSpellCheckLanguages), meth_QQuickWebEngineProfile_setSpellCheckLanguages, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setSpellCheckLanguages)},
    {SIP_MLNAME_CAST(sipName_setStorageName), meth_QQuickWebEngineProfile_setStorageName, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_setStorageName)},
    {SIP_MLNAME_CAST(sipName_spellCheckLanguages), meth_QQuickWebEngineProfile_spellCheckLanguages, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_spellCheckLanguages)},
    {SIP_MLNAME_CAST(sipName_storageName), meth_QQuickWebEngineProfile_storageName, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_storageName)},
    {SIP_MLNAME_CAST(sipName_urlSchemeHandler), meth_QQuickWebEngineProfile_urlSchemeHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineProfile_urlSchemeHandler)}
};

static sipEnumMemberDef enummembers_QQuickWebEngineProfile[] = {
    {sipName_AllowPersistentCookies, static_cast<int>( ::QQuickWebEngineProfile::AllowPersistentCookies), 2},
    {sipName_DiskHttpCache, static_cast<int>( ::QQuickWebEngineProfile::DiskHttpCache), 1},
    {sipName_ForcePersistentCookies, static_cast<int>( ::QQuickWebEngineProfile::ForcePersistentCookies), 2},
    {sipName_MemoryHttpCache, static_cast<int>( ::QQuickWebEngineProfile::MemoryHttpCache), 1},
    {sipName_NoCache, static_cast<int>( ::QQuickWebEngineProfile::NoCache), 1},
    {sipName_NoPersistentCookies, static_cast<int>( ::QQuickWebEngineProfile::NoPersistentCookies), 2},
};

PyDoc_STRVAR(doc_QQuickWebEngineProfile, "\1QQuickWebEngineProfile(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWebEngineProfile[] = {
    {"spellCheckEnabledChanged()", "\1spellCheckEnabledChanged(self)", 0, 0},
    {"spellCheckLanguagesChanged()", "\1spellCheckLanguagesChanged(self)", 0, 0},
    {"httpAcceptLanguageChanged()", "\1httpAcceptLanguageChanged(self)", 0, 0},
    {"httpCacheMaximumSizeChanged()", "\1httpCacheMaximumSizeChanged(self)", 0, 0},
    {"persistentCookiesPolicyChanged()", "\1persistentCookiesPolicyChanged(self)", 0, 0},
    {"httpCacheTypeChanged()", "\1httpCacheTypeChanged(self)", 0, 0},
    {"httpUserAgentChanged()", "\1httpUserAgentChanged(self)", 0, 0},
    {"cachePathChanged()", "\1cachePathChanged(self)", 0, 0},
    {"persistentStoragePathChanged()", "\1persistentStoragePathChanged(self)", 0, 0},
    {"offTheRecordChanged()", "\1offTheRecordChanged(self)", 0, 0},
    {"storageNameChanged()", "\1storageNameChanged(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QQuickWebEngineProfile = {
    & ::QQuickWebEngineProfile::staticMetaObject,
    0,
    signals_QQuickWebEngineProfile,
    0
};


sipClassTypeDef sipTypeDef_QtWebEngine_QQuickWebEngineProfile = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickWebEngineProfile,
        {0},
        &plugin_QQuickWebEngineProfile
    },
    {
        sipNameNr_QQuickWebEngineProfile,
        {0, 0, 1},
        31, methods_QQuickWebEngineProfile,
        6, enummembers_QQuickWebEngineProfile,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickWebEngineProfile,
    -1,
    -1,
    supers_QQuickWebEngineProfile,
    0,
    init_type_QQuickWebEngineProfile,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickWebEngineProfile,
    0,
    0,
    0,
    release_QQuickWebEngineProfile,
    cast_QQuickWebEngineProfile,
    0,
    0,
    0,
    0,
    0,
    0
};
