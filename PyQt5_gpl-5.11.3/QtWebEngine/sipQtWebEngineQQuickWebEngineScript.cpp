/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngine.h"

#line 28 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/sip/QtWebEngine/qquickwebenginescript.sip"
#include <qquickwebenginescript.h>
#line 29 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/Users/alan/PycharmProjects/ProjectPyQt/PyQt5_gpl-5.11.3/QtWebEngine/sipQtWebEngineQQuickWebEngineScript.cpp"


class sipQQuickWebEngineScript : public  ::QQuickWebEngineScript
{
public:
    sipQQuickWebEngineScript( ::QObject*);
    virtual ~sipQQuickWebEngineScript();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickWebEngineScript(const sipQQuickWebEngineScript &);
    sipQQuickWebEngineScript &operator = (const sipQQuickWebEngineScript &);

    char sipPyMethods[7];
};

sipQQuickWebEngineScript::sipQQuickWebEngineScript( ::QObject*a0):  ::QQuickWebEngineScript(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWebEngineScript::~sipQQuickWebEngineScript()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickWebEngineScript::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngine_qt_metaobject(sipPySelf,sipType_QQuickWebEngineScript);

    return  ::QQuickWebEngineScript::metaObject();
}

int sipQQuickWebEngineScript::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickWebEngineScript::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngine_qt_metacall(sipPySelf,sipType_QQuickWebEngineScript,_c,_id,_a);

    return _id;
}

void *sipQQuickWebEngineScript::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngine_qt_metacast(sipPySelf, sipType_QQuickWebEngineScript, _clname, &sipCpp) ? sipCpp :  ::QQuickWebEngineScript::qt_metacast(_clname));
}

bool sipQQuickWebEngineScript::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QQuickWebEngineScript::event(a0);

    extern bool sipVH_QtWebEngine_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebEngine_5(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickWebEngineScript::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickWebEngineScript::eventFilter(a0,a1);

    extern bool sipVH_QtWebEngine_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebEngine_4(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickWebEngineScript::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickWebEngineScript::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngine_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebEngine_3(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineScript::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickWebEngineScript::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngine_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebEngine_2(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineScript::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickWebEngineScript::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebEngine_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebEngine_1(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineScript::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickWebEngineScript::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebEngine_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWebEngine_0(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWebEngineScript::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickWebEngineScript::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebEngine_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWebEngine_0(sipGILState, sipImportedVirtErrorHandlers_QtWebEngine_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineScript_toString(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_toString, doc_QQuickWebEngineScript_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_name, "name(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineScript_name(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_name, doc_QQuickWebEngineScript_name);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_sourceUrl, "sourceUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QQuickWebEngineScript_sourceUrl(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_sourceUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->sourceUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_sourceUrl, doc_QQuickWebEngineScript_sourceUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_sourceCode, "sourceCode(self) -> str");

extern "C" {static PyObject *meth_QQuickWebEngineScript_sourceCode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_sourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sourceCode());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_sourceCode, doc_QQuickWebEngineScript_sourceCode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_injectionPoint, "injectionPoint(self) -> QQuickWebEngineScript.InjectionPoint");

extern "C" {static PyObject *meth_QQuickWebEngineScript_injectionPoint(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_injectionPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
             ::QQuickWebEngineScript::InjectionPoint sipRes;

            sipRes = sipCpp->injectionPoint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWebEngineScript_InjectionPoint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_injectionPoint, doc_QQuickWebEngineScript_injectionPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_worldId, "worldId(self) -> QQuickWebEngineScript.ScriptWorldId");

extern "C" {static PyObject *meth_QQuickWebEngineScript_worldId(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_worldId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
             ::QQuickWebEngineScript::ScriptWorldId sipRes;

            sipRes = sipCpp->worldId();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWebEngineScript_ScriptWorldId);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_worldId, doc_QQuickWebEngineScript_worldId);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_runOnSubframes, "runOnSubframes(self) -> bool");

extern "C" {static PyObject *meth_QQuickWebEngineScript_runOnSubframes(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_runOnSubframes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->runOnSubframes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_runOnSubframes, doc_QQuickWebEngineScript_runOnSubframes);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_setName(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_setName, doc_QQuickWebEngineScript_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_setSourceUrl, "setSourceUrl(self, QUrl)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_setSourceUrl(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_setSourceUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setSourceUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_setSourceUrl, doc_QQuickWebEngineScript_setSourceUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_setSourceCode, "setSourceCode(self, str)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_setSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_setSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSourceCode(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_setSourceCode, doc_QQuickWebEngineScript_setSourceCode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_setInjectionPoint, "setInjectionPoint(self, QQuickWebEngineScript.InjectionPoint)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_setInjectionPoint(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_setInjectionPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWebEngineScript::InjectionPoint a0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, sipType_QQuickWebEngineScript_InjectionPoint, &a0))
        {
            sipCpp->setInjectionPoint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_setInjectionPoint, doc_QQuickWebEngineScript_setInjectionPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_setWorldId, "setWorldId(self, QQuickWebEngineScript.ScriptWorldId)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_setWorldId(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_setWorldId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QQuickWebEngineScript::ScriptWorldId a0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, sipType_QQuickWebEngineScript_ScriptWorldId, &a0))
        {
            sipCpp->setWorldId(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_setWorldId, doc_QQuickWebEngineScript_setWorldId);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_setRunOnSubframes, "setRunOnSubframes(self, bool)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_setRunOnSubframes(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_setRunOnSubframes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, &a0))
        {
            sipCpp->setRunOnSubframes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_setRunOnSubframes, doc_QQuickWebEngineScript_setRunOnSubframes);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWebEngineScript_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QQuickWebEngineScript_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWebEngineScript_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QQuickWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWebEngineScript, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWebEngineScript::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWebEngineScript, sipName_timerEvent, doc_QQuickWebEngineScript_timerEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickWebEngineScript(void *, const sipTypeDef *);}
static void *cast_QQuickWebEngineScript(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickWebEngineScript *sipCpp = reinterpret_cast< ::QQuickWebEngineScript *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWebEngineScript(void *, int);}
static void release_QQuickWebEngineScript(void *sipCppV, int)
{
     ::QQuickWebEngineScript *sipCpp = reinterpret_cast< ::QQuickWebEngineScript *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickWebEngineScript(sipSimpleWrapper *);}
static void dealloc_QQuickWebEngineScript(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickWebEngineScript *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickWebEngineScript(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickWebEngineScript(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWebEngineScript(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWebEngineScript *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWebEngineScript(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWebEngineScript[] = {{4, 0, 1}};


static PyMethodDef methods_QQuickWebEngineScript[] = {
    {SIP_MLNAME_CAST(sipName_injectionPoint), meth_QQuickWebEngineScript_injectionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_injectionPoint)},
    {SIP_MLNAME_CAST(sipName_name), meth_QQuickWebEngineScript_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_name)},
    {SIP_MLNAME_CAST(sipName_runOnSubframes), meth_QQuickWebEngineScript_runOnSubframes, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_runOnSubframes)},
    {SIP_MLNAME_CAST(sipName_setInjectionPoint), meth_QQuickWebEngineScript_setInjectionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_setInjectionPoint)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QQuickWebEngineScript_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_setName)},
    {SIP_MLNAME_CAST(sipName_setRunOnSubframes), meth_QQuickWebEngineScript_setRunOnSubframes, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_setRunOnSubframes)},
    {SIP_MLNAME_CAST(sipName_setSourceCode), meth_QQuickWebEngineScript_setSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_setSourceCode)},
    {SIP_MLNAME_CAST(sipName_setSourceUrl), meth_QQuickWebEngineScript_setSourceUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_setSourceUrl)},
    {SIP_MLNAME_CAST(sipName_setWorldId), meth_QQuickWebEngineScript_setWorldId, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_setWorldId)},
    {SIP_MLNAME_CAST(sipName_sourceCode), meth_QQuickWebEngineScript_sourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_sourceCode)},
    {SIP_MLNAME_CAST(sipName_sourceUrl), meth_QQuickWebEngineScript_sourceUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_sourceUrl)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QQuickWebEngineScript_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QQuickWebEngineScript_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_toString)},
    {SIP_MLNAME_CAST(sipName_worldId), meth_QQuickWebEngineScript_worldId, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWebEngineScript_worldId)}
};

static sipEnumMemberDef enummembers_QQuickWebEngineScript[] = {
    {sipName_ApplicationWorld, static_cast<int>( ::QQuickWebEngineScript::ApplicationWorld), 5},
    {sipName_Deferred, static_cast<int>( ::QQuickWebEngineScript::Deferred), 4},
    {sipName_DocumentCreation, static_cast<int>( ::QQuickWebEngineScript::DocumentCreation), 4},
    {sipName_DocumentReady, static_cast<int>( ::QQuickWebEngineScript::DocumentReady), 4},
    {sipName_MainWorld, static_cast<int>( ::QQuickWebEngineScript::MainWorld), 5},
    {sipName_UserWorld, static_cast<int>( ::QQuickWebEngineScript::UserWorld), 5},
};

PyDoc_STRVAR(doc_QQuickWebEngineScript, "\1QQuickWebEngineScript(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWebEngineScript[] = {
    {"runOnSubframesChanged(bool)", "\1runOnSubframesChanged(self, bool)", 0, 0},
    {"worldIdChanged(ScriptWorldId)|(QQuickWebEngineScript::ScriptWorldId)", "\1worldIdChanged(self, QQuickWebEngineScript.ScriptWorldId)", 0, 0},
    {"injectionPointChanged(InjectionPoint)|(QQuickWebEngineScript::InjectionPoint)", "\1injectionPointChanged(self, QQuickWebEngineScript.InjectionPoint)", 0, 0},
    {"sourceCodeChanged(QString)", "\1sourceCodeChanged(self, str)", 0, 0},
    {"sourceUrlChanged(QUrl)", "\1sourceUrlChanged(self, QUrl)", 0, 0},
    {"nameChanged(QString)", "\1nameChanged(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QQuickWebEngineScript = {
    & ::QQuickWebEngineScript::staticMetaObject,
    0,
    signals_QQuickWebEngineScript,
    0
};


sipClassTypeDef sipTypeDef_QtWebEngine_QQuickWebEngineScript = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickWebEngineScript,
        {0},
        &plugin_QQuickWebEngineScript
    },
    {
        sipNameNr_QQuickWebEngineScript,
        {0, 0, 1},
        14, methods_QQuickWebEngineScript,
        6, enummembers_QQuickWebEngineScript,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickWebEngineScript,
    -1,
    -1,
    supers_QQuickWebEngineScript,
    0,
    init_type_QQuickWebEngineScript,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickWebEngineScript,
    0,
    0,
    0,
    release_QQuickWebEngineScript,
    cast_QQuickWebEngineScript,
    0,
    0,
    0,
    0,
    0,
    0
};
